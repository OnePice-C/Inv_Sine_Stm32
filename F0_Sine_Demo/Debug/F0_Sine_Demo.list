
F0_Sine_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026d8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08002798  08002798  00012798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002858  08002858  000206cc  2**0
                  CONTENTS
  4 .ARM          00000000  08002858  08002858  000206cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002858  08002858  000206cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002858  08002858  00012858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800285c  0800285c  0001285c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006cc  20000000  08002860  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000048  200006cc  08002f2c  000206cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000714  08002f2c  00020714  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000206cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005394  00000000  00000000  000206f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000e7a  00000000  00000000  00025a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000710  00000000  00000000  00026908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000678  00000000  00000000  00027018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ceef  00000000  00000000  00027690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000054e9  00000000  00000000  0003457f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004c6ae  00000000  00000000  00039a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00086116  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001bc4  00000000  00000000  00086168  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200006cc 	.word	0x200006cc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002780 	.word	0x08002780

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200006d0 	.word	0x200006d0
 8000104:	08002780 	.word	0x08002780

08000108 <__divsi3>:
 8000108:	4603      	mov	r3, r0
 800010a:	430b      	orrs	r3, r1
 800010c:	d47f      	bmi.n	800020e <__divsi3+0x106>
 800010e:	2200      	movs	r2, #0
 8000110:	0843      	lsrs	r3, r0, #1
 8000112:	428b      	cmp	r3, r1
 8000114:	d374      	bcc.n	8000200 <__divsi3+0xf8>
 8000116:	0903      	lsrs	r3, r0, #4
 8000118:	428b      	cmp	r3, r1
 800011a:	d35f      	bcc.n	80001dc <__divsi3+0xd4>
 800011c:	0a03      	lsrs	r3, r0, #8
 800011e:	428b      	cmp	r3, r1
 8000120:	d344      	bcc.n	80001ac <__divsi3+0xa4>
 8000122:	0b03      	lsrs	r3, r0, #12
 8000124:	428b      	cmp	r3, r1
 8000126:	d328      	bcc.n	800017a <__divsi3+0x72>
 8000128:	0c03      	lsrs	r3, r0, #16
 800012a:	428b      	cmp	r3, r1
 800012c:	d30d      	bcc.n	800014a <__divsi3+0x42>
 800012e:	22ff      	movs	r2, #255	; 0xff
 8000130:	0209      	lsls	r1, r1, #8
 8000132:	ba12      	rev	r2, r2
 8000134:	0c03      	lsrs	r3, r0, #16
 8000136:	428b      	cmp	r3, r1
 8000138:	d302      	bcc.n	8000140 <__divsi3+0x38>
 800013a:	1212      	asrs	r2, r2, #8
 800013c:	0209      	lsls	r1, r1, #8
 800013e:	d065      	beq.n	800020c <__divsi3+0x104>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d319      	bcc.n	800017a <__divsi3+0x72>
 8000146:	e000      	b.n	800014a <__divsi3+0x42>
 8000148:	0a09      	lsrs	r1, r1, #8
 800014a:	0bc3      	lsrs	r3, r0, #15
 800014c:	428b      	cmp	r3, r1
 800014e:	d301      	bcc.n	8000154 <__divsi3+0x4c>
 8000150:	03cb      	lsls	r3, r1, #15
 8000152:	1ac0      	subs	r0, r0, r3
 8000154:	4152      	adcs	r2, r2
 8000156:	0b83      	lsrs	r3, r0, #14
 8000158:	428b      	cmp	r3, r1
 800015a:	d301      	bcc.n	8000160 <__divsi3+0x58>
 800015c:	038b      	lsls	r3, r1, #14
 800015e:	1ac0      	subs	r0, r0, r3
 8000160:	4152      	adcs	r2, r2
 8000162:	0b43      	lsrs	r3, r0, #13
 8000164:	428b      	cmp	r3, r1
 8000166:	d301      	bcc.n	800016c <__divsi3+0x64>
 8000168:	034b      	lsls	r3, r1, #13
 800016a:	1ac0      	subs	r0, r0, r3
 800016c:	4152      	adcs	r2, r2
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d301      	bcc.n	8000178 <__divsi3+0x70>
 8000174:	030b      	lsls	r3, r1, #12
 8000176:	1ac0      	subs	r0, r0, r3
 8000178:	4152      	adcs	r2, r2
 800017a:	0ac3      	lsrs	r3, r0, #11
 800017c:	428b      	cmp	r3, r1
 800017e:	d301      	bcc.n	8000184 <__divsi3+0x7c>
 8000180:	02cb      	lsls	r3, r1, #11
 8000182:	1ac0      	subs	r0, r0, r3
 8000184:	4152      	adcs	r2, r2
 8000186:	0a83      	lsrs	r3, r0, #10
 8000188:	428b      	cmp	r3, r1
 800018a:	d301      	bcc.n	8000190 <__divsi3+0x88>
 800018c:	028b      	lsls	r3, r1, #10
 800018e:	1ac0      	subs	r0, r0, r3
 8000190:	4152      	adcs	r2, r2
 8000192:	0a43      	lsrs	r3, r0, #9
 8000194:	428b      	cmp	r3, r1
 8000196:	d301      	bcc.n	800019c <__divsi3+0x94>
 8000198:	024b      	lsls	r3, r1, #9
 800019a:	1ac0      	subs	r0, r0, r3
 800019c:	4152      	adcs	r2, r2
 800019e:	0a03      	lsrs	r3, r0, #8
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__divsi3+0xa0>
 80001a4:	020b      	lsls	r3, r1, #8
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	d2cd      	bcs.n	8000148 <__divsi3+0x40>
 80001ac:	09c3      	lsrs	r3, r0, #7
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__divsi3+0xae>
 80001b2:	01cb      	lsls	r3, r1, #7
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0983      	lsrs	r3, r0, #6
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__divsi3+0xba>
 80001be:	018b      	lsls	r3, r1, #6
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0943      	lsrs	r3, r0, #5
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__divsi3+0xc6>
 80001ca:	014b      	lsls	r3, r1, #5
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0903      	lsrs	r3, r0, #4
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__divsi3+0xd2>
 80001d6:	010b      	lsls	r3, r1, #4
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	08c3      	lsrs	r3, r0, #3
 80001de:	428b      	cmp	r3, r1
 80001e0:	d301      	bcc.n	80001e6 <__divsi3+0xde>
 80001e2:	00cb      	lsls	r3, r1, #3
 80001e4:	1ac0      	subs	r0, r0, r3
 80001e6:	4152      	adcs	r2, r2
 80001e8:	0883      	lsrs	r3, r0, #2
 80001ea:	428b      	cmp	r3, r1
 80001ec:	d301      	bcc.n	80001f2 <__divsi3+0xea>
 80001ee:	008b      	lsls	r3, r1, #2
 80001f0:	1ac0      	subs	r0, r0, r3
 80001f2:	4152      	adcs	r2, r2
 80001f4:	0843      	lsrs	r3, r0, #1
 80001f6:	428b      	cmp	r3, r1
 80001f8:	d301      	bcc.n	80001fe <__divsi3+0xf6>
 80001fa:	004b      	lsls	r3, r1, #1
 80001fc:	1ac0      	subs	r0, r0, r3
 80001fe:	4152      	adcs	r2, r2
 8000200:	1a41      	subs	r1, r0, r1
 8000202:	d200      	bcs.n	8000206 <__divsi3+0xfe>
 8000204:	4601      	mov	r1, r0
 8000206:	4152      	adcs	r2, r2
 8000208:	4610      	mov	r0, r2
 800020a:	4770      	bx	lr
 800020c:	e05d      	b.n	80002ca <__divsi3+0x1c2>
 800020e:	0fca      	lsrs	r2, r1, #31
 8000210:	d000      	beq.n	8000214 <__divsi3+0x10c>
 8000212:	4249      	negs	r1, r1
 8000214:	1003      	asrs	r3, r0, #32
 8000216:	d300      	bcc.n	800021a <__divsi3+0x112>
 8000218:	4240      	negs	r0, r0
 800021a:	4053      	eors	r3, r2
 800021c:	2200      	movs	r2, #0
 800021e:	469c      	mov	ip, r3
 8000220:	0903      	lsrs	r3, r0, #4
 8000222:	428b      	cmp	r3, r1
 8000224:	d32d      	bcc.n	8000282 <__divsi3+0x17a>
 8000226:	0a03      	lsrs	r3, r0, #8
 8000228:	428b      	cmp	r3, r1
 800022a:	d312      	bcc.n	8000252 <__divsi3+0x14a>
 800022c:	22fc      	movs	r2, #252	; 0xfc
 800022e:	0189      	lsls	r1, r1, #6
 8000230:	ba12      	rev	r2, r2
 8000232:	0a03      	lsrs	r3, r0, #8
 8000234:	428b      	cmp	r3, r1
 8000236:	d30c      	bcc.n	8000252 <__divsi3+0x14a>
 8000238:	0189      	lsls	r1, r1, #6
 800023a:	1192      	asrs	r2, r2, #6
 800023c:	428b      	cmp	r3, r1
 800023e:	d308      	bcc.n	8000252 <__divsi3+0x14a>
 8000240:	0189      	lsls	r1, r1, #6
 8000242:	1192      	asrs	r2, r2, #6
 8000244:	428b      	cmp	r3, r1
 8000246:	d304      	bcc.n	8000252 <__divsi3+0x14a>
 8000248:	0189      	lsls	r1, r1, #6
 800024a:	d03a      	beq.n	80002c2 <__divsi3+0x1ba>
 800024c:	1192      	asrs	r2, r2, #6
 800024e:	e000      	b.n	8000252 <__divsi3+0x14a>
 8000250:	0989      	lsrs	r1, r1, #6
 8000252:	09c3      	lsrs	r3, r0, #7
 8000254:	428b      	cmp	r3, r1
 8000256:	d301      	bcc.n	800025c <__divsi3+0x154>
 8000258:	01cb      	lsls	r3, r1, #7
 800025a:	1ac0      	subs	r0, r0, r3
 800025c:	4152      	adcs	r2, r2
 800025e:	0983      	lsrs	r3, r0, #6
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x160>
 8000264:	018b      	lsls	r3, r1, #6
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0943      	lsrs	r3, r0, #5
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x16c>
 8000270:	014b      	lsls	r3, r1, #5
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0903      	lsrs	r3, r0, #4
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x178>
 800027c:	010b      	lsls	r3, r1, #4
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	08c3      	lsrs	r3, r0, #3
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x184>
 8000288:	00cb      	lsls	r3, r1, #3
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0883      	lsrs	r3, r0, #2
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x190>
 8000294:	008b      	lsls	r3, r1, #2
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	d2d9      	bcs.n	8000250 <__divsi3+0x148>
 800029c:	0843      	lsrs	r3, r0, #1
 800029e:	428b      	cmp	r3, r1
 80002a0:	d301      	bcc.n	80002a6 <__divsi3+0x19e>
 80002a2:	004b      	lsls	r3, r1, #1
 80002a4:	1ac0      	subs	r0, r0, r3
 80002a6:	4152      	adcs	r2, r2
 80002a8:	1a41      	subs	r1, r0, r1
 80002aa:	d200      	bcs.n	80002ae <__divsi3+0x1a6>
 80002ac:	4601      	mov	r1, r0
 80002ae:	4663      	mov	r3, ip
 80002b0:	4152      	adcs	r2, r2
 80002b2:	105b      	asrs	r3, r3, #1
 80002b4:	4610      	mov	r0, r2
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x1b4>
 80002b8:	4240      	negs	r0, r0
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d500      	bpl.n	80002c0 <__divsi3+0x1b8>
 80002be:	4249      	negs	r1, r1
 80002c0:	4770      	bx	lr
 80002c2:	4663      	mov	r3, ip
 80002c4:	105b      	asrs	r3, r3, #1
 80002c6:	d300      	bcc.n	80002ca <__divsi3+0x1c2>
 80002c8:	4240      	negs	r0, r0
 80002ca:	b501      	push	{r0, lr}
 80002cc:	2000      	movs	r0, #0
 80002ce:	f000 f805 	bl	80002dc <__aeabi_idiv0>
 80002d2:	bd02      	pop	{r1, pc}

080002d4 <__aeabi_idivmod>:
 80002d4:	2900      	cmp	r1, #0
 80002d6:	d0f8      	beq.n	80002ca <__divsi3+0x1c2>
 80002d8:	e716      	b.n	8000108 <__divsi3>
 80002da:	4770      	bx	lr

080002dc <__aeabi_idiv0>:
 80002dc:	4770      	bx	lr
 80002de:	46c0      	nop			; (mov r8, r8)

080002e0 <__aeabi_cdrcmple>:
 80002e0:	4684      	mov	ip, r0
 80002e2:	0010      	movs	r0, r2
 80002e4:	4662      	mov	r2, ip
 80002e6:	468c      	mov	ip, r1
 80002e8:	0019      	movs	r1, r3
 80002ea:	4663      	mov	r3, ip
 80002ec:	e000      	b.n	80002f0 <__aeabi_cdcmpeq>
 80002ee:	46c0      	nop			; (mov r8, r8)

080002f0 <__aeabi_cdcmpeq>:
 80002f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80002f2:	f000 feeb 	bl	80010cc <__ledf2>
 80002f6:	2800      	cmp	r0, #0
 80002f8:	d401      	bmi.n	80002fe <__aeabi_cdcmpeq+0xe>
 80002fa:	2100      	movs	r1, #0
 80002fc:	42c8      	cmn	r0, r1
 80002fe:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000300 <__aeabi_dcmpeq>:
 8000300:	b510      	push	{r4, lr}
 8000302:	f000 fe3b 	bl	8000f7c <__eqdf2>
 8000306:	4240      	negs	r0, r0
 8000308:	3001      	adds	r0, #1
 800030a:	bd10      	pop	{r4, pc}

0800030c <__aeabi_dcmplt>:
 800030c:	b510      	push	{r4, lr}
 800030e:	f000 fedd 	bl	80010cc <__ledf2>
 8000312:	2800      	cmp	r0, #0
 8000314:	db01      	blt.n	800031a <__aeabi_dcmplt+0xe>
 8000316:	2000      	movs	r0, #0
 8000318:	bd10      	pop	{r4, pc}
 800031a:	2001      	movs	r0, #1
 800031c:	bd10      	pop	{r4, pc}
 800031e:	46c0      	nop			; (mov r8, r8)

08000320 <__aeabi_dcmple>:
 8000320:	b510      	push	{r4, lr}
 8000322:	f000 fed3 	bl	80010cc <__ledf2>
 8000326:	2800      	cmp	r0, #0
 8000328:	dd01      	ble.n	800032e <__aeabi_dcmple+0xe>
 800032a:	2000      	movs	r0, #0
 800032c:	bd10      	pop	{r4, pc}
 800032e:	2001      	movs	r0, #1
 8000330:	bd10      	pop	{r4, pc}
 8000332:	46c0      	nop			; (mov r8, r8)

08000334 <__aeabi_dcmpgt>:
 8000334:	b510      	push	{r4, lr}
 8000336:	f000 fe63 	bl	8001000 <__gedf2>
 800033a:	2800      	cmp	r0, #0
 800033c:	dc01      	bgt.n	8000342 <__aeabi_dcmpgt+0xe>
 800033e:	2000      	movs	r0, #0
 8000340:	bd10      	pop	{r4, pc}
 8000342:	2001      	movs	r0, #1
 8000344:	bd10      	pop	{r4, pc}
 8000346:	46c0      	nop			; (mov r8, r8)

08000348 <__aeabi_dcmpge>:
 8000348:	b510      	push	{r4, lr}
 800034a:	f000 fe59 	bl	8001000 <__gedf2>
 800034e:	2800      	cmp	r0, #0
 8000350:	da01      	bge.n	8000356 <__aeabi_dcmpge+0xe>
 8000352:	2000      	movs	r0, #0
 8000354:	bd10      	pop	{r4, pc}
 8000356:	2001      	movs	r0, #1
 8000358:	bd10      	pop	{r4, pc}
 800035a:	46c0      	nop			; (mov r8, r8)

0800035c <__aeabi_f2uiz>:
 800035c:	219e      	movs	r1, #158	; 0x9e
 800035e:	b510      	push	{r4, lr}
 8000360:	05c9      	lsls	r1, r1, #23
 8000362:	1c04      	adds	r4, r0, #0
 8000364:	f000 ff8e 	bl	8001284 <__aeabi_fcmpge>
 8000368:	2800      	cmp	r0, #0
 800036a:	d103      	bne.n	8000374 <__aeabi_f2uiz+0x18>
 800036c:	1c20      	adds	r0, r4, #0
 800036e:	f000 fd97 	bl	8000ea0 <__aeabi_f2iz>
 8000372:	bd10      	pop	{r4, pc}
 8000374:	219e      	movs	r1, #158	; 0x9e
 8000376:	1c20      	adds	r0, r4, #0
 8000378:	05c9      	lsls	r1, r1, #23
 800037a:	f000 fbe3 	bl	8000b44 <__aeabi_fsub>
 800037e:	f000 fd8f 	bl	8000ea0 <__aeabi_f2iz>
 8000382:	2380      	movs	r3, #128	; 0x80
 8000384:	061b      	lsls	r3, r3, #24
 8000386:	469c      	mov	ip, r3
 8000388:	4460      	add	r0, ip
 800038a:	e7f2      	b.n	8000372 <__aeabi_f2uiz+0x16>

0800038c <__aeabi_fadd>:
 800038c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800038e:	46c6      	mov	lr, r8
 8000390:	0243      	lsls	r3, r0, #9
 8000392:	0a5b      	lsrs	r3, r3, #9
 8000394:	024e      	lsls	r6, r1, #9
 8000396:	0045      	lsls	r5, r0, #1
 8000398:	004f      	lsls	r7, r1, #1
 800039a:	00da      	lsls	r2, r3, #3
 800039c:	0fc4      	lsrs	r4, r0, #31
 800039e:	469c      	mov	ip, r3
 80003a0:	0a70      	lsrs	r0, r6, #9
 80003a2:	4690      	mov	r8, r2
 80003a4:	b500      	push	{lr}
 80003a6:	0e2d      	lsrs	r5, r5, #24
 80003a8:	0e3f      	lsrs	r7, r7, #24
 80003aa:	0fc9      	lsrs	r1, r1, #31
 80003ac:	09b6      	lsrs	r6, r6, #6
 80003ae:	428c      	cmp	r4, r1
 80003b0:	d04b      	beq.n	800044a <__aeabi_fadd+0xbe>
 80003b2:	1bea      	subs	r2, r5, r7
 80003b4:	2a00      	cmp	r2, #0
 80003b6:	dd36      	ble.n	8000426 <__aeabi_fadd+0x9a>
 80003b8:	2f00      	cmp	r7, #0
 80003ba:	d061      	beq.n	8000480 <__aeabi_fadd+0xf4>
 80003bc:	2dff      	cmp	r5, #255	; 0xff
 80003be:	d100      	bne.n	80003c2 <__aeabi_fadd+0x36>
 80003c0:	e0ad      	b.n	800051e <__aeabi_fadd+0x192>
 80003c2:	2380      	movs	r3, #128	; 0x80
 80003c4:	04db      	lsls	r3, r3, #19
 80003c6:	431e      	orrs	r6, r3
 80003c8:	2a1b      	cmp	r2, #27
 80003ca:	dc00      	bgt.n	80003ce <__aeabi_fadd+0x42>
 80003cc:	e0d3      	b.n	8000576 <__aeabi_fadd+0x1ea>
 80003ce:	2001      	movs	r0, #1
 80003d0:	4643      	mov	r3, r8
 80003d2:	1a18      	subs	r0, r3, r0
 80003d4:	0143      	lsls	r3, r0, #5
 80003d6:	d400      	bmi.n	80003da <__aeabi_fadd+0x4e>
 80003d8:	e08c      	b.n	80004f4 <__aeabi_fadd+0x168>
 80003da:	0180      	lsls	r0, r0, #6
 80003dc:	0987      	lsrs	r7, r0, #6
 80003de:	0038      	movs	r0, r7
 80003e0:	f000 ff5a 	bl	8001298 <__clzsi2>
 80003e4:	3805      	subs	r0, #5
 80003e6:	4087      	lsls	r7, r0
 80003e8:	4285      	cmp	r5, r0
 80003ea:	dc00      	bgt.n	80003ee <__aeabi_fadd+0x62>
 80003ec:	e0b6      	b.n	800055c <__aeabi_fadd+0x1d0>
 80003ee:	1a2d      	subs	r5, r5, r0
 80003f0:	48b3      	ldr	r0, [pc, #716]	; (80006c0 <__aeabi_fadd+0x334>)
 80003f2:	4038      	ands	r0, r7
 80003f4:	0743      	lsls	r3, r0, #29
 80003f6:	d004      	beq.n	8000402 <__aeabi_fadd+0x76>
 80003f8:	230f      	movs	r3, #15
 80003fa:	4003      	ands	r3, r0
 80003fc:	2b04      	cmp	r3, #4
 80003fe:	d000      	beq.n	8000402 <__aeabi_fadd+0x76>
 8000400:	3004      	adds	r0, #4
 8000402:	0143      	lsls	r3, r0, #5
 8000404:	d400      	bmi.n	8000408 <__aeabi_fadd+0x7c>
 8000406:	e078      	b.n	80004fa <__aeabi_fadd+0x16e>
 8000408:	1c6a      	adds	r2, r5, #1
 800040a:	2dfe      	cmp	r5, #254	; 0xfe
 800040c:	d065      	beq.n	80004da <__aeabi_fadd+0x14e>
 800040e:	0180      	lsls	r0, r0, #6
 8000410:	0a43      	lsrs	r3, r0, #9
 8000412:	469c      	mov	ip, r3
 8000414:	b2d2      	uxtb	r2, r2
 8000416:	4663      	mov	r3, ip
 8000418:	05d0      	lsls	r0, r2, #23
 800041a:	4318      	orrs	r0, r3
 800041c:	07e4      	lsls	r4, r4, #31
 800041e:	4320      	orrs	r0, r4
 8000420:	bc80      	pop	{r7}
 8000422:	46b8      	mov	r8, r7
 8000424:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000426:	2a00      	cmp	r2, #0
 8000428:	d035      	beq.n	8000496 <__aeabi_fadd+0x10a>
 800042a:	1b7a      	subs	r2, r7, r5
 800042c:	2d00      	cmp	r5, #0
 800042e:	d000      	beq.n	8000432 <__aeabi_fadd+0xa6>
 8000430:	e0af      	b.n	8000592 <__aeabi_fadd+0x206>
 8000432:	4643      	mov	r3, r8
 8000434:	2b00      	cmp	r3, #0
 8000436:	d100      	bne.n	800043a <__aeabi_fadd+0xae>
 8000438:	e0a7      	b.n	800058a <__aeabi_fadd+0x1fe>
 800043a:	1e53      	subs	r3, r2, #1
 800043c:	2a01      	cmp	r2, #1
 800043e:	d100      	bne.n	8000442 <__aeabi_fadd+0xb6>
 8000440:	e12f      	b.n	80006a2 <__aeabi_fadd+0x316>
 8000442:	2aff      	cmp	r2, #255	; 0xff
 8000444:	d069      	beq.n	800051a <__aeabi_fadd+0x18e>
 8000446:	001a      	movs	r2, r3
 8000448:	e0aa      	b.n	80005a0 <__aeabi_fadd+0x214>
 800044a:	1be9      	subs	r1, r5, r7
 800044c:	2900      	cmp	r1, #0
 800044e:	dd70      	ble.n	8000532 <__aeabi_fadd+0x1a6>
 8000450:	2f00      	cmp	r7, #0
 8000452:	d037      	beq.n	80004c4 <__aeabi_fadd+0x138>
 8000454:	2dff      	cmp	r5, #255	; 0xff
 8000456:	d062      	beq.n	800051e <__aeabi_fadd+0x192>
 8000458:	2380      	movs	r3, #128	; 0x80
 800045a:	04db      	lsls	r3, r3, #19
 800045c:	431e      	orrs	r6, r3
 800045e:	291b      	cmp	r1, #27
 8000460:	dc00      	bgt.n	8000464 <__aeabi_fadd+0xd8>
 8000462:	e0b0      	b.n	80005c6 <__aeabi_fadd+0x23a>
 8000464:	2001      	movs	r0, #1
 8000466:	4440      	add	r0, r8
 8000468:	0143      	lsls	r3, r0, #5
 800046a:	d543      	bpl.n	80004f4 <__aeabi_fadd+0x168>
 800046c:	3501      	adds	r5, #1
 800046e:	2dff      	cmp	r5, #255	; 0xff
 8000470:	d033      	beq.n	80004da <__aeabi_fadd+0x14e>
 8000472:	2301      	movs	r3, #1
 8000474:	4a93      	ldr	r2, [pc, #588]	; (80006c4 <__aeabi_fadd+0x338>)
 8000476:	4003      	ands	r3, r0
 8000478:	0840      	lsrs	r0, r0, #1
 800047a:	4010      	ands	r0, r2
 800047c:	4318      	orrs	r0, r3
 800047e:	e7b9      	b.n	80003f4 <__aeabi_fadd+0x68>
 8000480:	2e00      	cmp	r6, #0
 8000482:	d100      	bne.n	8000486 <__aeabi_fadd+0xfa>
 8000484:	e083      	b.n	800058e <__aeabi_fadd+0x202>
 8000486:	1e51      	subs	r1, r2, #1
 8000488:	2a01      	cmp	r2, #1
 800048a:	d100      	bne.n	800048e <__aeabi_fadd+0x102>
 800048c:	e0d8      	b.n	8000640 <__aeabi_fadd+0x2b4>
 800048e:	2aff      	cmp	r2, #255	; 0xff
 8000490:	d045      	beq.n	800051e <__aeabi_fadd+0x192>
 8000492:	000a      	movs	r2, r1
 8000494:	e798      	b.n	80003c8 <__aeabi_fadd+0x3c>
 8000496:	27fe      	movs	r7, #254	; 0xfe
 8000498:	1c6a      	adds	r2, r5, #1
 800049a:	4217      	tst	r7, r2
 800049c:	d000      	beq.n	80004a0 <__aeabi_fadd+0x114>
 800049e:	e086      	b.n	80005ae <__aeabi_fadd+0x222>
 80004a0:	2d00      	cmp	r5, #0
 80004a2:	d000      	beq.n	80004a6 <__aeabi_fadd+0x11a>
 80004a4:	e0b7      	b.n	8000616 <__aeabi_fadd+0x28a>
 80004a6:	4643      	mov	r3, r8
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d100      	bne.n	80004ae <__aeabi_fadd+0x122>
 80004ac:	e0f3      	b.n	8000696 <__aeabi_fadd+0x30a>
 80004ae:	2200      	movs	r2, #0
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d0b0      	beq.n	8000416 <__aeabi_fadd+0x8a>
 80004b4:	1b98      	subs	r0, r3, r6
 80004b6:	0143      	lsls	r3, r0, #5
 80004b8:	d400      	bmi.n	80004bc <__aeabi_fadd+0x130>
 80004ba:	e0fa      	b.n	80006b2 <__aeabi_fadd+0x326>
 80004bc:	4643      	mov	r3, r8
 80004be:	000c      	movs	r4, r1
 80004c0:	1af0      	subs	r0, r6, r3
 80004c2:	e797      	b.n	80003f4 <__aeabi_fadd+0x68>
 80004c4:	2e00      	cmp	r6, #0
 80004c6:	d100      	bne.n	80004ca <__aeabi_fadd+0x13e>
 80004c8:	e0c8      	b.n	800065c <__aeabi_fadd+0x2d0>
 80004ca:	1e4a      	subs	r2, r1, #1
 80004cc:	2901      	cmp	r1, #1
 80004ce:	d100      	bne.n	80004d2 <__aeabi_fadd+0x146>
 80004d0:	e0ae      	b.n	8000630 <__aeabi_fadd+0x2a4>
 80004d2:	29ff      	cmp	r1, #255	; 0xff
 80004d4:	d023      	beq.n	800051e <__aeabi_fadd+0x192>
 80004d6:	0011      	movs	r1, r2
 80004d8:	e7c1      	b.n	800045e <__aeabi_fadd+0xd2>
 80004da:	2300      	movs	r3, #0
 80004dc:	22ff      	movs	r2, #255	; 0xff
 80004de:	469c      	mov	ip, r3
 80004e0:	e799      	b.n	8000416 <__aeabi_fadd+0x8a>
 80004e2:	21fe      	movs	r1, #254	; 0xfe
 80004e4:	1c6a      	adds	r2, r5, #1
 80004e6:	4211      	tst	r1, r2
 80004e8:	d077      	beq.n	80005da <__aeabi_fadd+0x24e>
 80004ea:	2aff      	cmp	r2, #255	; 0xff
 80004ec:	d0f5      	beq.n	80004da <__aeabi_fadd+0x14e>
 80004ee:	0015      	movs	r5, r2
 80004f0:	4446      	add	r6, r8
 80004f2:	0870      	lsrs	r0, r6, #1
 80004f4:	0743      	lsls	r3, r0, #29
 80004f6:	d000      	beq.n	80004fa <__aeabi_fadd+0x16e>
 80004f8:	e77e      	b.n	80003f8 <__aeabi_fadd+0x6c>
 80004fa:	08c3      	lsrs	r3, r0, #3
 80004fc:	2dff      	cmp	r5, #255	; 0xff
 80004fe:	d00e      	beq.n	800051e <__aeabi_fadd+0x192>
 8000500:	025b      	lsls	r3, r3, #9
 8000502:	0a5b      	lsrs	r3, r3, #9
 8000504:	469c      	mov	ip, r3
 8000506:	b2ea      	uxtb	r2, r5
 8000508:	e785      	b.n	8000416 <__aeabi_fadd+0x8a>
 800050a:	2e00      	cmp	r6, #0
 800050c:	d007      	beq.n	800051e <__aeabi_fadd+0x192>
 800050e:	2280      	movs	r2, #128	; 0x80
 8000510:	03d2      	lsls	r2, r2, #15
 8000512:	4213      	tst	r3, r2
 8000514:	d003      	beq.n	800051e <__aeabi_fadd+0x192>
 8000516:	4210      	tst	r0, r2
 8000518:	d101      	bne.n	800051e <__aeabi_fadd+0x192>
 800051a:	000c      	movs	r4, r1
 800051c:	0003      	movs	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d0db      	beq.n	80004da <__aeabi_fadd+0x14e>
 8000522:	2080      	movs	r0, #128	; 0x80
 8000524:	03c0      	lsls	r0, r0, #15
 8000526:	4318      	orrs	r0, r3
 8000528:	0240      	lsls	r0, r0, #9
 800052a:	0a43      	lsrs	r3, r0, #9
 800052c:	469c      	mov	ip, r3
 800052e:	22ff      	movs	r2, #255	; 0xff
 8000530:	e771      	b.n	8000416 <__aeabi_fadd+0x8a>
 8000532:	2900      	cmp	r1, #0
 8000534:	d0d5      	beq.n	80004e2 <__aeabi_fadd+0x156>
 8000536:	1b7a      	subs	r2, r7, r5
 8000538:	2d00      	cmp	r5, #0
 800053a:	d160      	bne.n	80005fe <__aeabi_fadd+0x272>
 800053c:	4643      	mov	r3, r8
 800053e:	2b00      	cmp	r3, #0
 8000540:	d024      	beq.n	800058c <__aeabi_fadd+0x200>
 8000542:	1e53      	subs	r3, r2, #1
 8000544:	2a01      	cmp	r2, #1
 8000546:	d073      	beq.n	8000630 <__aeabi_fadd+0x2a4>
 8000548:	2aff      	cmp	r2, #255	; 0xff
 800054a:	d0e7      	beq.n	800051c <__aeabi_fadd+0x190>
 800054c:	001a      	movs	r2, r3
 800054e:	2a1b      	cmp	r2, #27
 8000550:	dc00      	bgt.n	8000554 <__aeabi_fadd+0x1c8>
 8000552:	e085      	b.n	8000660 <__aeabi_fadd+0x2d4>
 8000554:	2001      	movs	r0, #1
 8000556:	003d      	movs	r5, r7
 8000558:	1980      	adds	r0, r0, r6
 800055a:	e785      	b.n	8000468 <__aeabi_fadd+0xdc>
 800055c:	2320      	movs	r3, #32
 800055e:	003a      	movs	r2, r7
 8000560:	1b45      	subs	r5, r0, r5
 8000562:	0038      	movs	r0, r7
 8000564:	3501      	adds	r5, #1
 8000566:	40ea      	lsrs	r2, r5
 8000568:	1b5d      	subs	r5, r3, r5
 800056a:	40a8      	lsls	r0, r5
 800056c:	1e43      	subs	r3, r0, #1
 800056e:	4198      	sbcs	r0, r3
 8000570:	2500      	movs	r5, #0
 8000572:	4310      	orrs	r0, r2
 8000574:	e73e      	b.n	80003f4 <__aeabi_fadd+0x68>
 8000576:	2320      	movs	r3, #32
 8000578:	0030      	movs	r0, r6
 800057a:	1a9b      	subs	r3, r3, r2
 800057c:	0031      	movs	r1, r6
 800057e:	4098      	lsls	r0, r3
 8000580:	40d1      	lsrs	r1, r2
 8000582:	1e43      	subs	r3, r0, #1
 8000584:	4198      	sbcs	r0, r3
 8000586:	4308      	orrs	r0, r1
 8000588:	e722      	b.n	80003d0 <__aeabi_fadd+0x44>
 800058a:	000c      	movs	r4, r1
 800058c:	0003      	movs	r3, r0
 800058e:	0015      	movs	r5, r2
 8000590:	e7b4      	b.n	80004fc <__aeabi_fadd+0x170>
 8000592:	2fff      	cmp	r7, #255	; 0xff
 8000594:	d0c1      	beq.n	800051a <__aeabi_fadd+0x18e>
 8000596:	2380      	movs	r3, #128	; 0x80
 8000598:	4640      	mov	r0, r8
 800059a:	04db      	lsls	r3, r3, #19
 800059c:	4318      	orrs	r0, r3
 800059e:	4680      	mov	r8, r0
 80005a0:	2a1b      	cmp	r2, #27
 80005a2:	dd51      	ble.n	8000648 <__aeabi_fadd+0x2bc>
 80005a4:	2001      	movs	r0, #1
 80005a6:	000c      	movs	r4, r1
 80005a8:	003d      	movs	r5, r7
 80005aa:	1a30      	subs	r0, r6, r0
 80005ac:	e712      	b.n	80003d4 <__aeabi_fadd+0x48>
 80005ae:	4643      	mov	r3, r8
 80005b0:	1b9f      	subs	r7, r3, r6
 80005b2:	017b      	lsls	r3, r7, #5
 80005b4:	d42b      	bmi.n	800060e <__aeabi_fadd+0x282>
 80005b6:	2f00      	cmp	r7, #0
 80005b8:	d000      	beq.n	80005bc <__aeabi_fadd+0x230>
 80005ba:	e710      	b.n	80003de <__aeabi_fadd+0x52>
 80005bc:	2300      	movs	r3, #0
 80005be:	2400      	movs	r4, #0
 80005c0:	2200      	movs	r2, #0
 80005c2:	469c      	mov	ip, r3
 80005c4:	e727      	b.n	8000416 <__aeabi_fadd+0x8a>
 80005c6:	2320      	movs	r3, #32
 80005c8:	0032      	movs	r2, r6
 80005ca:	0030      	movs	r0, r6
 80005cc:	40ca      	lsrs	r2, r1
 80005ce:	1a59      	subs	r1, r3, r1
 80005d0:	4088      	lsls	r0, r1
 80005d2:	1e43      	subs	r3, r0, #1
 80005d4:	4198      	sbcs	r0, r3
 80005d6:	4310      	orrs	r0, r2
 80005d8:	e745      	b.n	8000466 <__aeabi_fadd+0xda>
 80005da:	2d00      	cmp	r5, #0
 80005dc:	d14a      	bne.n	8000674 <__aeabi_fadd+0x2e8>
 80005de:	4643      	mov	r3, r8
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d063      	beq.n	80006ac <__aeabi_fadd+0x320>
 80005e4:	2200      	movs	r2, #0
 80005e6:	2e00      	cmp	r6, #0
 80005e8:	d100      	bne.n	80005ec <__aeabi_fadd+0x260>
 80005ea:	e714      	b.n	8000416 <__aeabi_fadd+0x8a>
 80005ec:	0030      	movs	r0, r6
 80005ee:	4440      	add	r0, r8
 80005f0:	0143      	lsls	r3, r0, #5
 80005f2:	d400      	bmi.n	80005f6 <__aeabi_fadd+0x26a>
 80005f4:	e77e      	b.n	80004f4 <__aeabi_fadd+0x168>
 80005f6:	4b32      	ldr	r3, [pc, #200]	; (80006c0 <__aeabi_fadd+0x334>)
 80005f8:	3501      	adds	r5, #1
 80005fa:	4018      	ands	r0, r3
 80005fc:	e77a      	b.n	80004f4 <__aeabi_fadd+0x168>
 80005fe:	2fff      	cmp	r7, #255	; 0xff
 8000600:	d08c      	beq.n	800051c <__aeabi_fadd+0x190>
 8000602:	2380      	movs	r3, #128	; 0x80
 8000604:	4641      	mov	r1, r8
 8000606:	04db      	lsls	r3, r3, #19
 8000608:	4319      	orrs	r1, r3
 800060a:	4688      	mov	r8, r1
 800060c:	e79f      	b.n	800054e <__aeabi_fadd+0x1c2>
 800060e:	4643      	mov	r3, r8
 8000610:	000c      	movs	r4, r1
 8000612:	1af7      	subs	r7, r6, r3
 8000614:	e6e3      	b.n	80003de <__aeabi_fadd+0x52>
 8000616:	4642      	mov	r2, r8
 8000618:	2a00      	cmp	r2, #0
 800061a:	d000      	beq.n	800061e <__aeabi_fadd+0x292>
 800061c:	e775      	b.n	800050a <__aeabi_fadd+0x17e>
 800061e:	2e00      	cmp	r6, #0
 8000620:	d000      	beq.n	8000624 <__aeabi_fadd+0x298>
 8000622:	e77a      	b.n	800051a <__aeabi_fadd+0x18e>
 8000624:	2380      	movs	r3, #128	; 0x80
 8000626:	03db      	lsls	r3, r3, #15
 8000628:	2400      	movs	r4, #0
 800062a:	469c      	mov	ip, r3
 800062c:	22ff      	movs	r2, #255	; 0xff
 800062e:	e6f2      	b.n	8000416 <__aeabi_fadd+0x8a>
 8000630:	0030      	movs	r0, r6
 8000632:	4440      	add	r0, r8
 8000634:	2501      	movs	r5, #1
 8000636:	0143      	lsls	r3, r0, #5
 8000638:	d400      	bmi.n	800063c <__aeabi_fadd+0x2b0>
 800063a:	e75b      	b.n	80004f4 <__aeabi_fadd+0x168>
 800063c:	2502      	movs	r5, #2
 800063e:	e718      	b.n	8000472 <__aeabi_fadd+0xe6>
 8000640:	4643      	mov	r3, r8
 8000642:	2501      	movs	r5, #1
 8000644:	1b98      	subs	r0, r3, r6
 8000646:	e6c5      	b.n	80003d4 <__aeabi_fadd+0x48>
 8000648:	2320      	movs	r3, #32
 800064a:	4644      	mov	r4, r8
 800064c:	4640      	mov	r0, r8
 800064e:	40d4      	lsrs	r4, r2
 8000650:	1a9a      	subs	r2, r3, r2
 8000652:	4090      	lsls	r0, r2
 8000654:	1e43      	subs	r3, r0, #1
 8000656:	4198      	sbcs	r0, r3
 8000658:	4320      	orrs	r0, r4
 800065a:	e7a4      	b.n	80005a6 <__aeabi_fadd+0x21a>
 800065c:	000d      	movs	r5, r1
 800065e:	e74d      	b.n	80004fc <__aeabi_fadd+0x170>
 8000660:	2320      	movs	r3, #32
 8000662:	4641      	mov	r1, r8
 8000664:	4640      	mov	r0, r8
 8000666:	40d1      	lsrs	r1, r2
 8000668:	1a9a      	subs	r2, r3, r2
 800066a:	4090      	lsls	r0, r2
 800066c:	1e43      	subs	r3, r0, #1
 800066e:	4198      	sbcs	r0, r3
 8000670:	4308      	orrs	r0, r1
 8000672:	e770      	b.n	8000556 <__aeabi_fadd+0x1ca>
 8000674:	4642      	mov	r2, r8
 8000676:	2a00      	cmp	r2, #0
 8000678:	d100      	bne.n	800067c <__aeabi_fadd+0x2f0>
 800067a:	e74f      	b.n	800051c <__aeabi_fadd+0x190>
 800067c:	2e00      	cmp	r6, #0
 800067e:	d100      	bne.n	8000682 <__aeabi_fadd+0x2f6>
 8000680:	e74d      	b.n	800051e <__aeabi_fadd+0x192>
 8000682:	2280      	movs	r2, #128	; 0x80
 8000684:	03d2      	lsls	r2, r2, #15
 8000686:	4213      	tst	r3, r2
 8000688:	d100      	bne.n	800068c <__aeabi_fadd+0x300>
 800068a:	e748      	b.n	800051e <__aeabi_fadd+0x192>
 800068c:	4210      	tst	r0, r2
 800068e:	d000      	beq.n	8000692 <__aeabi_fadd+0x306>
 8000690:	e745      	b.n	800051e <__aeabi_fadd+0x192>
 8000692:	0003      	movs	r3, r0
 8000694:	e743      	b.n	800051e <__aeabi_fadd+0x192>
 8000696:	2e00      	cmp	r6, #0
 8000698:	d090      	beq.n	80005bc <__aeabi_fadd+0x230>
 800069a:	000c      	movs	r4, r1
 800069c:	4684      	mov	ip, r0
 800069e:	2200      	movs	r2, #0
 80006a0:	e6b9      	b.n	8000416 <__aeabi_fadd+0x8a>
 80006a2:	4643      	mov	r3, r8
 80006a4:	000c      	movs	r4, r1
 80006a6:	1af0      	subs	r0, r6, r3
 80006a8:	3501      	adds	r5, #1
 80006aa:	e693      	b.n	80003d4 <__aeabi_fadd+0x48>
 80006ac:	4684      	mov	ip, r0
 80006ae:	2200      	movs	r2, #0
 80006b0:	e6b1      	b.n	8000416 <__aeabi_fadd+0x8a>
 80006b2:	2800      	cmp	r0, #0
 80006b4:	d000      	beq.n	80006b8 <__aeabi_fadd+0x32c>
 80006b6:	e71d      	b.n	80004f4 <__aeabi_fadd+0x168>
 80006b8:	2300      	movs	r3, #0
 80006ba:	2400      	movs	r4, #0
 80006bc:	469c      	mov	ip, r3
 80006be:	e6aa      	b.n	8000416 <__aeabi_fadd+0x8a>
 80006c0:	fbffffff 	.word	0xfbffffff
 80006c4:	7dffffff 	.word	0x7dffffff

080006c8 <__aeabi_fdiv>:
 80006c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006ca:	464f      	mov	r7, r9
 80006cc:	4646      	mov	r6, r8
 80006ce:	46d6      	mov	lr, sl
 80006d0:	0245      	lsls	r5, r0, #9
 80006d2:	b5c0      	push	{r6, r7, lr}
 80006d4:	0047      	lsls	r7, r0, #1
 80006d6:	1c0c      	adds	r4, r1, #0
 80006d8:	0a6d      	lsrs	r5, r5, #9
 80006da:	0e3f      	lsrs	r7, r7, #24
 80006dc:	0fc6      	lsrs	r6, r0, #31
 80006de:	2f00      	cmp	r7, #0
 80006e0:	d100      	bne.n	80006e4 <__aeabi_fdiv+0x1c>
 80006e2:	e070      	b.n	80007c6 <__aeabi_fdiv+0xfe>
 80006e4:	2fff      	cmp	r7, #255	; 0xff
 80006e6:	d100      	bne.n	80006ea <__aeabi_fdiv+0x22>
 80006e8:	e075      	b.n	80007d6 <__aeabi_fdiv+0x10e>
 80006ea:	00eb      	lsls	r3, r5, #3
 80006ec:	2580      	movs	r5, #128	; 0x80
 80006ee:	04ed      	lsls	r5, r5, #19
 80006f0:	431d      	orrs	r5, r3
 80006f2:	2300      	movs	r3, #0
 80006f4:	4699      	mov	r9, r3
 80006f6:	469a      	mov	sl, r3
 80006f8:	3f7f      	subs	r7, #127	; 0x7f
 80006fa:	0260      	lsls	r0, r4, #9
 80006fc:	0a43      	lsrs	r3, r0, #9
 80006fe:	4698      	mov	r8, r3
 8000700:	0063      	lsls	r3, r4, #1
 8000702:	0e1b      	lsrs	r3, r3, #24
 8000704:	0fe4      	lsrs	r4, r4, #31
 8000706:	2b00      	cmp	r3, #0
 8000708:	d04e      	beq.n	80007a8 <__aeabi_fdiv+0xe0>
 800070a:	2bff      	cmp	r3, #255	; 0xff
 800070c:	d046      	beq.n	800079c <__aeabi_fdiv+0xd4>
 800070e:	4642      	mov	r2, r8
 8000710:	00d0      	lsls	r0, r2, #3
 8000712:	2280      	movs	r2, #128	; 0x80
 8000714:	04d2      	lsls	r2, r2, #19
 8000716:	4302      	orrs	r2, r0
 8000718:	4690      	mov	r8, r2
 800071a:	2200      	movs	r2, #0
 800071c:	3b7f      	subs	r3, #127	; 0x7f
 800071e:	0031      	movs	r1, r6
 8000720:	1aff      	subs	r7, r7, r3
 8000722:	464b      	mov	r3, r9
 8000724:	4061      	eors	r1, r4
 8000726:	b2c9      	uxtb	r1, r1
 8000728:	4313      	orrs	r3, r2
 800072a:	2b0f      	cmp	r3, #15
 800072c:	d900      	bls.n	8000730 <__aeabi_fdiv+0x68>
 800072e:	e0b5      	b.n	800089c <__aeabi_fdiv+0x1d4>
 8000730:	486e      	ldr	r0, [pc, #440]	; (80008ec <__aeabi_fdiv+0x224>)
 8000732:	009b      	lsls	r3, r3, #2
 8000734:	58c3      	ldr	r3, [r0, r3]
 8000736:	469f      	mov	pc, r3
 8000738:	2300      	movs	r3, #0
 800073a:	4698      	mov	r8, r3
 800073c:	0026      	movs	r6, r4
 800073e:	4645      	mov	r5, r8
 8000740:	4692      	mov	sl, r2
 8000742:	4653      	mov	r3, sl
 8000744:	2b02      	cmp	r3, #2
 8000746:	d100      	bne.n	800074a <__aeabi_fdiv+0x82>
 8000748:	e089      	b.n	800085e <__aeabi_fdiv+0x196>
 800074a:	2b03      	cmp	r3, #3
 800074c:	d100      	bne.n	8000750 <__aeabi_fdiv+0x88>
 800074e:	e09e      	b.n	800088e <__aeabi_fdiv+0x1c6>
 8000750:	2b01      	cmp	r3, #1
 8000752:	d018      	beq.n	8000786 <__aeabi_fdiv+0xbe>
 8000754:	003b      	movs	r3, r7
 8000756:	337f      	adds	r3, #127	; 0x7f
 8000758:	2b00      	cmp	r3, #0
 800075a:	dd69      	ble.n	8000830 <__aeabi_fdiv+0x168>
 800075c:	076a      	lsls	r2, r5, #29
 800075e:	d004      	beq.n	800076a <__aeabi_fdiv+0xa2>
 8000760:	220f      	movs	r2, #15
 8000762:	402a      	ands	r2, r5
 8000764:	2a04      	cmp	r2, #4
 8000766:	d000      	beq.n	800076a <__aeabi_fdiv+0xa2>
 8000768:	3504      	adds	r5, #4
 800076a:	012a      	lsls	r2, r5, #4
 800076c:	d503      	bpl.n	8000776 <__aeabi_fdiv+0xae>
 800076e:	4b60      	ldr	r3, [pc, #384]	; (80008f0 <__aeabi_fdiv+0x228>)
 8000770:	401d      	ands	r5, r3
 8000772:	003b      	movs	r3, r7
 8000774:	3380      	adds	r3, #128	; 0x80
 8000776:	2bfe      	cmp	r3, #254	; 0xfe
 8000778:	dd00      	ble.n	800077c <__aeabi_fdiv+0xb4>
 800077a:	e070      	b.n	800085e <__aeabi_fdiv+0x196>
 800077c:	01ad      	lsls	r5, r5, #6
 800077e:	0a6d      	lsrs	r5, r5, #9
 8000780:	b2d8      	uxtb	r0, r3
 8000782:	e002      	b.n	800078a <__aeabi_fdiv+0xc2>
 8000784:	000e      	movs	r6, r1
 8000786:	2000      	movs	r0, #0
 8000788:	2500      	movs	r5, #0
 800078a:	05c0      	lsls	r0, r0, #23
 800078c:	4328      	orrs	r0, r5
 800078e:	07f6      	lsls	r6, r6, #31
 8000790:	4330      	orrs	r0, r6
 8000792:	bce0      	pop	{r5, r6, r7}
 8000794:	46ba      	mov	sl, r7
 8000796:	46b1      	mov	r9, r6
 8000798:	46a8      	mov	r8, r5
 800079a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800079c:	4643      	mov	r3, r8
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d13f      	bne.n	8000822 <__aeabi_fdiv+0x15a>
 80007a2:	2202      	movs	r2, #2
 80007a4:	3fff      	subs	r7, #255	; 0xff
 80007a6:	e003      	b.n	80007b0 <__aeabi_fdiv+0xe8>
 80007a8:	4643      	mov	r3, r8
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d12d      	bne.n	800080a <__aeabi_fdiv+0x142>
 80007ae:	2201      	movs	r2, #1
 80007b0:	0031      	movs	r1, r6
 80007b2:	464b      	mov	r3, r9
 80007b4:	4061      	eors	r1, r4
 80007b6:	b2c9      	uxtb	r1, r1
 80007b8:	4313      	orrs	r3, r2
 80007ba:	2b0f      	cmp	r3, #15
 80007bc:	d834      	bhi.n	8000828 <__aeabi_fdiv+0x160>
 80007be:	484d      	ldr	r0, [pc, #308]	; (80008f4 <__aeabi_fdiv+0x22c>)
 80007c0:	009b      	lsls	r3, r3, #2
 80007c2:	58c3      	ldr	r3, [r0, r3]
 80007c4:	469f      	mov	pc, r3
 80007c6:	2d00      	cmp	r5, #0
 80007c8:	d113      	bne.n	80007f2 <__aeabi_fdiv+0x12a>
 80007ca:	2304      	movs	r3, #4
 80007cc:	4699      	mov	r9, r3
 80007ce:	3b03      	subs	r3, #3
 80007d0:	2700      	movs	r7, #0
 80007d2:	469a      	mov	sl, r3
 80007d4:	e791      	b.n	80006fa <__aeabi_fdiv+0x32>
 80007d6:	2d00      	cmp	r5, #0
 80007d8:	d105      	bne.n	80007e6 <__aeabi_fdiv+0x11e>
 80007da:	2308      	movs	r3, #8
 80007dc:	4699      	mov	r9, r3
 80007de:	3b06      	subs	r3, #6
 80007e0:	27ff      	movs	r7, #255	; 0xff
 80007e2:	469a      	mov	sl, r3
 80007e4:	e789      	b.n	80006fa <__aeabi_fdiv+0x32>
 80007e6:	230c      	movs	r3, #12
 80007e8:	4699      	mov	r9, r3
 80007ea:	3b09      	subs	r3, #9
 80007ec:	27ff      	movs	r7, #255	; 0xff
 80007ee:	469a      	mov	sl, r3
 80007f0:	e783      	b.n	80006fa <__aeabi_fdiv+0x32>
 80007f2:	0028      	movs	r0, r5
 80007f4:	f000 fd50 	bl	8001298 <__clzsi2>
 80007f8:	2776      	movs	r7, #118	; 0x76
 80007fa:	1f43      	subs	r3, r0, #5
 80007fc:	409d      	lsls	r5, r3
 80007fe:	2300      	movs	r3, #0
 8000800:	427f      	negs	r7, r7
 8000802:	4699      	mov	r9, r3
 8000804:	469a      	mov	sl, r3
 8000806:	1a3f      	subs	r7, r7, r0
 8000808:	e777      	b.n	80006fa <__aeabi_fdiv+0x32>
 800080a:	4640      	mov	r0, r8
 800080c:	f000 fd44 	bl	8001298 <__clzsi2>
 8000810:	4642      	mov	r2, r8
 8000812:	1f43      	subs	r3, r0, #5
 8000814:	409a      	lsls	r2, r3
 8000816:	2376      	movs	r3, #118	; 0x76
 8000818:	425b      	negs	r3, r3
 800081a:	4690      	mov	r8, r2
 800081c:	1a1b      	subs	r3, r3, r0
 800081e:	2200      	movs	r2, #0
 8000820:	e77d      	b.n	800071e <__aeabi_fdiv+0x56>
 8000822:	23ff      	movs	r3, #255	; 0xff
 8000824:	2203      	movs	r2, #3
 8000826:	e77a      	b.n	800071e <__aeabi_fdiv+0x56>
 8000828:	000e      	movs	r6, r1
 800082a:	20ff      	movs	r0, #255	; 0xff
 800082c:	2500      	movs	r5, #0
 800082e:	e7ac      	b.n	800078a <__aeabi_fdiv+0xc2>
 8000830:	2001      	movs	r0, #1
 8000832:	1ac0      	subs	r0, r0, r3
 8000834:	281b      	cmp	r0, #27
 8000836:	dca6      	bgt.n	8000786 <__aeabi_fdiv+0xbe>
 8000838:	379e      	adds	r7, #158	; 0x9e
 800083a:	002a      	movs	r2, r5
 800083c:	40bd      	lsls	r5, r7
 800083e:	40c2      	lsrs	r2, r0
 8000840:	1e6b      	subs	r3, r5, #1
 8000842:	419d      	sbcs	r5, r3
 8000844:	4315      	orrs	r5, r2
 8000846:	076b      	lsls	r3, r5, #29
 8000848:	d004      	beq.n	8000854 <__aeabi_fdiv+0x18c>
 800084a:	230f      	movs	r3, #15
 800084c:	402b      	ands	r3, r5
 800084e:	2b04      	cmp	r3, #4
 8000850:	d000      	beq.n	8000854 <__aeabi_fdiv+0x18c>
 8000852:	3504      	adds	r5, #4
 8000854:	016b      	lsls	r3, r5, #5
 8000856:	d544      	bpl.n	80008e2 <__aeabi_fdiv+0x21a>
 8000858:	2001      	movs	r0, #1
 800085a:	2500      	movs	r5, #0
 800085c:	e795      	b.n	800078a <__aeabi_fdiv+0xc2>
 800085e:	20ff      	movs	r0, #255	; 0xff
 8000860:	2500      	movs	r5, #0
 8000862:	e792      	b.n	800078a <__aeabi_fdiv+0xc2>
 8000864:	2580      	movs	r5, #128	; 0x80
 8000866:	2600      	movs	r6, #0
 8000868:	20ff      	movs	r0, #255	; 0xff
 800086a:	03ed      	lsls	r5, r5, #15
 800086c:	e78d      	b.n	800078a <__aeabi_fdiv+0xc2>
 800086e:	2300      	movs	r3, #0
 8000870:	4698      	mov	r8, r3
 8000872:	2080      	movs	r0, #128	; 0x80
 8000874:	03c0      	lsls	r0, r0, #15
 8000876:	4205      	tst	r5, r0
 8000878:	d009      	beq.n	800088e <__aeabi_fdiv+0x1c6>
 800087a:	4643      	mov	r3, r8
 800087c:	4203      	tst	r3, r0
 800087e:	d106      	bne.n	800088e <__aeabi_fdiv+0x1c6>
 8000880:	4645      	mov	r5, r8
 8000882:	4305      	orrs	r5, r0
 8000884:	026d      	lsls	r5, r5, #9
 8000886:	0026      	movs	r6, r4
 8000888:	20ff      	movs	r0, #255	; 0xff
 800088a:	0a6d      	lsrs	r5, r5, #9
 800088c:	e77d      	b.n	800078a <__aeabi_fdiv+0xc2>
 800088e:	2080      	movs	r0, #128	; 0x80
 8000890:	03c0      	lsls	r0, r0, #15
 8000892:	4305      	orrs	r5, r0
 8000894:	026d      	lsls	r5, r5, #9
 8000896:	20ff      	movs	r0, #255	; 0xff
 8000898:	0a6d      	lsrs	r5, r5, #9
 800089a:	e776      	b.n	800078a <__aeabi_fdiv+0xc2>
 800089c:	4642      	mov	r2, r8
 800089e:	016b      	lsls	r3, r5, #5
 80008a0:	0150      	lsls	r0, r2, #5
 80008a2:	4283      	cmp	r3, r0
 80008a4:	d219      	bcs.n	80008da <__aeabi_fdiv+0x212>
 80008a6:	221b      	movs	r2, #27
 80008a8:	2500      	movs	r5, #0
 80008aa:	3f01      	subs	r7, #1
 80008ac:	2601      	movs	r6, #1
 80008ae:	001c      	movs	r4, r3
 80008b0:	006d      	lsls	r5, r5, #1
 80008b2:	005b      	lsls	r3, r3, #1
 80008b4:	2c00      	cmp	r4, #0
 80008b6:	db01      	blt.n	80008bc <__aeabi_fdiv+0x1f4>
 80008b8:	4298      	cmp	r0, r3
 80008ba:	d801      	bhi.n	80008c0 <__aeabi_fdiv+0x1f8>
 80008bc:	1a1b      	subs	r3, r3, r0
 80008be:	4335      	orrs	r5, r6
 80008c0:	3a01      	subs	r2, #1
 80008c2:	2a00      	cmp	r2, #0
 80008c4:	d1f3      	bne.n	80008ae <__aeabi_fdiv+0x1e6>
 80008c6:	1e5a      	subs	r2, r3, #1
 80008c8:	4193      	sbcs	r3, r2
 80008ca:	431d      	orrs	r5, r3
 80008cc:	003b      	movs	r3, r7
 80008ce:	337f      	adds	r3, #127	; 0x7f
 80008d0:	000e      	movs	r6, r1
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	dd00      	ble.n	80008d8 <__aeabi_fdiv+0x210>
 80008d6:	e741      	b.n	800075c <__aeabi_fdiv+0x94>
 80008d8:	e7aa      	b.n	8000830 <__aeabi_fdiv+0x168>
 80008da:	221a      	movs	r2, #26
 80008dc:	2501      	movs	r5, #1
 80008de:	1a1b      	subs	r3, r3, r0
 80008e0:	e7e4      	b.n	80008ac <__aeabi_fdiv+0x1e4>
 80008e2:	01ad      	lsls	r5, r5, #6
 80008e4:	2000      	movs	r0, #0
 80008e6:	0a6d      	lsrs	r5, r5, #9
 80008e8:	e74f      	b.n	800078a <__aeabi_fdiv+0xc2>
 80008ea:	46c0      	nop			; (mov r8, r8)
 80008ec:	08002798 	.word	0x08002798
 80008f0:	f7ffffff 	.word	0xf7ffffff
 80008f4:	080027d8 	.word	0x080027d8

080008f8 <__aeabi_fmul>:
 80008f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008fa:	464f      	mov	r7, r9
 80008fc:	4646      	mov	r6, r8
 80008fe:	46d6      	mov	lr, sl
 8000900:	0244      	lsls	r4, r0, #9
 8000902:	0045      	lsls	r5, r0, #1
 8000904:	b5c0      	push	{r6, r7, lr}
 8000906:	0a64      	lsrs	r4, r4, #9
 8000908:	1c0f      	adds	r7, r1, #0
 800090a:	0e2d      	lsrs	r5, r5, #24
 800090c:	0fc6      	lsrs	r6, r0, #31
 800090e:	2d00      	cmp	r5, #0
 8000910:	d100      	bne.n	8000914 <__aeabi_fmul+0x1c>
 8000912:	e08d      	b.n	8000a30 <__aeabi_fmul+0x138>
 8000914:	2dff      	cmp	r5, #255	; 0xff
 8000916:	d100      	bne.n	800091a <__aeabi_fmul+0x22>
 8000918:	e092      	b.n	8000a40 <__aeabi_fmul+0x148>
 800091a:	2300      	movs	r3, #0
 800091c:	2080      	movs	r0, #128	; 0x80
 800091e:	4699      	mov	r9, r3
 8000920:	469a      	mov	sl, r3
 8000922:	00e4      	lsls	r4, r4, #3
 8000924:	04c0      	lsls	r0, r0, #19
 8000926:	4304      	orrs	r4, r0
 8000928:	3d7f      	subs	r5, #127	; 0x7f
 800092a:	0278      	lsls	r0, r7, #9
 800092c:	0a43      	lsrs	r3, r0, #9
 800092e:	4698      	mov	r8, r3
 8000930:	007b      	lsls	r3, r7, #1
 8000932:	0e1b      	lsrs	r3, r3, #24
 8000934:	0fff      	lsrs	r7, r7, #31
 8000936:	2b00      	cmp	r3, #0
 8000938:	d100      	bne.n	800093c <__aeabi_fmul+0x44>
 800093a:	e070      	b.n	8000a1e <__aeabi_fmul+0x126>
 800093c:	2bff      	cmp	r3, #255	; 0xff
 800093e:	d100      	bne.n	8000942 <__aeabi_fmul+0x4a>
 8000940:	e086      	b.n	8000a50 <__aeabi_fmul+0x158>
 8000942:	4642      	mov	r2, r8
 8000944:	00d0      	lsls	r0, r2, #3
 8000946:	2280      	movs	r2, #128	; 0x80
 8000948:	3b7f      	subs	r3, #127	; 0x7f
 800094a:	18ed      	adds	r5, r5, r3
 800094c:	2300      	movs	r3, #0
 800094e:	04d2      	lsls	r2, r2, #19
 8000950:	4302      	orrs	r2, r0
 8000952:	4690      	mov	r8, r2
 8000954:	469c      	mov	ip, r3
 8000956:	0031      	movs	r1, r6
 8000958:	464b      	mov	r3, r9
 800095a:	4079      	eors	r1, r7
 800095c:	1c68      	adds	r0, r5, #1
 800095e:	2b0f      	cmp	r3, #15
 8000960:	d81c      	bhi.n	800099c <__aeabi_fmul+0xa4>
 8000962:	4a76      	ldr	r2, [pc, #472]	; (8000b3c <__aeabi_fmul+0x244>)
 8000964:	009b      	lsls	r3, r3, #2
 8000966:	58d3      	ldr	r3, [r2, r3]
 8000968:	469f      	mov	pc, r3
 800096a:	0039      	movs	r1, r7
 800096c:	4644      	mov	r4, r8
 800096e:	46e2      	mov	sl, ip
 8000970:	4653      	mov	r3, sl
 8000972:	2b02      	cmp	r3, #2
 8000974:	d00f      	beq.n	8000996 <__aeabi_fmul+0x9e>
 8000976:	2b03      	cmp	r3, #3
 8000978:	d100      	bne.n	800097c <__aeabi_fmul+0x84>
 800097a:	e0d7      	b.n	8000b2c <__aeabi_fmul+0x234>
 800097c:	2b01      	cmp	r3, #1
 800097e:	d137      	bne.n	80009f0 <__aeabi_fmul+0xf8>
 8000980:	2000      	movs	r0, #0
 8000982:	2400      	movs	r4, #0
 8000984:	05c0      	lsls	r0, r0, #23
 8000986:	4320      	orrs	r0, r4
 8000988:	07c9      	lsls	r1, r1, #31
 800098a:	4308      	orrs	r0, r1
 800098c:	bce0      	pop	{r5, r6, r7}
 800098e:	46ba      	mov	sl, r7
 8000990:	46b1      	mov	r9, r6
 8000992:	46a8      	mov	r8, r5
 8000994:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000996:	20ff      	movs	r0, #255	; 0xff
 8000998:	2400      	movs	r4, #0
 800099a:	e7f3      	b.n	8000984 <__aeabi_fmul+0x8c>
 800099c:	0c26      	lsrs	r6, r4, #16
 800099e:	0424      	lsls	r4, r4, #16
 80009a0:	0c22      	lsrs	r2, r4, #16
 80009a2:	4644      	mov	r4, r8
 80009a4:	0424      	lsls	r4, r4, #16
 80009a6:	0c24      	lsrs	r4, r4, #16
 80009a8:	4643      	mov	r3, r8
 80009aa:	0027      	movs	r7, r4
 80009ac:	0c1b      	lsrs	r3, r3, #16
 80009ae:	4357      	muls	r7, r2
 80009b0:	4374      	muls	r4, r6
 80009b2:	435a      	muls	r2, r3
 80009b4:	435e      	muls	r6, r3
 80009b6:	1912      	adds	r2, r2, r4
 80009b8:	0c3b      	lsrs	r3, r7, #16
 80009ba:	189b      	adds	r3, r3, r2
 80009bc:	429c      	cmp	r4, r3
 80009be:	d903      	bls.n	80009c8 <__aeabi_fmul+0xd0>
 80009c0:	2280      	movs	r2, #128	; 0x80
 80009c2:	0252      	lsls	r2, r2, #9
 80009c4:	4694      	mov	ip, r2
 80009c6:	4466      	add	r6, ip
 80009c8:	043f      	lsls	r7, r7, #16
 80009ca:	041a      	lsls	r2, r3, #16
 80009cc:	0c3f      	lsrs	r7, r7, #16
 80009ce:	19d2      	adds	r2, r2, r7
 80009d0:	0194      	lsls	r4, r2, #6
 80009d2:	1e67      	subs	r7, r4, #1
 80009d4:	41bc      	sbcs	r4, r7
 80009d6:	0c1b      	lsrs	r3, r3, #16
 80009d8:	0e92      	lsrs	r2, r2, #26
 80009da:	199b      	adds	r3, r3, r6
 80009dc:	4314      	orrs	r4, r2
 80009de:	019b      	lsls	r3, r3, #6
 80009e0:	431c      	orrs	r4, r3
 80009e2:	011b      	lsls	r3, r3, #4
 80009e4:	d400      	bmi.n	80009e8 <__aeabi_fmul+0xf0>
 80009e6:	e09b      	b.n	8000b20 <__aeabi_fmul+0x228>
 80009e8:	2301      	movs	r3, #1
 80009ea:	0862      	lsrs	r2, r4, #1
 80009ec:	401c      	ands	r4, r3
 80009ee:	4314      	orrs	r4, r2
 80009f0:	0002      	movs	r2, r0
 80009f2:	327f      	adds	r2, #127	; 0x7f
 80009f4:	2a00      	cmp	r2, #0
 80009f6:	dd64      	ble.n	8000ac2 <__aeabi_fmul+0x1ca>
 80009f8:	0763      	lsls	r3, r4, #29
 80009fa:	d004      	beq.n	8000a06 <__aeabi_fmul+0x10e>
 80009fc:	230f      	movs	r3, #15
 80009fe:	4023      	ands	r3, r4
 8000a00:	2b04      	cmp	r3, #4
 8000a02:	d000      	beq.n	8000a06 <__aeabi_fmul+0x10e>
 8000a04:	3404      	adds	r4, #4
 8000a06:	0123      	lsls	r3, r4, #4
 8000a08:	d503      	bpl.n	8000a12 <__aeabi_fmul+0x11a>
 8000a0a:	0002      	movs	r2, r0
 8000a0c:	4b4c      	ldr	r3, [pc, #304]	; (8000b40 <__aeabi_fmul+0x248>)
 8000a0e:	3280      	adds	r2, #128	; 0x80
 8000a10:	401c      	ands	r4, r3
 8000a12:	2afe      	cmp	r2, #254	; 0xfe
 8000a14:	dcbf      	bgt.n	8000996 <__aeabi_fmul+0x9e>
 8000a16:	01a4      	lsls	r4, r4, #6
 8000a18:	0a64      	lsrs	r4, r4, #9
 8000a1a:	b2d0      	uxtb	r0, r2
 8000a1c:	e7b2      	b.n	8000984 <__aeabi_fmul+0x8c>
 8000a1e:	4643      	mov	r3, r8
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d13d      	bne.n	8000aa0 <__aeabi_fmul+0x1a8>
 8000a24:	464a      	mov	r2, r9
 8000a26:	3301      	adds	r3, #1
 8000a28:	431a      	orrs	r2, r3
 8000a2a:	4691      	mov	r9, r2
 8000a2c:	469c      	mov	ip, r3
 8000a2e:	e792      	b.n	8000956 <__aeabi_fmul+0x5e>
 8000a30:	2c00      	cmp	r4, #0
 8000a32:	d129      	bne.n	8000a88 <__aeabi_fmul+0x190>
 8000a34:	2304      	movs	r3, #4
 8000a36:	4699      	mov	r9, r3
 8000a38:	3b03      	subs	r3, #3
 8000a3a:	2500      	movs	r5, #0
 8000a3c:	469a      	mov	sl, r3
 8000a3e:	e774      	b.n	800092a <__aeabi_fmul+0x32>
 8000a40:	2c00      	cmp	r4, #0
 8000a42:	d11b      	bne.n	8000a7c <__aeabi_fmul+0x184>
 8000a44:	2308      	movs	r3, #8
 8000a46:	4699      	mov	r9, r3
 8000a48:	3b06      	subs	r3, #6
 8000a4a:	25ff      	movs	r5, #255	; 0xff
 8000a4c:	469a      	mov	sl, r3
 8000a4e:	e76c      	b.n	800092a <__aeabi_fmul+0x32>
 8000a50:	4643      	mov	r3, r8
 8000a52:	35ff      	adds	r5, #255	; 0xff
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d10b      	bne.n	8000a70 <__aeabi_fmul+0x178>
 8000a58:	2302      	movs	r3, #2
 8000a5a:	464a      	mov	r2, r9
 8000a5c:	431a      	orrs	r2, r3
 8000a5e:	4691      	mov	r9, r2
 8000a60:	469c      	mov	ip, r3
 8000a62:	e778      	b.n	8000956 <__aeabi_fmul+0x5e>
 8000a64:	4653      	mov	r3, sl
 8000a66:	0031      	movs	r1, r6
 8000a68:	2b02      	cmp	r3, #2
 8000a6a:	d000      	beq.n	8000a6e <__aeabi_fmul+0x176>
 8000a6c:	e783      	b.n	8000976 <__aeabi_fmul+0x7e>
 8000a6e:	e792      	b.n	8000996 <__aeabi_fmul+0x9e>
 8000a70:	2303      	movs	r3, #3
 8000a72:	464a      	mov	r2, r9
 8000a74:	431a      	orrs	r2, r3
 8000a76:	4691      	mov	r9, r2
 8000a78:	469c      	mov	ip, r3
 8000a7a:	e76c      	b.n	8000956 <__aeabi_fmul+0x5e>
 8000a7c:	230c      	movs	r3, #12
 8000a7e:	4699      	mov	r9, r3
 8000a80:	3b09      	subs	r3, #9
 8000a82:	25ff      	movs	r5, #255	; 0xff
 8000a84:	469a      	mov	sl, r3
 8000a86:	e750      	b.n	800092a <__aeabi_fmul+0x32>
 8000a88:	0020      	movs	r0, r4
 8000a8a:	f000 fc05 	bl	8001298 <__clzsi2>
 8000a8e:	2576      	movs	r5, #118	; 0x76
 8000a90:	1f43      	subs	r3, r0, #5
 8000a92:	409c      	lsls	r4, r3
 8000a94:	2300      	movs	r3, #0
 8000a96:	426d      	negs	r5, r5
 8000a98:	4699      	mov	r9, r3
 8000a9a:	469a      	mov	sl, r3
 8000a9c:	1a2d      	subs	r5, r5, r0
 8000a9e:	e744      	b.n	800092a <__aeabi_fmul+0x32>
 8000aa0:	4640      	mov	r0, r8
 8000aa2:	f000 fbf9 	bl	8001298 <__clzsi2>
 8000aa6:	4642      	mov	r2, r8
 8000aa8:	1f43      	subs	r3, r0, #5
 8000aaa:	409a      	lsls	r2, r3
 8000aac:	2300      	movs	r3, #0
 8000aae:	1a2d      	subs	r5, r5, r0
 8000ab0:	4690      	mov	r8, r2
 8000ab2:	469c      	mov	ip, r3
 8000ab4:	3d76      	subs	r5, #118	; 0x76
 8000ab6:	e74e      	b.n	8000956 <__aeabi_fmul+0x5e>
 8000ab8:	2480      	movs	r4, #128	; 0x80
 8000aba:	2100      	movs	r1, #0
 8000abc:	20ff      	movs	r0, #255	; 0xff
 8000abe:	03e4      	lsls	r4, r4, #15
 8000ac0:	e760      	b.n	8000984 <__aeabi_fmul+0x8c>
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	1a9b      	subs	r3, r3, r2
 8000ac6:	2b1b      	cmp	r3, #27
 8000ac8:	dd00      	ble.n	8000acc <__aeabi_fmul+0x1d4>
 8000aca:	e759      	b.n	8000980 <__aeabi_fmul+0x88>
 8000acc:	0022      	movs	r2, r4
 8000ace:	309e      	adds	r0, #158	; 0x9e
 8000ad0:	40da      	lsrs	r2, r3
 8000ad2:	4084      	lsls	r4, r0
 8000ad4:	0013      	movs	r3, r2
 8000ad6:	1e62      	subs	r2, r4, #1
 8000ad8:	4194      	sbcs	r4, r2
 8000ada:	431c      	orrs	r4, r3
 8000adc:	0763      	lsls	r3, r4, #29
 8000ade:	d004      	beq.n	8000aea <__aeabi_fmul+0x1f2>
 8000ae0:	230f      	movs	r3, #15
 8000ae2:	4023      	ands	r3, r4
 8000ae4:	2b04      	cmp	r3, #4
 8000ae6:	d000      	beq.n	8000aea <__aeabi_fmul+0x1f2>
 8000ae8:	3404      	adds	r4, #4
 8000aea:	0163      	lsls	r3, r4, #5
 8000aec:	d51a      	bpl.n	8000b24 <__aeabi_fmul+0x22c>
 8000aee:	2001      	movs	r0, #1
 8000af0:	2400      	movs	r4, #0
 8000af2:	e747      	b.n	8000984 <__aeabi_fmul+0x8c>
 8000af4:	2080      	movs	r0, #128	; 0x80
 8000af6:	03c0      	lsls	r0, r0, #15
 8000af8:	4204      	tst	r4, r0
 8000afa:	d009      	beq.n	8000b10 <__aeabi_fmul+0x218>
 8000afc:	4643      	mov	r3, r8
 8000afe:	4203      	tst	r3, r0
 8000b00:	d106      	bne.n	8000b10 <__aeabi_fmul+0x218>
 8000b02:	4644      	mov	r4, r8
 8000b04:	4304      	orrs	r4, r0
 8000b06:	0264      	lsls	r4, r4, #9
 8000b08:	0039      	movs	r1, r7
 8000b0a:	20ff      	movs	r0, #255	; 0xff
 8000b0c:	0a64      	lsrs	r4, r4, #9
 8000b0e:	e739      	b.n	8000984 <__aeabi_fmul+0x8c>
 8000b10:	2080      	movs	r0, #128	; 0x80
 8000b12:	03c0      	lsls	r0, r0, #15
 8000b14:	4304      	orrs	r4, r0
 8000b16:	0264      	lsls	r4, r4, #9
 8000b18:	0031      	movs	r1, r6
 8000b1a:	20ff      	movs	r0, #255	; 0xff
 8000b1c:	0a64      	lsrs	r4, r4, #9
 8000b1e:	e731      	b.n	8000984 <__aeabi_fmul+0x8c>
 8000b20:	0028      	movs	r0, r5
 8000b22:	e765      	b.n	80009f0 <__aeabi_fmul+0xf8>
 8000b24:	01a4      	lsls	r4, r4, #6
 8000b26:	2000      	movs	r0, #0
 8000b28:	0a64      	lsrs	r4, r4, #9
 8000b2a:	e72b      	b.n	8000984 <__aeabi_fmul+0x8c>
 8000b2c:	2080      	movs	r0, #128	; 0x80
 8000b2e:	03c0      	lsls	r0, r0, #15
 8000b30:	4304      	orrs	r4, r0
 8000b32:	0264      	lsls	r4, r4, #9
 8000b34:	20ff      	movs	r0, #255	; 0xff
 8000b36:	0a64      	lsrs	r4, r4, #9
 8000b38:	e724      	b.n	8000984 <__aeabi_fmul+0x8c>
 8000b3a:	46c0      	nop			; (mov r8, r8)
 8000b3c:	08002818 	.word	0x08002818
 8000b40:	f7ffffff 	.word	0xf7ffffff

08000b44 <__aeabi_fsub>:
 8000b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b46:	46ce      	mov	lr, r9
 8000b48:	4647      	mov	r7, r8
 8000b4a:	0243      	lsls	r3, r0, #9
 8000b4c:	0a5b      	lsrs	r3, r3, #9
 8000b4e:	024e      	lsls	r6, r1, #9
 8000b50:	00da      	lsls	r2, r3, #3
 8000b52:	4694      	mov	ip, r2
 8000b54:	0a72      	lsrs	r2, r6, #9
 8000b56:	4691      	mov	r9, r2
 8000b58:	0045      	lsls	r5, r0, #1
 8000b5a:	004a      	lsls	r2, r1, #1
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	0e2d      	lsrs	r5, r5, #24
 8000b60:	001f      	movs	r7, r3
 8000b62:	0fc4      	lsrs	r4, r0, #31
 8000b64:	0e12      	lsrs	r2, r2, #24
 8000b66:	0fc9      	lsrs	r1, r1, #31
 8000b68:	09b6      	lsrs	r6, r6, #6
 8000b6a:	2aff      	cmp	r2, #255	; 0xff
 8000b6c:	d05b      	beq.n	8000c26 <__aeabi_fsub+0xe2>
 8000b6e:	2001      	movs	r0, #1
 8000b70:	4041      	eors	r1, r0
 8000b72:	428c      	cmp	r4, r1
 8000b74:	d039      	beq.n	8000bea <__aeabi_fsub+0xa6>
 8000b76:	1aa8      	subs	r0, r5, r2
 8000b78:	2800      	cmp	r0, #0
 8000b7a:	dd5a      	ble.n	8000c32 <__aeabi_fsub+0xee>
 8000b7c:	2a00      	cmp	r2, #0
 8000b7e:	d06a      	beq.n	8000c56 <__aeabi_fsub+0x112>
 8000b80:	2dff      	cmp	r5, #255	; 0xff
 8000b82:	d100      	bne.n	8000b86 <__aeabi_fsub+0x42>
 8000b84:	e0d9      	b.n	8000d3a <__aeabi_fsub+0x1f6>
 8000b86:	2280      	movs	r2, #128	; 0x80
 8000b88:	04d2      	lsls	r2, r2, #19
 8000b8a:	4316      	orrs	r6, r2
 8000b8c:	281b      	cmp	r0, #27
 8000b8e:	dc00      	bgt.n	8000b92 <__aeabi_fsub+0x4e>
 8000b90:	e0e9      	b.n	8000d66 <__aeabi_fsub+0x222>
 8000b92:	2001      	movs	r0, #1
 8000b94:	4663      	mov	r3, ip
 8000b96:	1a18      	subs	r0, r3, r0
 8000b98:	0143      	lsls	r3, r0, #5
 8000b9a:	d400      	bmi.n	8000b9e <__aeabi_fsub+0x5a>
 8000b9c:	e0b4      	b.n	8000d08 <__aeabi_fsub+0x1c4>
 8000b9e:	0180      	lsls	r0, r0, #6
 8000ba0:	0987      	lsrs	r7, r0, #6
 8000ba2:	0038      	movs	r0, r7
 8000ba4:	f000 fb78 	bl	8001298 <__clzsi2>
 8000ba8:	3805      	subs	r0, #5
 8000baa:	4087      	lsls	r7, r0
 8000bac:	4285      	cmp	r5, r0
 8000bae:	dc00      	bgt.n	8000bb2 <__aeabi_fsub+0x6e>
 8000bb0:	e0cc      	b.n	8000d4c <__aeabi_fsub+0x208>
 8000bb2:	1a2d      	subs	r5, r5, r0
 8000bb4:	48b5      	ldr	r0, [pc, #724]	; (8000e8c <__aeabi_fsub+0x348>)
 8000bb6:	4038      	ands	r0, r7
 8000bb8:	0743      	lsls	r3, r0, #29
 8000bba:	d004      	beq.n	8000bc6 <__aeabi_fsub+0x82>
 8000bbc:	230f      	movs	r3, #15
 8000bbe:	4003      	ands	r3, r0
 8000bc0:	2b04      	cmp	r3, #4
 8000bc2:	d000      	beq.n	8000bc6 <__aeabi_fsub+0x82>
 8000bc4:	3004      	adds	r0, #4
 8000bc6:	0143      	lsls	r3, r0, #5
 8000bc8:	d400      	bmi.n	8000bcc <__aeabi_fsub+0x88>
 8000bca:	e0a0      	b.n	8000d0e <__aeabi_fsub+0x1ca>
 8000bcc:	1c6a      	adds	r2, r5, #1
 8000bce:	2dfe      	cmp	r5, #254	; 0xfe
 8000bd0:	d100      	bne.n	8000bd4 <__aeabi_fsub+0x90>
 8000bd2:	e08d      	b.n	8000cf0 <__aeabi_fsub+0x1ac>
 8000bd4:	0180      	lsls	r0, r0, #6
 8000bd6:	0a47      	lsrs	r7, r0, #9
 8000bd8:	b2d2      	uxtb	r2, r2
 8000bda:	05d0      	lsls	r0, r2, #23
 8000bdc:	4338      	orrs	r0, r7
 8000bde:	07e4      	lsls	r4, r4, #31
 8000be0:	4320      	orrs	r0, r4
 8000be2:	bcc0      	pop	{r6, r7}
 8000be4:	46b9      	mov	r9, r7
 8000be6:	46b0      	mov	r8, r6
 8000be8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000bea:	1aa8      	subs	r0, r5, r2
 8000bec:	4680      	mov	r8, r0
 8000bee:	2800      	cmp	r0, #0
 8000bf0:	dd45      	ble.n	8000c7e <__aeabi_fsub+0x13a>
 8000bf2:	2a00      	cmp	r2, #0
 8000bf4:	d070      	beq.n	8000cd8 <__aeabi_fsub+0x194>
 8000bf6:	2dff      	cmp	r5, #255	; 0xff
 8000bf8:	d100      	bne.n	8000bfc <__aeabi_fsub+0xb8>
 8000bfa:	e09e      	b.n	8000d3a <__aeabi_fsub+0x1f6>
 8000bfc:	2380      	movs	r3, #128	; 0x80
 8000bfe:	04db      	lsls	r3, r3, #19
 8000c00:	431e      	orrs	r6, r3
 8000c02:	4643      	mov	r3, r8
 8000c04:	2b1b      	cmp	r3, #27
 8000c06:	dc00      	bgt.n	8000c0a <__aeabi_fsub+0xc6>
 8000c08:	e0d2      	b.n	8000db0 <__aeabi_fsub+0x26c>
 8000c0a:	2001      	movs	r0, #1
 8000c0c:	4460      	add	r0, ip
 8000c0e:	0143      	lsls	r3, r0, #5
 8000c10:	d57a      	bpl.n	8000d08 <__aeabi_fsub+0x1c4>
 8000c12:	3501      	adds	r5, #1
 8000c14:	2dff      	cmp	r5, #255	; 0xff
 8000c16:	d06b      	beq.n	8000cf0 <__aeabi_fsub+0x1ac>
 8000c18:	2301      	movs	r3, #1
 8000c1a:	4a9d      	ldr	r2, [pc, #628]	; (8000e90 <__aeabi_fsub+0x34c>)
 8000c1c:	4003      	ands	r3, r0
 8000c1e:	0840      	lsrs	r0, r0, #1
 8000c20:	4010      	ands	r0, r2
 8000c22:	4318      	orrs	r0, r3
 8000c24:	e7c8      	b.n	8000bb8 <__aeabi_fsub+0x74>
 8000c26:	2e00      	cmp	r6, #0
 8000c28:	d020      	beq.n	8000c6c <__aeabi_fsub+0x128>
 8000c2a:	428c      	cmp	r4, r1
 8000c2c:	d023      	beq.n	8000c76 <__aeabi_fsub+0x132>
 8000c2e:	0028      	movs	r0, r5
 8000c30:	38ff      	subs	r0, #255	; 0xff
 8000c32:	2800      	cmp	r0, #0
 8000c34:	d039      	beq.n	8000caa <__aeabi_fsub+0x166>
 8000c36:	1b57      	subs	r7, r2, r5
 8000c38:	2d00      	cmp	r5, #0
 8000c3a:	d000      	beq.n	8000c3e <__aeabi_fsub+0xfa>
 8000c3c:	e09d      	b.n	8000d7a <__aeabi_fsub+0x236>
 8000c3e:	4663      	mov	r3, ip
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d100      	bne.n	8000c46 <__aeabi_fsub+0x102>
 8000c44:	e0db      	b.n	8000dfe <__aeabi_fsub+0x2ba>
 8000c46:	1e7b      	subs	r3, r7, #1
 8000c48:	2f01      	cmp	r7, #1
 8000c4a:	d100      	bne.n	8000c4e <__aeabi_fsub+0x10a>
 8000c4c:	e10d      	b.n	8000e6a <__aeabi_fsub+0x326>
 8000c4e:	2fff      	cmp	r7, #255	; 0xff
 8000c50:	d071      	beq.n	8000d36 <__aeabi_fsub+0x1f2>
 8000c52:	001f      	movs	r7, r3
 8000c54:	e098      	b.n	8000d88 <__aeabi_fsub+0x244>
 8000c56:	2e00      	cmp	r6, #0
 8000c58:	d100      	bne.n	8000c5c <__aeabi_fsub+0x118>
 8000c5a:	e0a7      	b.n	8000dac <__aeabi_fsub+0x268>
 8000c5c:	1e42      	subs	r2, r0, #1
 8000c5e:	2801      	cmp	r0, #1
 8000c60:	d100      	bne.n	8000c64 <__aeabi_fsub+0x120>
 8000c62:	e0e6      	b.n	8000e32 <__aeabi_fsub+0x2ee>
 8000c64:	28ff      	cmp	r0, #255	; 0xff
 8000c66:	d068      	beq.n	8000d3a <__aeabi_fsub+0x1f6>
 8000c68:	0010      	movs	r0, r2
 8000c6a:	e78f      	b.n	8000b8c <__aeabi_fsub+0x48>
 8000c6c:	2001      	movs	r0, #1
 8000c6e:	4041      	eors	r1, r0
 8000c70:	42a1      	cmp	r1, r4
 8000c72:	d000      	beq.n	8000c76 <__aeabi_fsub+0x132>
 8000c74:	e77f      	b.n	8000b76 <__aeabi_fsub+0x32>
 8000c76:	20ff      	movs	r0, #255	; 0xff
 8000c78:	4240      	negs	r0, r0
 8000c7a:	4680      	mov	r8, r0
 8000c7c:	44a8      	add	r8, r5
 8000c7e:	4640      	mov	r0, r8
 8000c80:	2800      	cmp	r0, #0
 8000c82:	d038      	beq.n	8000cf6 <__aeabi_fsub+0x1b2>
 8000c84:	1b51      	subs	r1, r2, r5
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	d100      	bne.n	8000c8c <__aeabi_fsub+0x148>
 8000c8a:	e0ae      	b.n	8000dea <__aeabi_fsub+0x2a6>
 8000c8c:	2aff      	cmp	r2, #255	; 0xff
 8000c8e:	d100      	bne.n	8000c92 <__aeabi_fsub+0x14e>
 8000c90:	e0df      	b.n	8000e52 <__aeabi_fsub+0x30e>
 8000c92:	2380      	movs	r3, #128	; 0x80
 8000c94:	4660      	mov	r0, ip
 8000c96:	04db      	lsls	r3, r3, #19
 8000c98:	4318      	orrs	r0, r3
 8000c9a:	4684      	mov	ip, r0
 8000c9c:	291b      	cmp	r1, #27
 8000c9e:	dc00      	bgt.n	8000ca2 <__aeabi_fsub+0x15e>
 8000ca0:	e0d9      	b.n	8000e56 <__aeabi_fsub+0x312>
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	0015      	movs	r5, r2
 8000ca6:	1980      	adds	r0, r0, r6
 8000ca8:	e7b1      	b.n	8000c0e <__aeabi_fsub+0xca>
 8000caa:	20fe      	movs	r0, #254	; 0xfe
 8000cac:	1c6a      	adds	r2, r5, #1
 8000cae:	4210      	tst	r0, r2
 8000cb0:	d171      	bne.n	8000d96 <__aeabi_fsub+0x252>
 8000cb2:	2d00      	cmp	r5, #0
 8000cb4:	d000      	beq.n	8000cb8 <__aeabi_fsub+0x174>
 8000cb6:	e0a6      	b.n	8000e06 <__aeabi_fsub+0x2c2>
 8000cb8:	4663      	mov	r3, ip
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d100      	bne.n	8000cc0 <__aeabi_fsub+0x17c>
 8000cbe:	e0d9      	b.n	8000e74 <__aeabi_fsub+0x330>
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	d100      	bne.n	8000cc8 <__aeabi_fsub+0x184>
 8000cc6:	e788      	b.n	8000bda <__aeabi_fsub+0x96>
 8000cc8:	1b98      	subs	r0, r3, r6
 8000cca:	0143      	lsls	r3, r0, #5
 8000ccc:	d400      	bmi.n	8000cd0 <__aeabi_fsub+0x18c>
 8000cce:	e0e1      	b.n	8000e94 <__aeabi_fsub+0x350>
 8000cd0:	4663      	mov	r3, ip
 8000cd2:	000c      	movs	r4, r1
 8000cd4:	1af0      	subs	r0, r6, r3
 8000cd6:	e76f      	b.n	8000bb8 <__aeabi_fsub+0x74>
 8000cd8:	2e00      	cmp	r6, #0
 8000cda:	d100      	bne.n	8000cde <__aeabi_fsub+0x19a>
 8000cdc:	e0b7      	b.n	8000e4e <__aeabi_fsub+0x30a>
 8000cde:	0002      	movs	r2, r0
 8000ce0:	3a01      	subs	r2, #1
 8000ce2:	2801      	cmp	r0, #1
 8000ce4:	d100      	bne.n	8000ce8 <__aeabi_fsub+0x1a4>
 8000ce6:	e09c      	b.n	8000e22 <__aeabi_fsub+0x2de>
 8000ce8:	28ff      	cmp	r0, #255	; 0xff
 8000cea:	d026      	beq.n	8000d3a <__aeabi_fsub+0x1f6>
 8000cec:	4690      	mov	r8, r2
 8000cee:	e788      	b.n	8000c02 <__aeabi_fsub+0xbe>
 8000cf0:	22ff      	movs	r2, #255	; 0xff
 8000cf2:	2700      	movs	r7, #0
 8000cf4:	e771      	b.n	8000bda <__aeabi_fsub+0x96>
 8000cf6:	20fe      	movs	r0, #254	; 0xfe
 8000cf8:	1c6a      	adds	r2, r5, #1
 8000cfa:	4210      	tst	r0, r2
 8000cfc:	d064      	beq.n	8000dc8 <__aeabi_fsub+0x284>
 8000cfe:	2aff      	cmp	r2, #255	; 0xff
 8000d00:	d0f6      	beq.n	8000cf0 <__aeabi_fsub+0x1ac>
 8000d02:	0015      	movs	r5, r2
 8000d04:	4466      	add	r6, ip
 8000d06:	0870      	lsrs	r0, r6, #1
 8000d08:	0743      	lsls	r3, r0, #29
 8000d0a:	d000      	beq.n	8000d0e <__aeabi_fsub+0x1ca>
 8000d0c:	e756      	b.n	8000bbc <__aeabi_fsub+0x78>
 8000d0e:	08c3      	lsrs	r3, r0, #3
 8000d10:	2dff      	cmp	r5, #255	; 0xff
 8000d12:	d012      	beq.n	8000d3a <__aeabi_fsub+0x1f6>
 8000d14:	025b      	lsls	r3, r3, #9
 8000d16:	0a5f      	lsrs	r7, r3, #9
 8000d18:	b2ea      	uxtb	r2, r5
 8000d1a:	e75e      	b.n	8000bda <__aeabi_fsub+0x96>
 8000d1c:	4662      	mov	r2, ip
 8000d1e:	2a00      	cmp	r2, #0
 8000d20:	d100      	bne.n	8000d24 <__aeabi_fsub+0x1e0>
 8000d22:	e096      	b.n	8000e52 <__aeabi_fsub+0x30e>
 8000d24:	2e00      	cmp	r6, #0
 8000d26:	d008      	beq.n	8000d3a <__aeabi_fsub+0x1f6>
 8000d28:	2280      	movs	r2, #128	; 0x80
 8000d2a:	03d2      	lsls	r2, r2, #15
 8000d2c:	4213      	tst	r3, r2
 8000d2e:	d004      	beq.n	8000d3a <__aeabi_fsub+0x1f6>
 8000d30:	4648      	mov	r0, r9
 8000d32:	4210      	tst	r0, r2
 8000d34:	d101      	bne.n	8000d3a <__aeabi_fsub+0x1f6>
 8000d36:	000c      	movs	r4, r1
 8000d38:	464b      	mov	r3, r9
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d0d8      	beq.n	8000cf0 <__aeabi_fsub+0x1ac>
 8000d3e:	2780      	movs	r7, #128	; 0x80
 8000d40:	03ff      	lsls	r7, r7, #15
 8000d42:	431f      	orrs	r7, r3
 8000d44:	027f      	lsls	r7, r7, #9
 8000d46:	22ff      	movs	r2, #255	; 0xff
 8000d48:	0a7f      	lsrs	r7, r7, #9
 8000d4a:	e746      	b.n	8000bda <__aeabi_fsub+0x96>
 8000d4c:	2320      	movs	r3, #32
 8000d4e:	003a      	movs	r2, r7
 8000d50:	1b45      	subs	r5, r0, r5
 8000d52:	0038      	movs	r0, r7
 8000d54:	3501      	adds	r5, #1
 8000d56:	40ea      	lsrs	r2, r5
 8000d58:	1b5d      	subs	r5, r3, r5
 8000d5a:	40a8      	lsls	r0, r5
 8000d5c:	1e43      	subs	r3, r0, #1
 8000d5e:	4198      	sbcs	r0, r3
 8000d60:	2500      	movs	r5, #0
 8000d62:	4310      	orrs	r0, r2
 8000d64:	e728      	b.n	8000bb8 <__aeabi_fsub+0x74>
 8000d66:	2320      	movs	r3, #32
 8000d68:	1a1b      	subs	r3, r3, r0
 8000d6a:	0032      	movs	r2, r6
 8000d6c:	409e      	lsls	r6, r3
 8000d6e:	40c2      	lsrs	r2, r0
 8000d70:	0030      	movs	r0, r6
 8000d72:	1e43      	subs	r3, r0, #1
 8000d74:	4198      	sbcs	r0, r3
 8000d76:	4310      	orrs	r0, r2
 8000d78:	e70c      	b.n	8000b94 <__aeabi_fsub+0x50>
 8000d7a:	2aff      	cmp	r2, #255	; 0xff
 8000d7c:	d0db      	beq.n	8000d36 <__aeabi_fsub+0x1f2>
 8000d7e:	2380      	movs	r3, #128	; 0x80
 8000d80:	4660      	mov	r0, ip
 8000d82:	04db      	lsls	r3, r3, #19
 8000d84:	4318      	orrs	r0, r3
 8000d86:	4684      	mov	ip, r0
 8000d88:	2f1b      	cmp	r7, #27
 8000d8a:	dd56      	ble.n	8000e3a <__aeabi_fsub+0x2f6>
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	000c      	movs	r4, r1
 8000d90:	0015      	movs	r5, r2
 8000d92:	1a30      	subs	r0, r6, r0
 8000d94:	e700      	b.n	8000b98 <__aeabi_fsub+0x54>
 8000d96:	4663      	mov	r3, ip
 8000d98:	1b9f      	subs	r7, r3, r6
 8000d9a:	017b      	lsls	r3, r7, #5
 8000d9c:	d43d      	bmi.n	8000e1a <__aeabi_fsub+0x2d6>
 8000d9e:	2f00      	cmp	r7, #0
 8000da0:	d000      	beq.n	8000da4 <__aeabi_fsub+0x260>
 8000da2:	e6fe      	b.n	8000ba2 <__aeabi_fsub+0x5e>
 8000da4:	2400      	movs	r4, #0
 8000da6:	2200      	movs	r2, #0
 8000da8:	2700      	movs	r7, #0
 8000daa:	e716      	b.n	8000bda <__aeabi_fsub+0x96>
 8000dac:	0005      	movs	r5, r0
 8000dae:	e7af      	b.n	8000d10 <__aeabi_fsub+0x1cc>
 8000db0:	0032      	movs	r2, r6
 8000db2:	4643      	mov	r3, r8
 8000db4:	4641      	mov	r1, r8
 8000db6:	40da      	lsrs	r2, r3
 8000db8:	2320      	movs	r3, #32
 8000dba:	1a5b      	subs	r3, r3, r1
 8000dbc:	409e      	lsls	r6, r3
 8000dbe:	0030      	movs	r0, r6
 8000dc0:	1e43      	subs	r3, r0, #1
 8000dc2:	4198      	sbcs	r0, r3
 8000dc4:	4310      	orrs	r0, r2
 8000dc6:	e721      	b.n	8000c0c <__aeabi_fsub+0xc8>
 8000dc8:	2d00      	cmp	r5, #0
 8000dca:	d1a7      	bne.n	8000d1c <__aeabi_fsub+0x1d8>
 8000dcc:	4663      	mov	r3, ip
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d059      	beq.n	8000e86 <__aeabi_fsub+0x342>
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2e00      	cmp	r6, #0
 8000dd6:	d100      	bne.n	8000dda <__aeabi_fsub+0x296>
 8000dd8:	e6ff      	b.n	8000bda <__aeabi_fsub+0x96>
 8000dda:	0030      	movs	r0, r6
 8000ddc:	4460      	add	r0, ip
 8000dde:	0143      	lsls	r3, r0, #5
 8000de0:	d592      	bpl.n	8000d08 <__aeabi_fsub+0x1c4>
 8000de2:	4b2a      	ldr	r3, [pc, #168]	; (8000e8c <__aeabi_fsub+0x348>)
 8000de4:	3501      	adds	r5, #1
 8000de6:	4018      	ands	r0, r3
 8000de8:	e78e      	b.n	8000d08 <__aeabi_fsub+0x1c4>
 8000dea:	4663      	mov	r3, ip
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d047      	beq.n	8000e80 <__aeabi_fsub+0x33c>
 8000df0:	1e4b      	subs	r3, r1, #1
 8000df2:	2901      	cmp	r1, #1
 8000df4:	d015      	beq.n	8000e22 <__aeabi_fsub+0x2de>
 8000df6:	29ff      	cmp	r1, #255	; 0xff
 8000df8:	d02b      	beq.n	8000e52 <__aeabi_fsub+0x30e>
 8000dfa:	0019      	movs	r1, r3
 8000dfc:	e74e      	b.n	8000c9c <__aeabi_fsub+0x158>
 8000dfe:	000c      	movs	r4, r1
 8000e00:	464b      	mov	r3, r9
 8000e02:	003d      	movs	r5, r7
 8000e04:	e784      	b.n	8000d10 <__aeabi_fsub+0x1cc>
 8000e06:	4662      	mov	r2, ip
 8000e08:	2a00      	cmp	r2, #0
 8000e0a:	d18b      	bne.n	8000d24 <__aeabi_fsub+0x1e0>
 8000e0c:	2e00      	cmp	r6, #0
 8000e0e:	d192      	bne.n	8000d36 <__aeabi_fsub+0x1f2>
 8000e10:	2780      	movs	r7, #128	; 0x80
 8000e12:	2400      	movs	r4, #0
 8000e14:	22ff      	movs	r2, #255	; 0xff
 8000e16:	03ff      	lsls	r7, r7, #15
 8000e18:	e6df      	b.n	8000bda <__aeabi_fsub+0x96>
 8000e1a:	4663      	mov	r3, ip
 8000e1c:	000c      	movs	r4, r1
 8000e1e:	1af7      	subs	r7, r6, r3
 8000e20:	e6bf      	b.n	8000ba2 <__aeabi_fsub+0x5e>
 8000e22:	0030      	movs	r0, r6
 8000e24:	4460      	add	r0, ip
 8000e26:	2501      	movs	r5, #1
 8000e28:	0143      	lsls	r3, r0, #5
 8000e2a:	d400      	bmi.n	8000e2e <__aeabi_fsub+0x2ea>
 8000e2c:	e76c      	b.n	8000d08 <__aeabi_fsub+0x1c4>
 8000e2e:	2502      	movs	r5, #2
 8000e30:	e6f2      	b.n	8000c18 <__aeabi_fsub+0xd4>
 8000e32:	4663      	mov	r3, ip
 8000e34:	2501      	movs	r5, #1
 8000e36:	1b98      	subs	r0, r3, r6
 8000e38:	e6ae      	b.n	8000b98 <__aeabi_fsub+0x54>
 8000e3a:	2320      	movs	r3, #32
 8000e3c:	4664      	mov	r4, ip
 8000e3e:	4660      	mov	r0, ip
 8000e40:	40fc      	lsrs	r4, r7
 8000e42:	1bdf      	subs	r7, r3, r7
 8000e44:	40b8      	lsls	r0, r7
 8000e46:	1e43      	subs	r3, r0, #1
 8000e48:	4198      	sbcs	r0, r3
 8000e4a:	4320      	orrs	r0, r4
 8000e4c:	e79f      	b.n	8000d8e <__aeabi_fsub+0x24a>
 8000e4e:	0005      	movs	r5, r0
 8000e50:	e75e      	b.n	8000d10 <__aeabi_fsub+0x1cc>
 8000e52:	464b      	mov	r3, r9
 8000e54:	e771      	b.n	8000d3a <__aeabi_fsub+0x1f6>
 8000e56:	2320      	movs	r3, #32
 8000e58:	4665      	mov	r5, ip
 8000e5a:	4660      	mov	r0, ip
 8000e5c:	40cd      	lsrs	r5, r1
 8000e5e:	1a59      	subs	r1, r3, r1
 8000e60:	4088      	lsls	r0, r1
 8000e62:	1e43      	subs	r3, r0, #1
 8000e64:	4198      	sbcs	r0, r3
 8000e66:	4328      	orrs	r0, r5
 8000e68:	e71c      	b.n	8000ca4 <__aeabi_fsub+0x160>
 8000e6a:	4663      	mov	r3, ip
 8000e6c:	000c      	movs	r4, r1
 8000e6e:	2501      	movs	r5, #1
 8000e70:	1af0      	subs	r0, r6, r3
 8000e72:	e691      	b.n	8000b98 <__aeabi_fsub+0x54>
 8000e74:	2e00      	cmp	r6, #0
 8000e76:	d095      	beq.n	8000da4 <__aeabi_fsub+0x260>
 8000e78:	000c      	movs	r4, r1
 8000e7a:	464f      	mov	r7, r9
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	e6ac      	b.n	8000bda <__aeabi_fsub+0x96>
 8000e80:	464b      	mov	r3, r9
 8000e82:	000d      	movs	r5, r1
 8000e84:	e744      	b.n	8000d10 <__aeabi_fsub+0x1cc>
 8000e86:	464f      	mov	r7, r9
 8000e88:	2200      	movs	r2, #0
 8000e8a:	e6a6      	b.n	8000bda <__aeabi_fsub+0x96>
 8000e8c:	fbffffff 	.word	0xfbffffff
 8000e90:	7dffffff 	.word	0x7dffffff
 8000e94:	2800      	cmp	r0, #0
 8000e96:	d000      	beq.n	8000e9a <__aeabi_fsub+0x356>
 8000e98:	e736      	b.n	8000d08 <__aeabi_fsub+0x1c4>
 8000e9a:	2400      	movs	r4, #0
 8000e9c:	2700      	movs	r7, #0
 8000e9e:	e69c      	b.n	8000bda <__aeabi_fsub+0x96>

08000ea0 <__aeabi_f2iz>:
 8000ea0:	0241      	lsls	r1, r0, #9
 8000ea2:	0042      	lsls	r2, r0, #1
 8000ea4:	0fc3      	lsrs	r3, r0, #31
 8000ea6:	0a49      	lsrs	r1, r1, #9
 8000ea8:	2000      	movs	r0, #0
 8000eaa:	0e12      	lsrs	r2, r2, #24
 8000eac:	2a7e      	cmp	r2, #126	; 0x7e
 8000eae:	dd03      	ble.n	8000eb8 <__aeabi_f2iz+0x18>
 8000eb0:	2a9d      	cmp	r2, #157	; 0x9d
 8000eb2:	dd02      	ble.n	8000eba <__aeabi_f2iz+0x1a>
 8000eb4:	4a09      	ldr	r2, [pc, #36]	; (8000edc <__aeabi_f2iz+0x3c>)
 8000eb6:	1898      	adds	r0, r3, r2
 8000eb8:	4770      	bx	lr
 8000eba:	2080      	movs	r0, #128	; 0x80
 8000ebc:	0400      	lsls	r0, r0, #16
 8000ebe:	4301      	orrs	r1, r0
 8000ec0:	2a95      	cmp	r2, #149	; 0x95
 8000ec2:	dc07      	bgt.n	8000ed4 <__aeabi_f2iz+0x34>
 8000ec4:	2096      	movs	r0, #150	; 0x96
 8000ec6:	1a82      	subs	r2, r0, r2
 8000ec8:	40d1      	lsrs	r1, r2
 8000eca:	4248      	negs	r0, r1
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d1f3      	bne.n	8000eb8 <__aeabi_f2iz+0x18>
 8000ed0:	0008      	movs	r0, r1
 8000ed2:	e7f1      	b.n	8000eb8 <__aeabi_f2iz+0x18>
 8000ed4:	3a96      	subs	r2, #150	; 0x96
 8000ed6:	4091      	lsls	r1, r2
 8000ed8:	e7f7      	b.n	8000eca <__aeabi_f2iz+0x2a>
 8000eda:	46c0      	nop			; (mov r8, r8)
 8000edc:	7fffffff 	.word	0x7fffffff

08000ee0 <__aeabi_i2f>:
 8000ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ee2:	2800      	cmp	r0, #0
 8000ee4:	d013      	beq.n	8000f0e <__aeabi_i2f+0x2e>
 8000ee6:	17c3      	asrs	r3, r0, #31
 8000ee8:	18c6      	adds	r6, r0, r3
 8000eea:	405e      	eors	r6, r3
 8000eec:	0fc4      	lsrs	r4, r0, #31
 8000eee:	0030      	movs	r0, r6
 8000ef0:	f000 f9d2 	bl	8001298 <__clzsi2>
 8000ef4:	239e      	movs	r3, #158	; 0x9e
 8000ef6:	0005      	movs	r5, r0
 8000ef8:	1a1b      	subs	r3, r3, r0
 8000efa:	2b96      	cmp	r3, #150	; 0x96
 8000efc:	dc0f      	bgt.n	8000f1e <__aeabi_i2f+0x3e>
 8000efe:	2808      	cmp	r0, #8
 8000f00:	dd01      	ble.n	8000f06 <__aeabi_i2f+0x26>
 8000f02:	3d08      	subs	r5, #8
 8000f04:	40ae      	lsls	r6, r5
 8000f06:	0276      	lsls	r6, r6, #9
 8000f08:	0a76      	lsrs	r6, r6, #9
 8000f0a:	b2d8      	uxtb	r0, r3
 8000f0c:	e002      	b.n	8000f14 <__aeabi_i2f+0x34>
 8000f0e:	2400      	movs	r4, #0
 8000f10:	2000      	movs	r0, #0
 8000f12:	2600      	movs	r6, #0
 8000f14:	05c0      	lsls	r0, r0, #23
 8000f16:	4330      	orrs	r0, r6
 8000f18:	07e4      	lsls	r4, r4, #31
 8000f1a:	4320      	orrs	r0, r4
 8000f1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f1e:	2b99      	cmp	r3, #153	; 0x99
 8000f20:	dd0c      	ble.n	8000f3c <__aeabi_i2f+0x5c>
 8000f22:	2205      	movs	r2, #5
 8000f24:	0031      	movs	r1, r6
 8000f26:	1a12      	subs	r2, r2, r0
 8000f28:	40d1      	lsrs	r1, r2
 8000f2a:	000a      	movs	r2, r1
 8000f2c:	0001      	movs	r1, r0
 8000f2e:	0030      	movs	r0, r6
 8000f30:	311b      	adds	r1, #27
 8000f32:	4088      	lsls	r0, r1
 8000f34:	1e41      	subs	r1, r0, #1
 8000f36:	4188      	sbcs	r0, r1
 8000f38:	4302      	orrs	r2, r0
 8000f3a:	0016      	movs	r6, r2
 8000f3c:	2d05      	cmp	r5, #5
 8000f3e:	dc12      	bgt.n	8000f66 <__aeabi_i2f+0x86>
 8000f40:	0031      	movs	r1, r6
 8000f42:	4f0d      	ldr	r7, [pc, #52]	; (8000f78 <__aeabi_i2f+0x98>)
 8000f44:	4039      	ands	r1, r7
 8000f46:	0772      	lsls	r2, r6, #29
 8000f48:	d009      	beq.n	8000f5e <__aeabi_i2f+0x7e>
 8000f4a:	200f      	movs	r0, #15
 8000f4c:	4030      	ands	r0, r6
 8000f4e:	2804      	cmp	r0, #4
 8000f50:	d005      	beq.n	8000f5e <__aeabi_i2f+0x7e>
 8000f52:	3104      	adds	r1, #4
 8000f54:	014a      	lsls	r2, r1, #5
 8000f56:	d502      	bpl.n	8000f5e <__aeabi_i2f+0x7e>
 8000f58:	239f      	movs	r3, #159	; 0x9f
 8000f5a:	4039      	ands	r1, r7
 8000f5c:	1b5b      	subs	r3, r3, r5
 8000f5e:	0189      	lsls	r1, r1, #6
 8000f60:	0a4e      	lsrs	r6, r1, #9
 8000f62:	b2d8      	uxtb	r0, r3
 8000f64:	e7d6      	b.n	8000f14 <__aeabi_i2f+0x34>
 8000f66:	1f6a      	subs	r2, r5, #5
 8000f68:	4096      	lsls	r6, r2
 8000f6a:	0031      	movs	r1, r6
 8000f6c:	4f02      	ldr	r7, [pc, #8]	; (8000f78 <__aeabi_i2f+0x98>)
 8000f6e:	4039      	ands	r1, r7
 8000f70:	0772      	lsls	r2, r6, #29
 8000f72:	d0f4      	beq.n	8000f5e <__aeabi_i2f+0x7e>
 8000f74:	e7e9      	b.n	8000f4a <__aeabi_i2f+0x6a>
 8000f76:	46c0      	nop			; (mov r8, r8)
 8000f78:	fbffffff 	.word	0xfbffffff

08000f7c <__eqdf2>:
 8000f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f7e:	464e      	mov	r6, r9
 8000f80:	4645      	mov	r5, r8
 8000f82:	46de      	mov	lr, fp
 8000f84:	4657      	mov	r7, sl
 8000f86:	4690      	mov	r8, r2
 8000f88:	b5e0      	push	{r5, r6, r7, lr}
 8000f8a:	0017      	movs	r7, r2
 8000f8c:	031a      	lsls	r2, r3, #12
 8000f8e:	0b12      	lsrs	r2, r2, #12
 8000f90:	0005      	movs	r5, r0
 8000f92:	4684      	mov	ip, r0
 8000f94:	4819      	ldr	r0, [pc, #100]	; (8000ffc <__eqdf2+0x80>)
 8000f96:	030e      	lsls	r6, r1, #12
 8000f98:	004c      	lsls	r4, r1, #1
 8000f9a:	4691      	mov	r9, r2
 8000f9c:	005a      	lsls	r2, r3, #1
 8000f9e:	0fdb      	lsrs	r3, r3, #31
 8000fa0:	469b      	mov	fp, r3
 8000fa2:	0b36      	lsrs	r6, r6, #12
 8000fa4:	0d64      	lsrs	r4, r4, #21
 8000fa6:	0fc9      	lsrs	r1, r1, #31
 8000fa8:	0d52      	lsrs	r2, r2, #21
 8000faa:	4284      	cmp	r4, r0
 8000fac:	d019      	beq.n	8000fe2 <__eqdf2+0x66>
 8000fae:	4282      	cmp	r2, r0
 8000fb0:	d010      	beq.n	8000fd4 <__eqdf2+0x58>
 8000fb2:	2001      	movs	r0, #1
 8000fb4:	4294      	cmp	r4, r2
 8000fb6:	d10e      	bne.n	8000fd6 <__eqdf2+0x5a>
 8000fb8:	454e      	cmp	r6, r9
 8000fba:	d10c      	bne.n	8000fd6 <__eqdf2+0x5a>
 8000fbc:	2001      	movs	r0, #1
 8000fbe:	45c4      	cmp	ip, r8
 8000fc0:	d109      	bne.n	8000fd6 <__eqdf2+0x5a>
 8000fc2:	4559      	cmp	r1, fp
 8000fc4:	d017      	beq.n	8000ff6 <__eqdf2+0x7a>
 8000fc6:	2c00      	cmp	r4, #0
 8000fc8:	d105      	bne.n	8000fd6 <__eqdf2+0x5a>
 8000fca:	0030      	movs	r0, r6
 8000fcc:	4328      	orrs	r0, r5
 8000fce:	1e43      	subs	r3, r0, #1
 8000fd0:	4198      	sbcs	r0, r3
 8000fd2:	e000      	b.n	8000fd6 <__eqdf2+0x5a>
 8000fd4:	2001      	movs	r0, #1
 8000fd6:	bcf0      	pop	{r4, r5, r6, r7}
 8000fd8:	46bb      	mov	fp, r7
 8000fda:	46b2      	mov	sl, r6
 8000fdc:	46a9      	mov	r9, r5
 8000fde:	46a0      	mov	r8, r4
 8000fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fe2:	0033      	movs	r3, r6
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	432b      	orrs	r3, r5
 8000fe8:	d1f5      	bne.n	8000fd6 <__eqdf2+0x5a>
 8000fea:	42a2      	cmp	r2, r4
 8000fec:	d1f3      	bne.n	8000fd6 <__eqdf2+0x5a>
 8000fee:	464b      	mov	r3, r9
 8000ff0:	433b      	orrs	r3, r7
 8000ff2:	d1f0      	bne.n	8000fd6 <__eqdf2+0x5a>
 8000ff4:	e7e2      	b.n	8000fbc <__eqdf2+0x40>
 8000ff6:	2000      	movs	r0, #0
 8000ff8:	e7ed      	b.n	8000fd6 <__eqdf2+0x5a>
 8000ffa:	46c0      	nop			; (mov r8, r8)
 8000ffc:	000007ff 	.word	0x000007ff

08001000 <__gedf2>:
 8001000:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001002:	4647      	mov	r7, r8
 8001004:	46ce      	mov	lr, r9
 8001006:	0004      	movs	r4, r0
 8001008:	0018      	movs	r0, r3
 800100a:	0016      	movs	r6, r2
 800100c:	031b      	lsls	r3, r3, #12
 800100e:	0b1b      	lsrs	r3, r3, #12
 8001010:	4d2d      	ldr	r5, [pc, #180]	; (80010c8 <__gedf2+0xc8>)
 8001012:	004a      	lsls	r2, r1, #1
 8001014:	4699      	mov	r9, r3
 8001016:	b580      	push	{r7, lr}
 8001018:	0043      	lsls	r3, r0, #1
 800101a:	030f      	lsls	r7, r1, #12
 800101c:	46a4      	mov	ip, r4
 800101e:	46b0      	mov	r8, r6
 8001020:	0b3f      	lsrs	r7, r7, #12
 8001022:	0d52      	lsrs	r2, r2, #21
 8001024:	0fc9      	lsrs	r1, r1, #31
 8001026:	0d5b      	lsrs	r3, r3, #21
 8001028:	0fc0      	lsrs	r0, r0, #31
 800102a:	42aa      	cmp	r2, r5
 800102c:	d021      	beq.n	8001072 <__gedf2+0x72>
 800102e:	42ab      	cmp	r3, r5
 8001030:	d013      	beq.n	800105a <__gedf2+0x5a>
 8001032:	2a00      	cmp	r2, #0
 8001034:	d122      	bne.n	800107c <__gedf2+0x7c>
 8001036:	433c      	orrs	r4, r7
 8001038:	2b00      	cmp	r3, #0
 800103a:	d102      	bne.n	8001042 <__gedf2+0x42>
 800103c:	464d      	mov	r5, r9
 800103e:	432e      	orrs	r6, r5
 8001040:	d022      	beq.n	8001088 <__gedf2+0x88>
 8001042:	2c00      	cmp	r4, #0
 8001044:	d010      	beq.n	8001068 <__gedf2+0x68>
 8001046:	4281      	cmp	r1, r0
 8001048:	d022      	beq.n	8001090 <__gedf2+0x90>
 800104a:	2002      	movs	r0, #2
 800104c:	3901      	subs	r1, #1
 800104e:	4008      	ands	r0, r1
 8001050:	3801      	subs	r0, #1
 8001052:	bcc0      	pop	{r6, r7}
 8001054:	46b9      	mov	r9, r7
 8001056:	46b0      	mov	r8, r6
 8001058:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800105a:	464d      	mov	r5, r9
 800105c:	432e      	orrs	r6, r5
 800105e:	d129      	bne.n	80010b4 <__gedf2+0xb4>
 8001060:	2a00      	cmp	r2, #0
 8001062:	d1f0      	bne.n	8001046 <__gedf2+0x46>
 8001064:	433c      	orrs	r4, r7
 8001066:	d1ee      	bne.n	8001046 <__gedf2+0x46>
 8001068:	2800      	cmp	r0, #0
 800106a:	d1f2      	bne.n	8001052 <__gedf2+0x52>
 800106c:	2001      	movs	r0, #1
 800106e:	4240      	negs	r0, r0
 8001070:	e7ef      	b.n	8001052 <__gedf2+0x52>
 8001072:	003d      	movs	r5, r7
 8001074:	4325      	orrs	r5, r4
 8001076:	d11d      	bne.n	80010b4 <__gedf2+0xb4>
 8001078:	4293      	cmp	r3, r2
 800107a:	d0ee      	beq.n	800105a <__gedf2+0x5a>
 800107c:	2b00      	cmp	r3, #0
 800107e:	d1e2      	bne.n	8001046 <__gedf2+0x46>
 8001080:	464c      	mov	r4, r9
 8001082:	4326      	orrs	r6, r4
 8001084:	d1df      	bne.n	8001046 <__gedf2+0x46>
 8001086:	e7e0      	b.n	800104a <__gedf2+0x4a>
 8001088:	2000      	movs	r0, #0
 800108a:	2c00      	cmp	r4, #0
 800108c:	d0e1      	beq.n	8001052 <__gedf2+0x52>
 800108e:	e7dc      	b.n	800104a <__gedf2+0x4a>
 8001090:	429a      	cmp	r2, r3
 8001092:	dc0a      	bgt.n	80010aa <__gedf2+0xaa>
 8001094:	dbe8      	blt.n	8001068 <__gedf2+0x68>
 8001096:	454f      	cmp	r7, r9
 8001098:	d8d7      	bhi.n	800104a <__gedf2+0x4a>
 800109a:	d00e      	beq.n	80010ba <__gedf2+0xba>
 800109c:	2000      	movs	r0, #0
 800109e:	454f      	cmp	r7, r9
 80010a0:	d2d7      	bcs.n	8001052 <__gedf2+0x52>
 80010a2:	2900      	cmp	r1, #0
 80010a4:	d0e2      	beq.n	800106c <__gedf2+0x6c>
 80010a6:	0008      	movs	r0, r1
 80010a8:	e7d3      	b.n	8001052 <__gedf2+0x52>
 80010aa:	4243      	negs	r3, r0
 80010ac:	4158      	adcs	r0, r3
 80010ae:	0040      	lsls	r0, r0, #1
 80010b0:	3801      	subs	r0, #1
 80010b2:	e7ce      	b.n	8001052 <__gedf2+0x52>
 80010b4:	2002      	movs	r0, #2
 80010b6:	4240      	negs	r0, r0
 80010b8:	e7cb      	b.n	8001052 <__gedf2+0x52>
 80010ba:	45c4      	cmp	ip, r8
 80010bc:	d8c5      	bhi.n	800104a <__gedf2+0x4a>
 80010be:	2000      	movs	r0, #0
 80010c0:	45c4      	cmp	ip, r8
 80010c2:	d2c6      	bcs.n	8001052 <__gedf2+0x52>
 80010c4:	e7ed      	b.n	80010a2 <__gedf2+0xa2>
 80010c6:	46c0      	nop			; (mov r8, r8)
 80010c8:	000007ff 	.word	0x000007ff

080010cc <__ledf2>:
 80010cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010ce:	4647      	mov	r7, r8
 80010d0:	46ce      	mov	lr, r9
 80010d2:	0004      	movs	r4, r0
 80010d4:	0018      	movs	r0, r3
 80010d6:	0016      	movs	r6, r2
 80010d8:	031b      	lsls	r3, r3, #12
 80010da:	0b1b      	lsrs	r3, r3, #12
 80010dc:	4d2c      	ldr	r5, [pc, #176]	; (8001190 <__ledf2+0xc4>)
 80010de:	004a      	lsls	r2, r1, #1
 80010e0:	4699      	mov	r9, r3
 80010e2:	b580      	push	{r7, lr}
 80010e4:	0043      	lsls	r3, r0, #1
 80010e6:	030f      	lsls	r7, r1, #12
 80010e8:	46a4      	mov	ip, r4
 80010ea:	46b0      	mov	r8, r6
 80010ec:	0b3f      	lsrs	r7, r7, #12
 80010ee:	0d52      	lsrs	r2, r2, #21
 80010f0:	0fc9      	lsrs	r1, r1, #31
 80010f2:	0d5b      	lsrs	r3, r3, #21
 80010f4:	0fc0      	lsrs	r0, r0, #31
 80010f6:	42aa      	cmp	r2, r5
 80010f8:	d00d      	beq.n	8001116 <__ledf2+0x4a>
 80010fa:	42ab      	cmp	r3, r5
 80010fc:	d010      	beq.n	8001120 <__ledf2+0x54>
 80010fe:	2a00      	cmp	r2, #0
 8001100:	d127      	bne.n	8001152 <__ledf2+0x86>
 8001102:	433c      	orrs	r4, r7
 8001104:	2b00      	cmp	r3, #0
 8001106:	d111      	bne.n	800112c <__ledf2+0x60>
 8001108:	464d      	mov	r5, r9
 800110a:	432e      	orrs	r6, r5
 800110c:	d10e      	bne.n	800112c <__ledf2+0x60>
 800110e:	2000      	movs	r0, #0
 8001110:	2c00      	cmp	r4, #0
 8001112:	d015      	beq.n	8001140 <__ledf2+0x74>
 8001114:	e00e      	b.n	8001134 <__ledf2+0x68>
 8001116:	003d      	movs	r5, r7
 8001118:	4325      	orrs	r5, r4
 800111a:	d110      	bne.n	800113e <__ledf2+0x72>
 800111c:	4293      	cmp	r3, r2
 800111e:	d118      	bne.n	8001152 <__ledf2+0x86>
 8001120:	464d      	mov	r5, r9
 8001122:	432e      	orrs	r6, r5
 8001124:	d10b      	bne.n	800113e <__ledf2+0x72>
 8001126:	2a00      	cmp	r2, #0
 8001128:	d102      	bne.n	8001130 <__ledf2+0x64>
 800112a:	433c      	orrs	r4, r7
 800112c:	2c00      	cmp	r4, #0
 800112e:	d00b      	beq.n	8001148 <__ledf2+0x7c>
 8001130:	4281      	cmp	r1, r0
 8001132:	d014      	beq.n	800115e <__ledf2+0x92>
 8001134:	2002      	movs	r0, #2
 8001136:	3901      	subs	r1, #1
 8001138:	4008      	ands	r0, r1
 800113a:	3801      	subs	r0, #1
 800113c:	e000      	b.n	8001140 <__ledf2+0x74>
 800113e:	2002      	movs	r0, #2
 8001140:	bcc0      	pop	{r6, r7}
 8001142:	46b9      	mov	r9, r7
 8001144:	46b0      	mov	r8, r6
 8001146:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001148:	2800      	cmp	r0, #0
 800114a:	d1f9      	bne.n	8001140 <__ledf2+0x74>
 800114c:	2001      	movs	r0, #1
 800114e:	4240      	negs	r0, r0
 8001150:	e7f6      	b.n	8001140 <__ledf2+0x74>
 8001152:	2b00      	cmp	r3, #0
 8001154:	d1ec      	bne.n	8001130 <__ledf2+0x64>
 8001156:	464c      	mov	r4, r9
 8001158:	4326      	orrs	r6, r4
 800115a:	d1e9      	bne.n	8001130 <__ledf2+0x64>
 800115c:	e7ea      	b.n	8001134 <__ledf2+0x68>
 800115e:	429a      	cmp	r2, r3
 8001160:	dd04      	ble.n	800116c <__ledf2+0xa0>
 8001162:	4243      	negs	r3, r0
 8001164:	4158      	adcs	r0, r3
 8001166:	0040      	lsls	r0, r0, #1
 8001168:	3801      	subs	r0, #1
 800116a:	e7e9      	b.n	8001140 <__ledf2+0x74>
 800116c:	429a      	cmp	r2, r3
 800116e:	dbeb      	blt.n	8001148 <__ledf2+0x7c>
 8001170:	454f      	cmp	r7, r9
 8001172:	d8df      	bhi.n	8001134 <__ledf2+0x68>
 8001174:	d006      	beq.n	8001184 <__ledf2+0xb8>
 8001176:	2000      	movs	r0, #0
 8001178:	454f      	cmp	r7, r9
 800117a:	d2e1      	bcs.n	8001140 <__ledf2+0x74>
 800117c:	2900      	cmp	r1, #0
 800117e:	d0e5      	beq.n	800114c <__ledf2+0x80>
 8001180:	0008      	movs	r0, r1
 8001182:	e7dd      	b.n	8001140 <__ledf2+0x74>
 8001184:	45c4      	cmp	ip, r8
 8001186:	d8d5      	bhi.n	8001134 <__ledf2+0x68>
 8001188:	2000      	movs	r0, #0
 800118a:	45c4      	cmp	ip, r8
 800118c:	d2d8      	bcs.n	8001140 <__ledf2+0x74>
 800118e:	e7f5      	b.n	800117c <__ledf2+0xb0>
 8001190:	000007ff 	.word	0x000007ff

08001194 <__aeabi_f2d>:
 8001194:	b570      	push	{r4, r5, r6, lr}
 8001196:	0043      	lsls	r3, r0, #1
 8001198:	0246      	lsls	r6, r0, #9
 800119a:	0fc4      	lsrs	r4, r0, #31
 800119c:	20fe      	movs	r0, #254	; 0xfe
 800119e:	0e1b      	lsrs	r3, r3, #24
 80011a0:	1c59      	adds	r1, r3, #1
 80011a2:	0a75      	lsrs	r5, r6, #9
 80011a4:	4208      	tst	r0, r1
 80011a6:	d00c      	beq.n	80011c2 <__aeabi_f2d+0x2e>
 80011a8:	22e0      	movs	r2, #224	; 0xe0
 80011aa:	0092      	lsls	r2, r2, #2
 80011ac:	4694      	mov	ip, r2
 80011ae:	076d      	lsls	r5, r5, #29
 80011b0:	0b36      	lsrs	r6, r6, #12
 80011b2:	4463      	add	r3, ip
 80011b4:	051b      	lsls	r3, r3, #20
 80011b6:	4333      	orrs	r3, r6
 80011b8:	07e4      	lsls	r4, r4, #31
 80011ba:	4323      	orrs	r3, r4
 80011bc:	0028      	movs	r0, r5
 80011be:	0019      	movs	r1, r3
 80011c0:	bd70      	pop	{r4, r5, r6, pc}
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d114      	bne.n	80011f0 <__aeabi_f2d+0x5c>
 80011c6:	2d00      	cmp	r5, #0
 80011c8:	d01b      	beq.n	8001202 <__aeabi_f2d+0x6e>
 80011ca:	0028      	movs	r0, r5
 80011cc:	f000 f864 	bl	8001298 <__clzsi2>
 80011d0:	280a      	cmp	r0, #10
 80011d2:	dc1c      	bgt.n	800120e <__aeabi_f2d+0x7a>
 80011d4:	230b      	movs	r3, #11
 80011d6:	002e      	movs	r6, r5
 80011d8:	1a1b      	subs	r3, r3, r0
 80011da:	40de      	lsrs	r6, r3
 80011dc:	0003      	movs	r3, r0
 80011de:	3315      	adds	r3, #21
 80011e0:	409d      	lsls	r5, r3
 80011e2:	4a0e      	ldr	r2, [pc, #56]	; (800121c <__aeabi_f2d+0x88>)
 80011e4:	0336      	lsls	r6, r6, #12
 80011e6:	1a12      	subs	r2, r2, r0
 80011e8:	0552      	lsls	r2, r2, #21
 80011ea:	0b36      	lsrs	r6, r6, #12
 80011ec:	0d53      	lsrs	r3, r2, #21
 80011ee:	e7e1      	b.n	80011b4 <__aeabi_f2d+0x20>
 80011f0:	2d00      	cmp	r5, #0
 80011f2:	d009      	beq.n	8001208 <__aeabi_f2d+0x74>
 80011f4:	2280      	movs	r2, #128	; 0x80
 80011f6:	0b36      	lsrs	r6, r6, #12
 80011f8:	0312      	lsls	r2, r2, #12
 80011fa:	4b09      	ldr	r3, [pc, #36]	; (8001220 <__aeabi_f2d+0x8c>)
 80011fc:	076d      	lsls	r5, r5, #29
 80011fe:	4316      	orrs	r6, r2
 8001200:	e7d8      	b.n	80011b4 <__aeabi_f2d+0x20>
 8001202:	2300      	movs	r3, #0
 8001204:	2600      	movs	r6, #0
 8001206:	e7d5      	b.n	80011b4 <__aeabi_f2d+0x20>
 8001208:	2600      	movs	r6, #0
 800120a:	4b05      	ldr	r3, [pc, #20]	; (8001220 <__aeabi_f2d+0x8c>)
 800120c:	e7d2      	b.n	80011b4 <__aeabi_f2d+0x20>
 800120e:	0003      	movs	r3, r0
 8001210:	3b0b      	subs	r3, #11
 8001212:	409d      	lsls	r5, r3
 8001214:	002e      	movs	r6, r5
 8001216:	2500      	movs	r5, #0
 8001218:	e7e3      	b.n	80011e2 <__aeabi_f2d+0x4e>
 800121a:	46c0      	nop			; (mov r8, r8)
 800121c:	00000389 	.word	0x00000389
 8001220:	000007ff 	.word	0x000007ff

08001224 <__aeabi_cfrcmple>:
 8001224:	4684      	mov	ip, r0
 8001226:	0008      	movs	r0, r1
 8001228:	4661      	mov	r1, ip
 800122a:	e7ff      	b.n	800122c <__aeabi_cfcmpeq>

0800122c <__aeabi_cfcmpeq>:
 800122c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800122e:	f000 f8bd 	bl	80013ac <__lesf2>
 8001232:	2800      	cmp	r0, #0
 8001234:	d401      	bmi.n	800123a <__aeabi_cfcmpeq+0xe>
 8001236:	2100      	movs	r1, #0
 8001238:	42c8      	cmn	r0, r1
 800123a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800123c <__aeabi_fcmpeq>:
 800123c:	b510      	push	{r4, lr}
 800123e:	f000 f849 	bl	80012d4 <__eqsf2>
 8001242:	4240      	negs	r0, r0
 8001244:	3001      	adds	r0, #1
 8001246:	bd10      	pop	{r4, pc}

08001248 <__aeabi_fcmplt>:
 8001248:	b510      	push	{r4, lr}
 800124a:	f000 f8af 	bl	80013ac <__lesf2>
 800124e:	2800      	cmp	r0, #0
 8001250:	db01      	blt.n	8001256 <__aeabi_fcmplt+0xe>
 8001252:	2000      	movs	r0, #0
 8001254:	bd10      	pop	{r4, pc}
 8001256:	2001      	movs	r0, #1
 8001258:	bd10      	pop	{r4, pc}
 800125a:	46c0      	nop			; (mov r8, r8)

0800125c <__aeabi_fcmple>:
 800125c:	b510      	push	{r4, lr}
 800125e:	f000 f8a5 	bl	80013ac <__lesf2>
 8001262:	2800      	cmp	r0, #0
 8001264:	dd01      	ble.n	800126a <__aeabi_fcmple+0xe>
 8001266:	2000      	movs	r0, #0
 8001268:	bd10      	pop	{r4, pc}
 800126a:	2001      	movs	r0, #1
 800126c:	bd10      	pop	{r4, pc}
 800126e:	46c0      	nop			; (mov r8, r8)

08001270 <__aeabi_fcmpgt>:
 8001270:	b510      	push	{r4, lr}
 8001272:	f000 f855 	bl	8001320 <__gesf2>
 8001276:	2800      	cmp	r0, #0
 8001278:	dc01      	bgt.n	800127e <__aeabi_fcmpgt+0xe>
 800127a:	2000      	movs	r0, #0
 800127c:	bd10      	pop	{r4, pc}
 800127e:	2001      	movs	r0, #1
 8001280:	bd10      	pop	{r4, pc}
 8001282:	46c0      	nop			; (mov r8, r8)

08001284 <__aeabi_fcmpge>:
 8001284:	b510      	push	{r4, lr}
 8001286:	f000 f84b 	bl	8001320 <__gesf2>
 800128a:	2800      	cmp	r0, #0
 800128c:	da01      	bge.n	8001292 <__aeabi_fcmpge+0xe>
 800128e:	2000      	movs	r0, #0
 8001290:	bd10      	pop	{r4, pc}
 8001292:	2001      	movs	r0, #1
 8001294:	bd10      	pop	{r4, pc}
 8001296:	46c0      	nop			; (mov r8, r8)

08001298 <__clzsi2>:
 8001298:	211c      	movs	r1, #28
 800129a:	2301      	movs	r3, #1
 800129c:	041b      	lsls	r3, r3, #16
 800129e:	4298      	cmp	r0, r3
 80012a0:	d301      	bcc.n	80012a6 <__clzsi2+0xe>
 80012a2:	0c00      	lsrs	r0, r0, #16
 80012a4:	3910      	subs	r1, #16
 80012a6:	0a1b      	lsrs	r3, r3, #8
 80012a8:	4298      	cmp	r0, r3
 80012aa:	d301      	bcc.n	80012b0 <__clzsi2+0x18>
 80012ac:	0a00      	lsrs	r0, r0, #8
 80012ae:	3908      	subs	r1, #8
 80012b0:	091b      	lsrs	r3, r3, #4
 80012b2:	4298      	cmp	r0, r3
 80012b4:	d301      	bcc.n	80012ba <__clzsi2+0x22>
 80012b6:	0900      	lsrs	r0, r0, #4
 80012b8:	3904      	subs	r1, #4
 80012ba:	a202      	add	r2, pc, #8	; (adr r2, 80012c4 <__clzsi2+0x2c>)
 80012bc:	5c10      	ldrb	r0, [r2, r0]
 80012be:	1840      	adds	r0, r0, r1
 80012c0:	4770      	bx	lr
 80012c2:	46c0      	nop			; (mov r8, r8)
 80012c4:	02020304 	.word	0x02020304
 80012c8:	01010101 	.word	0x01010101
	...

080012d4 <__eqsf2>:
 80012d4:	b570      	push	{r4, r5, r6, lr}
 80012d6:	0042      	lsls	r2, r0, #1
 80012d8:	0245      	lsls	r5, r0, #9
 80012da:	024e      	lsls	r6, r1, #9
 80012dc:	004c      	lsls	r4, r1, #1
 80012de:	0fc3      	lsrs	r3, r0, #31
 80012e0:	0a6d      	lsrs	r5, r5, #9
 80012e2:	2001      	movs	r0, #1
 80012e4:	0e12      	lsrs	r2, r2, #24
 80012e6:	0a76      	lsrs	r6, r6, #9
 80012e8:	0e24      	lsrs	r4, r4, #24
 80012ea:	0fc9      	lsrs	r1, r1, #31
 80012ec:	2aff      	cmp	r2, #255	; 0xff
 80012ee:	d006      	beq.n	80012fe <__eqsf2+0x2a>
 80012f0:	2cff      	cmp	r4, #255	; 0xff
 80012f2:	d003      	beq.n	80012fc <__eqsf2+0x28>
 80012f4:	42a2      	cmp	r2, r4
 80012f6:	d101      	bne.n	80012fc <__eqsf2+0x28>
 80012f8:	42b5      	cmp	r5, r6
 80012fa:	d006      	beq.n	800130a <__eqsf2+0x36>
 80012fc:	bd70      	pop	{r4, r5, r6, pc}
 80012fe:	2d00      	cmp	r5, #0
 8001300:	d1fc      	bne.n	80012fc <__eqsf2+0x28>
 8001302:	2cff      	cmp	r4, #255	; 0xff
 8001304:	d1fa      	bne.n	80012fc <__eqsf2+0x28>
 8001306:	2e00      	cmp	r6, #0
 8001308:	d1f8      	bne.n	80012fc <__eqsf2+0x28>
 800130a:	428b      	cmp	r3, r1
 800130c:	d006      	beq.n	800131c <__eqsf2+0x48>
 800130e:	2001      	movs	r0, #1
 8001310:	2a00      	cmp	r2, #0
 8001312:	d1f3      	bne.n	80012fc <__eqsf2+0x28>
 8001314:	0028      	movs	r0, r5
 8001316:	1e43      	subs	r3, r0, #1
 8001318:	4198      	sbcs	r0, r3
 800131a:	e7ef      	b.n	80012fc <__eqsf2+0x28>
 800131c:	2000      	movs	r0, #0
 800131e:	e7ed      	b.n	80012fc <__eqsf2+0x28>

08001320 <__gesf2>:
 8001320:	b570      	push	{r4, r5, r6, lr}
 8001322:	0042      	lsls	r2, r0, #1
 8001324:	0245      	lsls	r5, r0, #9
 8001326:	024e      	lsls	r6, r1, #9
 8001328:	004c      	lsls	r4, r1, #1
 800132a:	0fc3      	lsrs	r3, r0, #31
 800132c:	0a6d      	lsrs	r5, r5, #9
 800132e:	0e12      	lsrs	r2, r2, #24
 8001330:	0a76      	lsrs	r6, r6, #9
 8001332:	0e24      	lsrs	r4, r4, #24
 8001334:	0fc8      	lsrs	r0, r1, #31
 8001336:	2aff      	cmp	r2, #255	; 0xff
 8001338:	d01b      	beq.n	8001372 <__gesf2+0x52>
 800133a:	2cff      	cmp	r4, #255	; 0xff
 800133c:	d00e      	beq.n	800135c <__gesf2+0x3c>
 800133e:	2a00      	cmp	r2, #0
 8001340:	d11b      	bne.n	800137a <__gesf2+0x5a>
 8001342:	2c00      	cmp	r4, #0
 8001344:	d101      	bne.n	800134a <__gesf2+0x2a>
 8001346:	2e00      	cmp	r6, #0
 8001348:	d01c      	beq.n	8001384 <__gesf2+0x64>
 800134a:	2d00      	cmp	r5, #0
 800134c:	d00c      	beq.n	8001368 <__gesf2+0x48>
 800134e:	4283      	cmp	r3, r0
 8001350:	d01c      	beq.n	800138c <__gesf2+0x6c>
 8001352:	2102      	movs	r1, #2
 8001354:	1e58      	subs	r0, r3, #1
 8001356:	4008      	ands	r0, r1
 8001358:	3801      	subs	r0, #1
 800135a:	bd70      	pop	{r4, r5, r6, pc}
 800135c:	2e00      	cmp	r6, #0
 800135e:	d122      	bne.n	80013a6 <__gesf2+0x86>
 8001360:	2a00      	cmp	r2, #0
 8001362:	d1f4      	bne.n	800134e <__gesf2+0x2e>
 8001364:	2d00      	cmp	r5, #0
 8001366:	d1f2      	bne.n	800134e <__gesf2+0x2e>
 8001368:	2800      	cmp	r0, #0
 800136a:	d1f6      	bne.n	800135a <__gesf2+0x3a>
 800136c:	2001      	movs	r0, #1
 800136e:	4240      	negs	r0, r0
 8001370:	e7f3      	b.n	800135a <__gesf2+0x3a>
 8001372:	2d00      	cmp	r5, #0
 8001374:	d117      	bne.n	80013a6 <__gesf2+0x86>
 8001376:	2cff      	cmp	r4, #255	; 0xff
 8001378:	d0f0      	beq.n	800135c <__gesf2+0x3c>
 800137a:	2c00      	cmp	r4, #0
 800137c:	d1e7      	bne.n	800134e <__gesf2+0x2e>
 800137e:	2e00      	cmp	r6, #0
 8001380:	d1e5      	bne.n	800134e <__gesf2+0x2e>
 8001382:	e7e6      	b.n	8001352 <__gesf2+0x32>
 8001384:	2000      	movs	r0, #0
 8001386:	2d00      	cmp	r5, #0
 8001388:	d0e7      	beq.n	800135a <__gesf2+0x3a>
 800138a:	e7e2      	b.n	8001352 <__gesf2+0x32>
 800138c:	42a2      	cmp	r2, r4
 800138e:	dc05      	bgt.n	800139c <__gesf2+0x7c>
 8001390:	dbea      	blt.n	8001368 <__gesf2+0x48>
 8001392:	42b5      	cmp	r5, r6
 8001394:	d802      	bhi.n	800139c <__gesf2+0x7c>
 8001396:	d3e7      	bcc.n	8001368 <__gesf2+0x48>
 8001398:	2000      	movs	r0, #0
 800139a:	e7de      	b.n	800135a <__gesf2+0x3a>
 800139c:	4243      	negs	r3, r0
 800139e:	4158      	adcs	r0, r3
 80013a0:	0040      	lsls	r0, r0, #1
 80013a2:	3801      	subs	r0, #1
 80013a4:	e7d9      	b.n	800135a <__gesf2+0x3a>
 80013a6:	2002      	movs	r0, #2
 80013a8:	4240      	negs	r0, r0
 80013aa:	e7d6      	b.n	800135a <__gesf2+0x3a>

080013ac <__lesf2>:
 80013ac:	b570      	push	{r4, r5, r6, lr}
 80013ae:	0042      	lsls	r2, r0, #1
 80013b0:	0245      	lsls	r5, r0, #9
 80013b2:	024e      	lsls	r6, r1, #9
 80013b4:	004c      	lsls	r4, r1, #1
 80013b6:	0fc3      	lsrs	r3, r0, #31
 80013b8:	0a6d      	lsrs	r5, r5, #9
 80013ba:	0e12      	lsrs	r2, r2, #24
 80013bc:	0a76      	lsrs	r6, r6, #9
 80013be:	0e24      	lsrs	r4, r4, #24
 80013c0:	0fc8      	lsrs	r0, r1, #31
 80013c2:	2aff      	cmp	r2, #255	; 0xff
 80013c4:	d00b      	beq.n	80013de <__lesf2+0x32>
 80013c6:	2cff      	cmp	r4, #255	; 0xff
 80013c8:	d00d      	beq.n	80013e6 <__lesf2+0x3a>
 80013ca:	2a00      	cmp	r2, #0
 80013cc:	d11f      	bne.n	800140e <__lesf2+0x62>
 80013ce:	2c00      	cmp	r4, #0
 80013d0:	d116      	bne.n	8001400 <__lesf2+0x54>
 80013d2:	2e00      	cmp	r6, #0
 80013d4:	d114      	bne.n	8001400 <__lesf2+0x54>
 80013d6:	2000      	movs	r0, #0
 80013d8:	2d00      	cmp	r5, #0
 80013da:	d010      	beq.n	80013fe <__lesf2+0x52>
 80013dc:	e009      	b.n	80013f2 <__lesf2+0x46>
 80013de:	2d00      	cmp	r5, #0
 80013e0:	d10c      	bne.n	80013fc <__lesf2+0x50>
 80013e2:	2cff      	cmp	r4, #255	; 0xff
 80013e4:	d113      	bne.n	800140e <__lesf2+0x62>
 80013e6:	2e00      	cmp	r6, #0
 80013e8:	d108      	bne.n	80013fc <__lesf2+0x50>
 80013ea:	2a00      	cmp	r2, #0
 80013ec:	d008      	beq.n	8001400 <__lesf2+0x54>
 80013ee:	4283      	cmp	r3, r0
 80013f0:	d012      	beq.n	8001418 <__lesf2+0x6c>
 80013f2:	2102      	movs	r1, #2
 80013f4:	1e58      	subs	r0, r3, #1
 80013f6:	4008      	ands	r0, r1
 80013f8:	3801      	subs	r0, #1
 80013fa:	e000      	b.n	80013fe <__lesf2+0x52>
 80013fc:	2002      	movs	r0, #2
 80013fe:	bd70      	pop	{r4, r5, r6, pc}
 8001400:	2d00      	cmp	r5, #0
 8001402:	d1f4      	bne.n	80013ee <__lesf2+0x42>
 8001404:	2800      	cmp	r0, #0
 8001406:	d1fa      	bne.n	80013fe <__lesf2+0x52>
 8001408:	2001      	movs	r0, #1
 800140a:	4240      	negs	r0, r0
 800140c:	e7f7      	b.n	80013fe <__lesf2+0x52>
 800140e:	2c00      	cmp	r4, #0
 8001410:	d1ed      	bne.n	80013ee <__lesf2+0x42>
 8001412:	2e00      	cmp	r6, #0
 8001414:	d1eb      	bne.n	80013ee <__lesf2+0x42>
 8001416:	e7ec      	b.n	80013f2 <__lesf2+0x46>
 8001418:	42a2      	cmp	r2, r4
 800141a:	dc05      	bgt.n	8001428 <__lesf2+0x7c>
 800141c:	dbf2      	blt.n	8001404 <__lesf2+0x58>
 800141e:	42b5      	cmp	r5, r6
 8001420:	d802      	bhi.n	8001428 <__lesf2+0x7c>
 8001422:	d3ef      	bcc.n	8001404 <__lesf2+0x58>
 8001424:	2000      	movs	r0, #0
 8001426:	e7ea      	b.n	80013fe <__lesf2+0x52>
 8001428:	4243      	negs	r3, r0
 800142a:	4158      	adcs	r0, r3
 800142c:	0040      	lsls	r0, r0, #1
 800142e:	3801      	subs	r0, #1
 8001430:	e7e5      	b.n	80013fe <__lesf2+0x52>
 8001432:	46c0      	nop			; (mov r8, r8)

08001434 <Init_PID>:
 *  \param d_factor  Derivate term.
 *  \param pid  Struct with PID status.
 */
void Init_PID(int p_factor, int i_factor, int d_factor, struct PID_DATA *pid)
// Set up PID controller parameters
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	607a      	str	r2, [r7, #4]
 8001440:	603b      	str	r3, [r7, #0]
  // Start values for PID controller
  pid->SUM_ERROR = 0;
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	2200      	movs	r2, #0
 8001446:	605a      	str	r2, [r3, #4]
  pid->LAST_PROCESS_VALUE = 0;
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
  // Tuning constants for PID loop
  pid->P_FACTOR = p_factor;
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	68fa      	ldr	r2, [r7, #12]
 8001452:	609a      	str	r2, [r3, #8]
  pid->I_FACTOR = i_factor;
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	68ba      	ldr	r2, [r7, #8]
 8001458:	60da      	str	r2, [r3, #12]
  pid->D_FACTOR = d_factor;
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	611a      	str	r2, [r3, #16]
  // Limits to avoid overflow
//  pid->MAX_ERROR = MAX_INT / (pid->P_FACTOR + 1);
  pid->MAX_ERROR = MAX_INT / (pid->P_FACTOR);
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	0019      	movs	r1, r3
 8001466:	2380      	movs	r3, #128	; 0x80
 8001468:	0218      	lsls	r0, r3, #8
 800146a:	f7fe fe4d 	bl	8000108 <__divsi3>
 800146e:	0003      	movs	r3, r0
 8001470:	001a      	movs	r2, r3
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	615a      	str	r2, [r3, #20]
  pid->MAX_SUM_ERROR = MAX_INT / (pid->I_FACTOR + 1);
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	68db      	ldr	r3, [r3, #12]
 800147a:	3301      	adds	r3, #1
 800147c:	0019      	movs	r1, r3
 800147e:	2380      	movs	r3, #128	; 0x80
 8001480:	0218      	lsls	r0, r3, #8
 8001482:	f7fe fe41 	bl	8000108 <__divsi3>
 8001486:	0003      	movs	r3, r0
 8001488:	001a      	movs	r2, r3
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	619a      	str	r2, [r3, #24]
}
 800148e:	46c0      	nop			; (mov r8, r8)
 8001490:	46bd      	mov	sp, r7
 8001492:	b004      	add	sp, #16
 8001494:	bd80      	pop	{r7, pc}
	...

08001498 <PID>:
 *  \param setPoint  Desired value.
 *  \param processValue  Measured value.
 *  \param pid_st  PID status struct.
 */
int PID(int setPoint, int processValue, struct PID_DATA *pid_st)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b08a      	sub	sp, #40	; 0x28
 800149c:	af00      	add	r7, sp, #0
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	60b9      	str	r1, [r7, #8]
 80014a2:	607a      	str	r2, [r7, #4]
  int error, p_term, i_term, d_term;
  long ret, temp;

  error = setPoint - processValue;
 80014a4:	68fa      	ldr	r2, [r7, #12]
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	61fb      	str	r3, [r7, #28]

  // Calculate Pterm and limit error overflow
  if(error > pid_st->MAX_ERROR)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	695b      	ldr	r3, [r3, #20]
 80014b0:	69fa      	ldr	r2, [r7, #28]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	dd03      	ble.n	80014be <PID+0x26>
    p_term = MAX_INT;
 80014b6:	2380      	movs	r3, #128	; 0x80
 80014b8:	021b      	lsls	r3, r3, #8
 80014ba:	627b      	str	r3, [r7, #36]	; 0x24
 80014bc:	e00d      	b.n	80014da <PID+0x42>
  else if(error < -pid_st->MAX_ERROR)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	695b      	ldr	r3, [r3, #20]
 80014c2:	425b      	negs	r3, r3
 80014c4:	69fa      	ldr	r2, [r7, #28]
 80014c6:	429a      	cmp	r2, r3
 80014c8:	da02      	bge.n	80014d0 <PID+0x38>
    p_term = -MAX_INT;
 80014ca:	4b2d      	ldr	r3, [pc, #180]	; (8001580 <PID+0xe8>)
 80014cc:	627b      	str	r3, [r7, #36]	; 0x24
 80014ce:	e004      	b.n	80014da <PID+0x42>
  else
    p_term = pid_st->P_FACTOR * error;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	689a      	ldr	r2, [r3, #8]
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	4353      	muls	r3, r2
 80014d8:	627b      	str	r3, [r7, #36]	; 0x24

  // Calculate Iterm and limit integral runaway
  temp = (long)pid_st->SUM_ERROR + error;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	69fa      	ldr	r2, [r7, #28]
 80014e0:	18d3      	adds	r3, r2, r3
 80014e2:	61bb      	str	r3, [r7, #24]
  if(temp > pid_st->MAX_SUM_ERROR){
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	699b      	ldr	r3, [r3, #24]
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	429a      	cmp	r2, r3
 80014ec:	dd07      	ble.n	80014fe <PID+0x66>
    i_term = MAX_INT;
 80014ee:	2380      	movs	r3, #128	; 0x80
 80014f0:	021b      	lsls	r3, r3, #8
 80014f2:	617b      	str	r3, [r7, #20]
    pid_st->SUM_ERROR = pid_st->MAX_SUM_ERROR;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	699a      	ldr	r2, [r3, #24]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	605a      	str	r2, [r3, #4]
 80014fc:	e010      	b.n	8001520 <PID+0x88>
  }
  else if(temp < -pid_st->MAX_SUM_ERROR){
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	699b      	ldr	r3, [r3, #24]
 8001502:	425b      	negs	r3, r3
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	429a      	cmp	r2, r3
 8001508:	da07      	bge.n	800151a <PID+0x82>
    i_term = -MAX_INT;
 800150a:	4b1d      	ldr	r3, [pc, #116]	; (8001580 <PID+0xe8>)
 800150c:	617b      	str	r3, [r7, #20]
    pid_st->SUM_ERROR = -pid_st->MAX_SUM_ERROR;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	699b      	ldr	r3, [r3, #24]
 8001512:	425a      	negs	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	605a      	str	r2, [r3, #4]
 8001518:	e002      	b.n	8001520 <PID+0x88>
  }
  else
    pid_st->SUM_ERROR = temp;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	605a      	str	r2, [r3, #4]
    i_term = pid_st->I_FACTOR * pid_st->SUM_ERROR;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	68da      	ldr	r2, [r3, #12]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	4353      	muls	r3, r2
 800152a:	617b      	str	r3, [r7, #20]

  // Calculate Dterm
  d_term = pid_st->D_FACTOR * (pid_st->LAST_PROCESS_VALUE - processValue);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	691a      	ldr	r2, [r3, #16]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6819      	ldr	r1, [r3, #0]
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	1acb      	subs	r3, r1, r3
 8001538:	4353      	muls	r3, r2
 800153a:	613b      	str	r3, [r7, #16]

  pid_st->LAST_PROCESS_VALUE = processValue;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	68ba      	ldr	r2, [r7, #8]
 8001540:	601a      	str	r2, [r3, #0]

  //ret = (((long)p_term + i_term + d_term))/128;
//  ret = (((long)p_term + i_term + d_term)) >> 7; // <--- scale back down (right shift seven bits = divide by 128)
  ret = (((long)p_term + i_term + d_term))/SCALING_FACTOR;
 8001542:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	18d2      	adds	r2, r2, r3
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	18d3      	adds	r3, r2, r3
 800154c:	2b00      	cmp	r3, #0
 800154e:	da00      	bge.n	8001552 <PID+0xba>
 8001550:	330f      	adds	r3, #15
 8001552:	111b      	asrs	r3, r3, #4
 8001554:	623b      	str	r3, [r7, #32]
  if(ret > MAX_INT)
 8001556:	6a3a      	ldr	r2, [r7, #32]
 8001558:	2380      	movs	r3, #128	; 0x80
 800155a:	021b      	lsls	r3, r3, #8
 800155c:	429a      	cmp	r2, r3
 800155e:	dd03      	ble.n	8001568 <PID+0xd0>
    ret = MAX_INT;
 8001560:	2380      	movs	r3, #128	; 0x80
 8001562:	021b      	lsls	r3, r3, #8
 8001564:	623b      	str	r3, [r7, #32]
 8001566:	e005      	b.n	8001574 <PID+0xdc>
  else if(ret < -MAX_INT)
 8001568:	6a3b      	ldr	r3, [r7, #32]
 800156a:	4a05      	ldr	r2, [pc, #20]	; (8001580 <PID+0xe8>)
 800156c:	4293      	cmp	r3, r2
 800156e:	da01      	bge.n	8001574 <PID+0xdc>
    ret = -MAX_INT;
 8001570:	4b03      	ldr	r3, [pc, #12]	; (8001580 <PID+0xe8>)
 8001572:	623b      	str	r3, [r7, #32]
  return((int)ret);
 8001574:	6a3b      	ldr	r3, [r7, #32]
}
 8001576:	0018      	movs	r0, r3
 8001578:	46bd      	mov	sp, r7
 800157a:	b00a      	add	sp, #40	; 0x28
 800157c:	bd80      	pop	{r7, pc}
 800157e:	46c0      	nop			; (mov r8, r8)
 8001580:	ffff8000 	.word	0xffff8000

08001584 <ADC_DeInit>:
  * @brief  Deinitializes ADC1 peripheral registers to their default reset values.
  * @param  ADCx: where x can be 1 to select the ADC peripheral.
  * @retval None
  */
void ADC_DeInit(ADC_TypeDef* ADCx)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  if(ADCx == ADC1)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	4a09      	ldr	r2, [pc, #36]	; (80015b4 <ADC_DeInit+0x30>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d10b      	bne.n	80015ac <ADC_DeInit+0x28>
  {
    /* Enable ADC1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, ENABLE);
 8001594:	2380      	movs	r3, #128	; 0x80
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	2101      	movs	r1, #1
 800159a:	0018      	movs	r0, r3
 800159c:	f000 fa80 	bl	8001aa0 <RCC_APB2PeriphResetCmd>

    /* Release ADC1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, DISABLE);
 80015a0:	2380      	movs	r3, #128	; 0x80
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	2100      	movs	r1, #0
 80015a6:	0018      	movs	r0, r3
 80015a8:	f000 fa7a 	bl	8001aa0 <RCC_APB2PeriphResetCmd>
  }
}
 80015ac:	46c0      	nop			; (mov r8, r8)
 80015ae:	46bd      	mov	sp, r7
 80015b0:	b002      	add	sp, #8
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	40012400 	.word	0x40012400

080015b8 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains 
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80015c2:	2300      	movs	r3, #0
 80015c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_EXTERNAL_TRIG_CONV(ADC_InitStruct->ADC_ExternalTrigConv));
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign));
  assert_param(IS_ADC_SCAN_DIRECTION(ADC_InitStruct->ADC_ScanDirection)); 

  /* Get the ADCx CFGR value */
  tmpreg = ADCx->CFGR1;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	60fb      	str	r3, [r7, #12]

  /* Clear SCANDIR, RES[1:0], ALIGN, EXTSEL[2:0], EXTEN[1:0] and CONT bits */
  tmpreg &= CFGR1_CLEAR_MASK;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	4a0f      	ldr	r2, [pc, #60]	; (800160c <ADC_Init+0x54>)
 80015d0:	4013      	ands	r3, r2
 80015d2:	60fb      	str	r3, [r7, #12]
  /* Set EXTEN[1:0] bits according to ADC_ExternalTrigConvEdge value */
  /* Set EXTSEL[2:0] bits according to ADC_ExternalTrigConv value */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set SCANDIR bit according to ADC_ScanDirection value */
 
  tmpreg  |= (uint32_t)(ADC_InitStruct->ADC_Resolution | ((uint32_t)(ADC_InitStruct->ADC_ContinuousConvMode) << 13) |
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	791b      	ldrb	r3, [r3, #4]
 80015dc:	035b      	lsls	r3, r3, #13
 80015de:	431a      	orrs	r2, r3
             ADC_InitStruct->ADC_ExternalTrigConvEdge | ADC_InitStruct->ADC_ExternalTrigConv |
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	689b      	ldr	r3, [r3, #8]
  tmpreg  |= (uint32_t)(ADC_InitStruct->ADC_Resolution | ((uint32_t)(ADC_InitStruct->ADC_ContinuousConvMode) << 13) |
 80015e4:	431a      	orrs	r2, r3
             ADC_InitStruct->ADC_ExternalTrigConvEdge | ADC_InitStruct->ADC_ExternalTrigConv |
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	431a      	orrs	r2, r3
             ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ScanDirection);
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	691b      	ldr	r3, [r3, #16]
             ADC_InitStruct->ADC_ExternalTrigConvEdge | ADC_InitStruct->ADC_ExternalTrigConv |
 80015f0:	431a      	orrs	r2, r3
             ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ScanDirection);
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	695b      	ldr	r3, [r3, #20]
  tmpreg  |= (uint32_t)(ADC_InitStruct->ADC_Resolution | ((uint32_t)(ADC_InitStruct->ADC_ContinuousConvMode) << 13) |
 80015f6:	4313      	orrs	r3, r2
 80015f8:	68fa      	ldr	r2, [r7, #12]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	60fb      	str	r3, [r7, #12]

  /* Write to ADCx CFGR */
  ADCx->CFGR1 = tmpreg;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	68fa      	ldr	r2, [r7, #12]
 8001602:	60da      	str	r2, [r3, #12]
}
 8001604:	46c0      	nop			; (mov r8, r8)
 8001606:	46bd      	mov	sp, r7
 8001608:	b004      	add	sp, #16
 800160a:	bd80      	pop	{r7, pc}
 800160c:	ffffd203 	.word	0xffffd203

08001610 <ADC_StructInit>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  /* Reset ADC init structure parameters values */
  /* Initialize the ADC_Resolution member */
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]

   /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2200      	movs	r2, #0
 8001622:	711a      	strb	r2, [r3, #4]

  /* Initialize the ADC_ExternalTrigConvEdge member */
  ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2200      	movs	r2, #0
 8001628:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_TRGO;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2200      	movs	r2, #0
 800162e:	60da      	str	r2, [r3, #12]

  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2200      	movs	r2, #0
 8001634:	611a      	str	r2, [r3, #16]

  /* Initialize the ADC_ScanDirection member */
  ADC_InitStruct->ADC_ScanDirection = ADC_ScanDirection_Upward;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2200      	movs	r2, #0
 800163a:	615a      	str	r2, [r3, #20]
}
 800163c:	46c0      	nop			; (mov r8, r8)
 800163e:	46bd      	mov	sp, r7
 8001640:	b002      	add	sp, #8
 8001642:	bd80      	pop	{r7, pc}

08001644 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	000a      	movs	r2, r1
 800164e:	1cfb      	adds	r3, r7, #3
 8001650:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001652:	1cfb      	adds	r3, r7, #3
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d006      	beq.n	8001668 <ADC_Cmd+0x24>
  {
    /* Set the ADEN bit to Enable the ADC peripheral */
    ADCx->CR |= (uint32_t)ADC_CR_ADEN;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	2201      	movs	r2, #1
 8001660:	431a      	orrs	r2, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	609a      	str	r2, [r3, #8]
  else
  {
    /* Set the ADDIS to Disable the ADC peripheral */
    ADCx->CR |= (uint32_t)ADC_CR_ADDIS;
  }
}
 8001666:	e005      	b.n	8001674 <ADC_Cmd+0x30>
    ADCx->CR |= (uint32_t)ADC_CR_ADDIS;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	2202      	movs	r2, #2
 800166e:	431a      	orrs	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	609a      	str	r2, [r3, #8]
}
 8001674:	46c0      	nop			; (mov r8, r8)
 8001676:	46bd      	mov	sp, r7
 8001678:	b002      	add	sp, #8
 800167a:	bd80      	pop	{r7, pc}

0800167c <ADC_ChannelConfig>:
  *            @arg ADC_SampleTime_71_5Cycles: Sample time equal to 71.5 cycles
  *            @arg ADC_SampleTime_239_5Cycles: Sample time equal to 239.5 cycles
  * @retval None
  */
void ADC_ChannelConfig(ADC_TypeDef* ADCx, uint32_t ADC_Channel, uint32_t ADC_SampleTime)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8001688:	2300      	movs	r3, #0
 800168a:	617b      	str	r3, [r7, #20]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));

  /* Configure the ADC Channel */
  ADCx->CHSELR |= (uint32_t)ADC_Channel;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	431a      	orrs	r2, r3
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	629a      	str	r2, [r3, #40]	; 0x28

  /* Clear the Sampling time Selection bits */
  tmpreg &= ~ADC_SMPR1_SMPR;
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	2207      	movs	r2, #7
 800169c:	4393      	bics	r3, r2
 800169e:	617b      	str	r3, [r7, #20]

  /* Set the ADC Sampling Time register */
  tmpreg |= (uint32_t)ADC_SampleTime;
 80016a0:	697a      	ldr	r2, [r7, #20]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	617b      	str	r3, [r7, #20]

  /* Configure the ADC Sample time register */
  ADCx->SMPR = tmpreg ;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	697a      	ldr	r2, [r7, #20]
 80016ac:	615a      	str	r2, [r3, #20]
}
 80016ae:	46c0      	nop			; (mov r8, r8)
 80016b0:	46bd      	mov	sp, r7
 80016b2:	b006      	add	sp, #24
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <ADC_GetCalibrationFactor>:
  *         reset configuration (ADEN must be equal to 0).
  * @param  ADCx: where x can be 1 to select the ADC1 peripheral.
  * @retval ADC Calibration factor 
  */
uint32_t ADC_GetCalibrationFactor(ADC_TypeDef* ADCx)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b086      	sub	sp, #24
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0, calibrationcounter = 0, calibrationstatus = 0;
 80016be:	2300      	movs	r3, #0
 80016c0:	617b      	str	r3, [r7, #20]
 80016c2:	2300      	movs	r3, #0
 80016c4:	613b      	str	r3, [r7, #16]
 80016c6:	2300      	movs	r3, #0
 80016c8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Set the ADC calibartion */
  ADCx->CR |= (uint32_t)ADC_CR_ADCAL;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	2280      	movs	r2, #128	; 0x80
 80016d0:	0612      	lsls	r2, r2, #24
 80016d2:	431a      	orrs	r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	609a      	str	r2, [r3, #8]
  
  /* Wait until no ADC calibration is completed */
  do
  {
    calibrationstatus = ADCx->CR & ADC_CR_ADCAL;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	0fdb      	lsrs	r3, r3, #31
 80016de:	07db      	lsls	r3, r3, #31
 80016e0:	60fb      	str	r3, [r7, #12]
    calibrationcounter++;  
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	3301      	adds	r3, #1
 80016e6:	613b      	str	r3, [r7, #16]
  } while((calibrationcounter != CALIBRATION_TIMEOUT) && (calibrationstatus != 0x00));
 80016e8:	693a      	ldr	r2, [r7, #16]
 80016ea:	23f0      	movs	r3, #240	; 0xf0
 80016ec:	021b      	lsls	r3, r3, #8
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d002      	beq.n	80016f8 <ADC_GetCalibrationFactor+0x42>
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d1ef      	bne.n	80016d8 <ADC_GetCalibrationFactor+0x22>
    
  if((uint32_t)(ADCx->CR & ADC_CR_ADCAL) == RESET)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	db03      	blt.n	8001708 <ADC_GetCalibrationFactor+0x52>
  {
    /*Get the calibration factor from the ADC data register */
    tmpreg = ADCx->DR;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001704:	617b      	str	r3, [r7, #20]
 8001706:	e001      	b.n	800170c <ADC_GetCalibrationFactor+0x56>
  }
  else
  {
    /* Error factor */
    tmpreg = 0x00000000;
 8001708:	2300      	movs	r3, #0
 800170a:	617b      	str	r3, [r7, #20]
  }
  return tmpreg;
 800170c:	697b      	ldr	r3, [r7, #20]
}
 800170e:	0018      	movs	r0, r3
 8001710:	46bd      	mov	sp, r7
 8001712:	b006      	add	sp, #24
 8001714:	bd80      	pop	{r7, pc}

08001716 <ADC_StartOfConversion>:
  *         assertion of EOSEQ because the sequence is automatic relaunched
  * @param  ADCx: where x can be 1 to select the ADC1 peripheral.
  * @retval None
  */
void ADC_StartOfConversion(ADC_TypeDef* ADCx)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b082      	sub	sp, #8
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  ADCx->CR |= (uint32_t)ADC_CR_ADSTART;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	2204      	movs	r2, #4
 8001724:	431a      	orrs	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	609a      	str	r2, [r3, #8]
}
 800172a:	46c0      	nop			; (mov r8, r8)
 800172c:	46bd      	mov	sp, r7
 800172e:	b002      	add	sp, #8
 8001730:	bd80      	pop	{r7, pc}

08001732 <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for ADC channel.  
  * @param  ADCx: where x can be 1 to select the ADC1 peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	b082      	sub	sp, #8
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173e:	b29b      	uxth	r3, r3
}
 8001740:	0018      	movs	r0, r3
 8001742:	46bd      	mov	sp, r7
 8001744:	b002      	add	sp, #8
 8001746:	bd80      	pop	{r7, pc}

08001748 <ADC_GetFlagStatus>:
  *            @arg ADC_FLAG_ADSTP: ADC stop flag
  *            @arg ADC_FLAG_ADCAL: ADC Calibration flag
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint32_t ADC_FLAG)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8001752:	230f      	movs	r3, #15
 8001754:	18fb      	adds	r3, r7, r3
 8001756:	2200      	movs	r2, #0
 8001758:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0;
 800175a:	2300      	movs	r3, #0
 800175c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  if((uint32_t)(ADC_FLAG & 0x01000000))
 800175e:	683a      	ldr	r2, [r7, #0]
 8001760:	2380      	movs	r3, #128	; 0x80
 8001762:	045b      	lsls	r3, r3, #17
 8001764:	4013      	ands	r3, r2
 8001766:	d005      	beq.n	8001774 <ADC_GetFlagStatus+0x2c>
  {
    tmpreg = ADCx->CR & 0xFEFFFFFF;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	4a0d      	ldr	r2, [pc, #52]	; (80017a4 <ADC_GetFlagStatus+0x5c>)
 800176e:	4013      	ands	r3, r2
 8001770:	60bb      	str	r3, [r7, #8]
 8001772:	e002      	b.n	800177a <ADC_GetFlagStatus+0x32>
  }
  else
  {
    tmpreg = ADCx->ISR;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	60bb      	str	r3, [r7, #8]
  }
  
  /* Check the status of the specified ADC flag */
  if ((tmpreg & ADC_FLAG) != (uint32_t)RESET)
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	683a      	ldr	r2, [r7, #0]
 800177e:	4013      	ands	r3, r2
 8001780:	d004      	beq.n	800178c <ADC_GetFlagStatus+0x44>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 8001782:	230f      	movs	r3, #15
 8001784:	18fb      	adds	r3, r7, r3
 8001786:	2201      	movs	r2, #1
 8001788:	701a      	strb	r2, [r3, #0]
 800178a:	e003      	b.n	8001794 <ADC_GetFlagStatus+0x4c>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 800178c:	230f      	movs	r3, #15
 800178e:	18fb      	adds	r3, r7, r3
 8001790:	2200      	movs	r2, #0
 8001792:	701a      	strb	r2, [r3, #0]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 8001794:	230f      	movs	r3, #15
 8001796:	18fb      	adds	r3, r7, r3
 8001798:	781b      	ldrb	r3, [r3, #0]
}
 800179a:	0018      	movs	r0, r3
 800179c:	46bd      	mov	sp, r7
 800179e:	b004      	add	sp, #16
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	46c0      	nop			; (mov r8, r8)
 80017a4:	feffffff 	.word	0xfeffffff

080017a8 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b086      	sub	sp, #24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80017b2:	2300      	movs	r3, #0
 80017b4:	617b      	str	r3, [r7, #20]
 80017b6:	2300      	movs	r3, #0
 80017b8:	613b      	str	r3, [r7, #16]
 80017ba:	2300      	movs	r3, #0
 80017bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80017be:	2300      	movs	r3, #0
 80017c0:	617b      	str	r3, [r7, #20]
 80017c2:	e07c      	b.n	80018be <GPIO_Init+0x116>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80017c4:	2201      	movs	r2, #1
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	409a      	lsls	r2, r3
 80017ca:	0013      	movs	r3, r2
 80017cc:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	4013      	ands	r3, r2
 80017d6:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80017d8:	68fa      	ldr	r2, [r7, #12]
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d16b      	bne.n	80018b8 <GPIO_Init+0x110>
    {
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	791b      	ldrb	r3, [r3, #4]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d003      	beq.n	80017f0 <GPIO_Init+0x48>
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	791b      	ldrb	r3, [r3, #4]
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d134      	bne.n	800185a <GPIO_Init+0xb2>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	697a      	ldr	r2, [r7, #20]
 80017f6:	0052      	lsls	r2, r2, #1
 80017f8:	2103      	movs	r1, #3
 80017fa:	4091      	lsls	r1, r2
 80017fc:	000a      	movs	r2, r1
 80017fe:	43d2      	mvns	r2, r2
 8001800:	401a      	ands	r2, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	689a      	ldr	r2, [r3, #8]
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	795b      	ldrb	r3, [r3, #5]
 800180e:	0019      	movs	r1, r3
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	4099      	lsls	r1, r3
 8001816:	000b      	movs	r3, r1
 8001818:	431a      	orrs	r2, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	889b      	ldrh	r3, [r3, #4]
 8001822:	b29b      	uxth	r3, r3
 8001824:	697a      	ldr	r2, [r7, #20]
 8001826:	b292      	uxth	r2, r2
 8001828:	0011      	movs	r1, r2
 800182a:	2201      	movs	r2, #1
 800182c:	408a      	lsls	r2, r1
 800182e:	b292      	uxth	r2, r2
 8001830:	43d2      	mvns	r2, r2
 8001832:	b292      	uxth	r2, r2
 8001834:	4013      	ands	r3, r2
 8001836:	b29a      	uxth	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	889b      	ldrh	r3, [r3, #4]
 8001840:	b29a      	uxth	r2, r3
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	799b      	ldrb	r3, [r3, #6]
 8001846:	0019      	movs	r1, r3
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	b29b      	uxth	r3, r3
 800184c:	4099      	lsls	r1, r3
 800184e:	000b      	movs	r3, r1
 8001850:	b29b      	uxth	r3, r3
 8001852:	4313      	orrs	r3, r2
 8001854:	b29a      	uxth	r2, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	809a      	strh	r2, [r3, #4]
      }

      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	697a      	ldr	r2, [r7, #20]
 8001860:	0052      	lsls	r2, r2, #1
 8001862:	2103      	movs	r1, #3
 8001864:	4091      	lsls	r1, r2
 8001866:	000a      	movs	r2, r1
 8001868:	43d2      	mvns	r2, r2
 800186a:	401a      	ands	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	791b      	ldrb	r3, [r3, #4]
 8001878:	0019      	movs	r1, r3
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	4099      	lsls	r1, r3
 8001880:	000b      	movs	r3, r1
 8001882:	431a      	orrs	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	601a      	str	r2, [r3, #0]

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	697a      	ldr	r2, [r7, #20]
 800188e:	b292      	uxth	r2, r2
 8001890:	0052      	lsls	r2, r2, #1
 8001892:	2103      	movs	r1, #3
 8001894:	4091      	lsls	r1, r2
 8001896:	000a      	movs	r2, r1
 8001898:	43d2      	mvns	r2, r2
 800189a:	401a      	ands	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	68da      	ldr	r2, [r3, #12]
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	79db      	ldrb	r3, [r3, #7]
 80018a8:	0019      	movs	r1, r3
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	4099      	lsls	r1, r3
 80018b0:	000b      	movs	r3, r1
 80018b2:	431a      	orrs	r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	3301      	adds	r3, #1
 80018bc:	617b      	str	r3, [r7, #20]
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	2b0f      	cmp	r3, #15
 80018c2:	d800      	bhi.n	80018c6 <GPIO_Init+0x11e>
 80018c4:	e77e      	b.n	80017c4 <GPIO_Init+0x1c>
    }
  }
}
 80018c6:	46c0      	nop			; (mov r8, r8)
 80018c8:	46c0      	nop			; (mov r8, r8)
 80018ca:	46bd      	mov	sp, r7
 80018cc:	b006      	add	sp, #24
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <GPIO_PinAFConfig>:
  *         for the detailed mapping of the system and peripherals'alternate 
  *         function I/O pins.
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	0008      	movs	r0, r1
 80018da:	0011      	movs	r1, r2
 80018dc:	1cbb      	adds	r3, r7, #2
 80018de:	1c02      	adds	r2, r0, #0
 80018e0:	801a      	strh	r2, [r3, #0]
 80018e2:	1c7b      	adds	r3, r7, #1
 80018e4:	1c0a      	adds	r2, r1, #0
 80018e6:	701a      	strb	r2, [r3, #0]
  uint32_t temp = 0x00;
 80018e8:	2300      	movs	r3, #0
 80018ea:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80018ec:	2300      	movs	r3, #0
 80018ee:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80018f0:	1c7b      	adds	r3, r7, #1
 80018f2:	781a      	ldrb	r2, [r3, #0]
 80018f4:	1cbb      	adds	r3, r7, #2
 80018f6:	881b      	ldrh	r3, [r3, #0]
 80018f8:	2107      	movs	r1, #7
 80018fa:	400b      	ands	r3, r1
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	409a      	lsls	r2, r3
 8001900:	0013      	movs	r3, r2
 8001902:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8001904:	1cbb      	adds	r3, r7, #2
 8001906:	881b      	ldrh	r3, [r3, #0]
 8001908:	08db      	lsrs	r3, r3, #3
 800190a:	b29b      	uxth	r3, r3
 800190c:	001a      	movs	r2, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	3208      	adds	r2, #8
 8001912:	0092      	lsls	r2, r2, #2
 8001914:	58d3      	ldr	r3, [r2, r3]
 8001916:	1cba      	adds	r2, r7, #2
 8001918:	8812      	ldrh	r2, [r2, #0]
 800191a:	2107      	movs	r1, #7
 800191c:	400a      	ands	r2, r1
 800191e:	0092      	lsls	r2, r2, #2
 8001920:	210f      	movs	r1, #15
 8001922:	4091      	lsls	r1, r2
 8001924:	000a      	movs	r2, r1
 8001926:	43d2      	mvns	r2, r2
 8001928:	1cb9      	adds	r1, r7, #2
 800192a:	8809      	ldrh	r1, [r1, #0]
 800192c:	08c9      	lsrs	r1, r1, #3
 800192e:	b289      	uxth	r1, r1
 8001930:	0008      	movs	r0, r1
 8001932:	401a      	ands	r2, r3
 8001934:	0011      	movs	r1, r2
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	0002      	movs	r2, r0
 800193a:	3208      	adds	r2, #8
 800193c:	0092      	lsls	r2, r2, #2
 800193e:	50d1      	str	r1, [r2, r3]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8001940:	1cbb      	adds	r3, r7, #2
 8001942:	881b      	ldrh	r3, [r3, #0]
 8001944:	08db      	lsrs	r3, r3, #3
 8001946:	b29b      	uxth	r3, r3
 8001948:	001a      	movs	r2, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	3208      	adds	r2, #8
 800194e:	0092      	lsls	r2, r2, #2
 8001950:	58d3      	ldr	r3, [r2, r3]
 8001952:	68fa      	ldr	r2, [r7, #12]
 8001954:	4313      	orrs	r3, r2
 8001956:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8001958:	1cbb      	adds	r3, r7, #2
 800195a:	881b      	ldrh	r3, [r3, #0]
 800195c:	08db      	lsrs	r3, r3, #3
 800195e:	b29b      	uxth	r3, r3
 8001960:	001a      	movs	r2, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	3208      	adds	r2, #8
 8001966:	0092      	lsls	r2, r2, #2
 8001968:	68b9      	ldr	r1, [r7, #8]
 800196a:	50d1      	str	r1, [r2, r3]
}
 800196c:	46c0      	nop			; (mov r8, r8)
 800196e:	46bd      	mov	sp, r7
 8001970:	b004      	add	sp, #16
 8001972:	bd80      	pop	{r7, pc}

08001974 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00;
 800197c:	2300      	movs	r3, #0
 800197e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPriority));  
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	789b      	ldrb	r3, [r3, #2]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d039      	beq.n	80019fc <NVIC_Init+0x88>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02];
 8001988:	4a24      	ldr	r2, [pc, #144]	; (8001a1c <NVIC_Init+0xa8>)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	089b      	lsrs	r3, r3, #2
 8001990:	b2db      	uxtb	r3, r3
 8001992:	33c0      	adds	r3, #192	; 0xc0
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	589b      	ldr	r3, [r3, r2]
 8001998:	60fb      	str	r3, [r7, #12]
    tmppriority &= (uint32_t)(~(((uint32_t)0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8)));
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	001a      	movs	r2, r3
 80019a0:	2303      	movs	r3, #3
 80019a2:	4013      	ands	r3, r2
 80019a4:	00db      	lsls	r3, r3, #3
 80019a6:	22ff      	movs	r2, #255	; 0xff
 80019a8:	409a      	lsls	r2, r3
 80019aa:	0013      	movs	r3, r2
 80019ac:	43da      	mvns	r2, r3
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	4013      	ands	r3, r2
 80019b2:	60fb      	str	r3, [r7, #12]
    tmppriority |= (uint32_t)((((uint32_t)NVIC_InitStruct->NVIC_IRQChannelPriority << 6) & 0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8));    
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	785b      	ldrb	r3, [r3, #1]
 80019b8:	019b      	lsls	r3, r3, #6
 80019ba:	22ff      	movs	r2, #255	; 0xff
 80019bc:	401a      	ands	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	0019      	movs	r1, r3
 80019c4:	2303      	movs	r3, #3
 80019c6:	400b      	ands	r3, r1
 80019c8:	00db      	lsls	r3, r3, #3
 80019ca:	409a      	lsls	r2, r3
 80019cc:	0013      	movs	r3, r2
 80019ce:	68fa      	ldr	r2, [r7, #12]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	60fb      	str	r3, [r7, #12]
    
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02] = tmppriority;
 80019d4:	4911      	ldr	r1, [pc, #68]	; (8001a1c <NVIC_Init+0xa8>)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	089b      	lsrs	r3, r3, #2
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	33c0      	adds	r3, #192	; 0xc0
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	68fa      	ldr	r2, [r7, #12]
 80019e4:	505a      	str	r2, [r3, r1]
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	001a      	movs	r2, r3
 80019ec:	231f      	movs	r3, #31
 80019ee:	401a      	ands	r2, r3
 80019f0:	4b0a      	ldr	r3, [pc, #40]	; (8001a1c <NVIC_Init+0xa8>)
 80019f2:	2101      	movs	r1, #1
 80019f4:	4091      	lsls	r1, r2
 80019f6:	000a      	movs	r2, r1
 80019f8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80019fa:	e00a      	b.n	8001a12 <NVIC_Init+0x9e>
    NVIC->ICER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	001a      	movs	r2, r3
 8001a02:	231f      	movs	r3, #31
 8001a04:	4013      	ands	r3, r2
 8001a06:	4905      	ldr	r1, [pc, #20]	; (8001a1c <NVIC_Init+0xa8>)
 8001a08:	2201      	movs	r2, #1
 8001a0a:	409a      	lsls	r2, r3
 8001a0c:	0013      	movs	r3, r2
 8001a0e:	2280      	movs	r2, #128	; 0x80
 8001a10:	508b      	str	r3, [r1, r2]
}
 8001a12:	46c0      	nop			; (mov r8, r8)
 8001a14:	46bd      	mov	sp, r7
 8001a16:	b004      	add	sp, #16
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	46c0      	nop			; (mov r8, r8)
 8001a1c:	e000e100 	.word	0xe000e100

08001a20 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	000a      	movs	r2, r1
 8001a2a:	1cfb      	adds	r3, r7, #3
 8001a2c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001a2e:	1cfb      	adds	r3, r7, #3
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d006      	beq.n	8001a44 <RCC_AHBPeriphClockCmd+0x24>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8001a36:	4b09      	ldr	r3, [pc, #36]	; (8001a5c <RCC_AHBPeriphClockCmd+0x3c>)
 8001a38:	6959      	ldr	r1, [r3, #20]
 8001a3a:	4b08      	ldr	r3, [pc, #32]	; (8001a5c <RCC_AHBPeriphClockCmd+0x3c>)
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	615a      	str	r2, [r3, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8001a42:	e006      	b.n	8001a52 <RCC_AHBPeriphClockCmd+0x32>
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8001a44:	4b05      	ldr	r3, [pc, #20]	; (8001a5c <RCC_AHBPeriphClockCmd+0x3c>)
 8001a46:	695a      	ldr	r2, [r3, #20]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	43d9      	mvns	r1, r3
 8001a4c:	4b03      	ldr	r3, [pc, #12]	; (8001a5c <RCC_AHBPeriphClockCmd+0x3c>)
 8001a4e:	400a      	ands	r2, r1
 8001a50:	615a      	str	r2, [r3, #20]
}
 8001a52:	46c0      	nop			; (mov r8, r8)
 8001a54:	46bd      	mov	sp, r7
 8001a56:	b002      	add	sp, #8
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	46c0      	nop			; (mov r8, r8)
 8001a5c:	40021000 	.word	0x40021000

08001a60 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	000a      	movs	r2, r1
 8001a6a:	1cfb      	adds	r3, r7, #3
 8001a6c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001a6e:	1cfb      	adds	r3, r7, #3
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d006      	beq.n	8001a84 <RCC_APB2PeriphClockCmd+0x24>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001a76:	4b09      	ldr	r3, [pc, #36]	; (8001a9c <RCC_APB2PeriphClockCmd+0x3c>)
 8001a78:	6999      	ldr	r1, [r3, #24]
 8001a7a:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <RCC_APB2PeriphClockCmd+0x3c>)
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	619a      	str	r2, [r3, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8001a82:	e006      	b.n	8001a92 <RCC_APB2PeriphClockCmd+0x32>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001a84:	4b05      	ldr	r3, [pc, #20]	; (8001a9c <RCC_APB2PeriphClockCmd+0x3c>)
 8001a86:	699a      	ldr	r2, [r3, #24]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	43d9      	mvns	r1, r3
 8001a8c:	4b03      	ldr	r3, [pc, #12]	; (8001a9c <RCC_APB2PeriphClockCmd+0x3c>)
 8001a8e:	400a      	ands	r2, r1
 8001a90:	619a      	str	r2, [r3, #24]
}
 8001a92:	46c0      	nop			; (mov r8, r8)
 8001a94:	46bd      	mov	sp, r7
 8001a96:	b002      	add	sp, #8
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	46c0      	nop			; (mov r8, r8)
 8001a9c:	40021000 	.word	0x40021000

08001aa0 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	000a      	movs	r2, r1
 8001aaa:	1cfb      	adds	r3, r7, #3
 8001aac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001aae:	1cfb      	adds	r3, r7, #3
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d006      	beq.n	8001ac4 <RCC_APB2PeriphResetCmd+0x24>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8001ab6:	4b09      	ldr	r3, [pc, #36]	; (8001adc <RCC_APB2PeriphResetCmd+0x3c>)
 8001ab8:	68d9      	ldr	r1, [r3, #12]
 8001aba:	4b08      	ldr	r3, [pc, #32]	; (8001adc <RCC_APB2PeriphResetCmd+0x3c>)
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 8001ac2:	e006      	b.n	8001ad2 <RCC_APB2PeriphResetCmd+0x32>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8001ac4:	4b05      	ldr	r3, [pc, #20]	; (8001adc <RCC_APB2PeriphResetCmd+0x3c>)
 8001ac6:	68da      	ldr	r2, [r3, #12]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	43d9      	mvns	r1, r3
 8001acc:	4b03      	ldr	r3, [pc, #12]	; (8001adc <RCC_APB2PeriphResetCmd+0x3c>)
 8001ace:	400a      	ands	r2, r1
 8001ad0:	60da      	str	r2, [r3, #12]
}
 8001ad2:	46c0      	nop			; (mov r8, r8)
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	b002      	add	sp, #8
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	46c0      	nop			; (mov r8, r8)
 8001adc:	40021000 	.word	0x40021000

08001ae0 <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for
  *         the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8001aea:	210e      	movs	r1, #14
 8001aec:	187b      	adds	r3, r7, r1
 8001aee:	2200      	movs	r2, #0
 8001af0:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8001af2:	187b      	adds	r3, r7, r1
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	8812      	ldrh	r2, [r2, #0]
 8001af8:	801a      	strh	r2, [r3, #0]

  if((TIMx == TIM1) || (TIMx == TIM2) || (TIMx == TIM3))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a2a      	ldr	r2, [pc, #168]	; (8001ba8 <TIM_TimeBaseInit+0xc8>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d008      	beq.n	8001b14 <TIM_TimeBaseInit+0x34>
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	2380      	movs	r3, #128	; 0x80
 8001b06:	05db      	lsls	r3, r3, #23
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d003      	beq.n	8001b14 <TIM_TimeBaseInit+0x34>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	4a27      	ldr	r2, [pc, #156]	; (8001bac <TIM_TimeBaseInit+0xcc>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d10d      	bne.n	8001b30 <TIM_TimeBaseInit+0x50>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8001b14:	200e      	movs	r0, #14
 8001b16:	183b      	adds	r3, r7, r0
 8001b18:	183a      	adds	r2, r7, r0
 8001b1a:	8812      	ldrh	r2, [r2, #0]
 8001b1c:	2170      	movs	r1, #112	; 0x70
 8001b1e:	438a      	bics	r2, r1
 8001b20:	801a      	strh	r2, [r3, #0]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	8859      	ldrh	r1, [r3, #2]
 8001b26:	183b      	adds	r3, r7, r0
 8001b28:	183a      	adds	r2, r7, r0
 8001b2a:	8812      	ldrh	r2, [r2, #0]
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	801a      	strh	r2, [r3, #0]
  }
 
  if(TIMx != TIM6)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	4a1f      	ldr	r2, [pc, #124]	; (8001bb0 <TIM_TimeBaseInit+0xd0>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d00d      	beq.n	8001b54 <TIM_TimeBaseInit+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 8001b38:	200e      	movs	r0, #14
 8001b3a:	183b      	adds	r3, r7, r0
 8001b3c:	183a      	adds	r2, r7, r0
 8001b3e:	8812      	ldrh	r2, [r2, #0]
 8001b40:	491c      	ldr	r1, [pc, #112]	; (8001bb4 <TIM_TimeBaseInit+0xd4>)
 8001b42:	400a      	ands	r2, r1
 8001b44:	801a      	strh	r2, [r3, #0]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	8919      	ldrh	r1, [r3, #8]
 8001b4a:	183b      	adds	r3, r7, r0
 8001b4c:	183a      	adds	r2, r7, r0
 8001b4e:	8812      	ldrh	r2, [r2, #0]
 8001b50:	430a      	orrs	r2, r1
 8001b52:	801a      	strh	r2, [r3, #0]
  }

  TIMx->CR1 = tmpcr1;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	220e      	movs	r2, #14
 8001b58:	18ba      	adds	r2, r7, r2
 8001b5a:	8812      	ldrh	r2, [r2, #0]
 8001b5c:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685a      	ldr	r2, [r3, #4]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	881a      	ldrh	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a0d      	ldr	r2, [pc, #52]	; (8001ba8 <TIM_TimeBaseInit+0xc8>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d00b      	beq.n	8001b8e <TIM_TimeBaseInit+0xae>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a0f      	ldr	r2, [pc, #60]	; (8001bb8 <TIM_TimeBaseInit+0xd8>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d007      	beq.n	8001b8e <TIM_TimeBaseInit+0xae>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a0e      	ldr	r2, [pc, #56]	; (8001bbc <TIM_TimeBaseInit+0xdc>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d003      	beq.n	8001b8e <TIM_TimeBaseInit+0xae>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a0d      	ldr	r2, [pc, #52]	; (8001bc0 <TIM_TimeBaseInit+0xe0>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d104      	bne.n	8001b98 <TIM_TimeBaseInit+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	7a9b      	ldrb	r3, [r3, #10]
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	829a      	strh	r2, [r3, #20]
}
 8001b9e:	46c0      	nop			; (mov r8, r8)
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	b004      	add	sp, #16
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	46c0      	nop			; (mov r8, r8)
 8001ba8:	40012c00 	.word	0x40012c00
 8001bac:	40000400 	.word	0x40000400
 8001bb0:	40001000 	.word	0x40001000
 8001bb4:	fffffcff 	.word	0xfffffcff
 8001bb8:	40014000 	.word	0x40014000
 8001bbc:	40014400 	.word	0x40014400
 8001bc0:	40014800 	.word	0x40014800

08001bc4 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	000a      	movs	r2, r1
 8001bce:	1cfb      	adds	r3, r7, #3
 8001bd0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001bd2:	1cfb      	adds	r3, r7, #3
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d008      	beq.n	8001bec <TIM_Cmd+0x28>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	881b      	ldrh	r3, [r3, #0]
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	2201      	movs	r2, #1
 8001be2:	4313      	orrs	r3, r2
 8001be4:	b29a      	uxth	r2, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 8001bea:	e007      	b.n	8001bfc <TIM_Cmd+0x38>
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	881b      	ldrh	r3, [r3, #0]
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	4393      	bics	r3, r2
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	801a      	strh	r2, [r3, #0]
}
 8001bfc:	46c0      	nop			; (mov r8, r8)
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	b002      	add	sp, #8
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <TIM_BDTRConfig>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval None
  */
void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	881a      	ldrh	r2, [r3, #0]
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	885b      	ldrh	r3, [r3, #2]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	889b      	ldrh	r3, [r3, #4]
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	88db      	ldrh	r3, [r3, #6]
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8001c26:	4313      	orrs	r3, r2
 8001c28:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	891b      	ldrh	r3, [r3, #8]
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	895b      	ldrh	r3, [r3, #10]
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8001c36:	4313      	orrs	r3, r2
 8001c38:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	899b      	ldrh	r3, [r3, #12]
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	b299      	uxth	r1, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2244      	movs	r2, #68	; 0x44
 8001c46:	5299      	strh	r1, [r3, r2]
}
 8001c48:	46c0      	nop			; (mov r8, r8)
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	b002      	add	sp, #8
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	000a      	movs	r2, r1
 8001c5a:	1cfb      	adds	r3, r7, #3
 8001c5c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001c5e:	1cfb      	adds	r3, r7, #3
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d00a      	beq.n	8001c7c <TIM_CtrlPWMOutputs+0x2c>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2244      	movs	r2, #68	; 0x44
 8001c6a:	5a9b      	ldrh	r3, [r3, r2]
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	4a0a      	ldr	r2, [pc, #40]	; (8001c98 <TIM_CtrlPWMOutputs+0x48>)
 8001c70:	4313      	orrs	r3, r2
 8001c72:	b299      	uxth	r1, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2244      	movs	r2, #68	; 0x44
 8001c78:	5299      	strh	r1, [r3, r2]
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
  }  
}
 8001c7a:	e009      	b.n	8001c90 <TIM_CtrlPWMOutputs+0x40>
    TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2244      	movs	r2, #68	; 0x44
 8001c80:	5a9b      	ldrh	r3, [r3, r2]
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	045b      	lsls	r3, r3, #17
 8001c86:	0c5b      	lsrs	r3, r3, #17
 8001c88:	b299      	uxth	r1, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2244      	movs	r2, #68	; 0x44
 8001c8e:	5299      	strh	r1, [r3, r2]
}
 8001c90:	46c0      	nop			; (mov r8, r8)
 8001c92:	46bd      	mov	sp, r7
 8001c94:	b002      	add	sp, #8
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	ffff8000 	.word	0xffff8000

08001c9c <TIM_OC1Init>:
  *         that contains the configuration information for the specified TIM 
  *         peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001c9c:	b590      	push	{r4, r7, lr}
 8001c9e:	b085      	sub	sp, #20
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8001ca6:	210a      	movs	r1, #10
 8001ca8:	187b      	adds	r3, r7, r1
 8001caa:	2200      	movs	r2, #0
 8001cac:	801a      	strh	r2, [r3, #0]
 8001cae:	240e      	movs	r4, #14
 8001cb0:	193b      	adds	r3, r7, r4
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	801a      	strh	r2, [r3, #0]
 8001cb6:	200c      	movs	r0, #12
 8001cb8:	183b      	adds	r3, r7, r0
 8001cba:	2200      	movs	r2, #0
 8001cbc:	801a      	strh	r2, [r3, #0]
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	8c1b      	ldrh	r3, [r3, #32]
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	4393      	bics	r3, r2
 8001cc8:	b29a      	uxth	r2, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	841a      	strh	r2, [r3, #32]
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001cce:	193b      	adds	r3, r7, r4
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	8c12      	ldrh	r2, [r2, #32]
 8001cd4:	801a      	strh	r2, [r3, #0]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001cd6:	183b      	adds	r3, r7, r0
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	8892      	ldrh	r2, [r2, #4]
 8001cdc:	801a      	strh	r2, [r3, #0]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001cde:	187b      	adds	r3, r7, r1
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	8b12      	ldrh	r2, [r2, #24]
 8001ce4:	801a      	strh	r2, [r3, #0]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC1M));
 8001ce6:	187b      	adds	r3, r7, r1
 8001ce8:	0008      	movs	r0, r1
 8001cea:	187a      	adds	r2, r7, r1
 8001cec:	8812      	ldrh	r2, [r2, #0]
 8001cee:	2170      	movs	r1, #112	; 0x70
 8001cf0:	438a      	bics	r2, r1
 8001cf2:	801a      	strh	r2, [r3, #0]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 8001cf4:	183b      	adds	r3, r7, r0
 8001cf6:	183a      	adds	r2, r7, r0
 8001cf8:	8812      	ldrh	r2, [r2, #0]
 8001cfa:	2103      	movs	r1, #3
 8001cfc:	438a      	bics	r2, r1
 8001cfe:	801a      	strh	r2, [r3, #0]

  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	8819      	ldrh	r1, [r3, #0]
 8001d04:	183b      	adds	r3, r7, r0
 8001d06:	183a      	adds	r2, r7, r0
 8001d08:	8812      	ldrh	r2, [r2, #0]
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	801a      	strh	r2, [r3, #0]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 8001d0e:	0020      	movs	r0, r4
 8001d10:	183b      	adds	r3, r7, r0
 8001d12:	183a      	adds	r2, r7, r0
 8001d14:	8812      	ldrh	r2, [r2, #0]
 8001d16:	2102      	movs	r1, #2
 8001d18:	438a      	bics	r2, r1
 8001d1a:	801a      	strh	r2, [r3, #0]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	8999      	ldrh	r1, [r3, #12]
 8001d20:	183b      	adds	r3, r7, r0
 8001d22:	183a      	adds	r2, r7, r0
 8001d24:	8812      	ldrh	r2, [r2, #0]
 8001d26:	430a      	orrs	r2, r1
 8001d28:	801a      	strh	r2, [r3, #0]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	8859      	ldrh	r1, [r3, #2]
 8001d2e:	183b      	adds	r3, r7, r0
 8001d30:	183a      	adds	r2, r7, r0
 8001d32:	8812      	ldrh	r2, [r2, #0]
 8001d34:	430a      	orrs	r2, r1
 8001d36:	801a      	strh	r2, [r3, #0]
    
  if((TIMx == TIM1) || (TIMx == TIM15) || (TIMx == TIM16) || (TIMx == TIM17))
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4a2e      	ldr	r2, [pc, #184]	; (8001df4 <TIM_OC1Init+0x158>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d00b      	beq.n	8001d58 <TIM_OC1Init+0xbc>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	4a2d      	ldr	r2, [pc, #180]	; (8001df8 <TIM_OC1Init+0x15c>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d007      	beq.n	8001d58 <TIM_OC1Init+0xbc>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4a2c      	ldr	r2, [pc, #176]	; (8001dfc <TIM_OC1Init+0x160>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d003      	beq.n	8001d58 <TIM_OC1Init+0xbc>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4a2b      	ldr	r2, [pc, #172]	; (8001e00 <TIM_OC1Init+0x164>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d135      	bne.n	8001dc4 <TIM_OC1Init+0x128>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
 8001d58:	200e      	movs	r0, #14
 8001d5a:	183b      	adds	r3, r7, r0
 8001d5c:	183a      	adds	r2, r7, r0
 8001d5e:	8812      	ldrh	r2, [r2, #0]
 8001d60:	2108      	movs	r1, #8
 8001d62:	438a      	bics	r2, r1
 8001d64:	801a      	strh	r2, [r3, #0]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	89d9      	ldrh	r1, [r3, #14]
 8001d6a:	183b      	adds	r3, r7, r0
 8001d6c:	183a      	adds	r2, r7, r0
 8001d6e:	8812      	ldrh	r2, [r2, #0]
 8001d70:	430a      	orrs	r2, r1
 8001d72:	801a      	strh	r2, [r3, #0]
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
 8001d74:	183b      	adds	r3, r7, r0
 8001d76:	183a      	adds	r2, r7, r0
 8001d78:	8812      	ldrh	r2, [r2, #0]
 8001d7a:	2104      	movs	r1, #4
 8001d7c:	438a      	bics	r2, r1
 8001d7e:	801a      	strh	r2, [r3, #0]
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	8899      	ldrh	r1, [r3, #4]
 8001d84:	183b      	adds	r3, r7, r0
 8001d86:	183a      	adds	r2, r7, r0
 8001d88:	8812      	ldrh	r2, [r2, #0]
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	801a      	strh	r2, [r3, #0]
    
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1));
 8001d8e:	200c      	movs	r0, #12
 8001d90:	183b      	adds	r3, r7, r0
 8001d92:	183a      	adds	r2, r7, r0
 8001d94:	8812      	ldrh	r2, [r2, #0]
 8001d96:	491b      	ldr	r1, [pc, #108]	; (8001e04 <TIM_OC1Init+0x168>)
 8001d98:	400a      	ands	r2, r1
 8001d9a:	801a      	strh	r2, [r3, #0]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
 8001d9c:	183b      	adds	r3, r7, r0
 8001d9e:	183a      	adds	r2, r7, r0
 8001da0:	8812      	ldrh	r2, [r2, #0]
 8001da2:	4919      	ldr	r1, [pc, #100]	; (8001e08 <TIM_OC1Init+0x16c>)
 8001da4:	400a      	ands	r2, r1
 8001da6:	801a      	strh	r2, [r3, #0]
    
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	8a19      	ldrh	r1, [r3, #16]
 8001dac:	183b      	adds	r3, r7, r0
 8001dae:	183a      	adds	r2, r7, r0
 8001db0:	8812      	ldrh	r2, [r2, #0]
 8001db2:	430a      	orrs	r2, r1
 8001db4:	801a      	strh	r2, [r3, #0]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	8a59      	ldrh	r1, [r3, #18]
 8001dba:	183b      	adds	r3, r7, r0
 8001dbc:	183a      	adds	r2, r7, r0
 8001dbe:	8812      	ldrh	r2, [r2, #0]
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	801a      	strh	r2, [r3, #0]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	220c      	movs	r2, #12
 8001dc8:	18ba      	adds	r2, r7, r2
 8001dca:	8812      	ldrh	r2, [r2, #0]
 8001dcc:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	220a      	movs	r2, #10
 8001dd2:	18ba      	adds	r2, r7, r2
 8001dd4:	8812      	ldrh	r2, [r2, #0]
 8001dd6:	831a      	strh	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	689a      	ldr	r2, [r3, #8]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	635a      	str	r2, [r3, #52]	; 0x34
 
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	220e      	movs	r2, #14
 8001de4:	18ba      	adds	r2, r7, r2
 8001de6:	8812      	ldrh	r2, [r2, #0]
 8001de8:	841a      	strh	r2, [r3, #32]
}
 8001dea:	46c0      	nop			; (mov r8, r8)
 8001dec:	46bd      	mov	sp, r7
 8001dee:	b005      	add	sp, #20
 8001df0:	bd90      	pop	{r4, r7, pc}
 8001df2:	46c0      	nop			; (mov r8, r8)
 8001df4:	40012c00 	.word	0x40012c00
 8001df8:	40014000 	.word	0x40014000
 8001dfc:	40014400 	.word	0x40014400
 8001e00:	40014800 	.word	0x40014800
 8001e04:	fffffeff 	.word	0xfffffeff
 8001e08:	fffffdff 	.word	0xfffffdff

08001e0c <TIM_OC2Init>:
  *         that contains the configuration information for the specified TIM 
  *         peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001e0c:	b590      	push	{r4, r7, lr}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8001e16:	210a      	movs	r1, #10
 8001e18:	187b      	adds	r3, r7, r1
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	801a      	strh	r2, [r3, #0]
 8001e1e:	240e      	movs	r4, #14
 8001e20:	193b      	adds	r3, r7, r4
 8001e22:	2200      	movs	r2, #0
 8001e24:	801a      	strh	r2, [r3, #0]
 8001e26:	200c      	movs	r0, #12
 8001e28:	183b      	adds	r3, r7, r0
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	801a      	strh	r2, [r3, #0]
  assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
   /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	8c1b      	ldrh	r3, [r3, #32]
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	2210      	movs	r2, #16
 8001e36:	4393      	bics	r3, r2
 8001e38:	b29a      	uxth	r2, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8001e3e:	193b      	adds	r3, r7, r4
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	8c12      	ldrh	r2, [r2, #32]
 8001e44:	801a      	strh	r2, [r3, #0]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e46:	183b      	adds	r3, r7, r0
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	8892      	ldrh	r2, [r2, #4]
 8001e4c:	801a      	strh	r2, [r3, #0]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001e4e:	187b      	adds	r3, r7, r1
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	8b12      	ldrh	r2, [r2, #24]
 8001e54:	801a      	strh	r2, [r3, #0]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC2M));
 8001e56:	187b      	adds	r3, r7, r1
 8001e58:	0008      	movs	r0, r1
 8001e5a:	187a      	adds	r2, r7, r1
 8001e5c:	8812      	ldrh	r2, [r2, #0]
 8001e5e:	4946      	ldr	r1, [pc, #280]	; (8001f78 <TIM_OC2Init+0x16c>)
 8001e60:	400a      	ands	r2, r1
 8001e62:	801a      	strh	r2, [r3, #0]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
 8001e64:	183b      	adds	r3, r7, r0
 8001e66:	183a      	adds	r2, r7, r0
 8001e68:	8812      	ldrh	r2, [r2, #0]
 8001e6a:	4944      	ldr	r1, [pc, #272]	; (8001f7c <TIM_OC2Init+0x170>)
 8001e6c:	400a      	ands	r2, r1
 8001e6e:	801a      	strh	r2, [r3, #0]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	881b      	ldrh	r3, [r3, #0]
 8001e74:	021b      	lsls	r3, r3, #8
 8001e76:	b299      	uxth	r1, r3
 8001e78:	183b      	adds	r3, r7, r0
 8001e7a:	183a      	adds	r2, r7, r0
 8001e7c:	8812      	ldrh	r2, [r2, #0]
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	801a      	strh	r2, [r3, #0]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
 8001e82:	0020      	movs	r0, r4
 8001e84:	183b      	adds	r3, r7, r0
 8001e86:	183a      	adds	r2, r7, r0
 8001e88:	8812      	ldrh	r2, [r2, #0]
 8001e8a:	2120      	movs	r1, #32
 8001e8c:	438a      	bics	r2, r1
 8001e8e:	801a      	strh	r2, [r3, #0]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	899b      	ldrh	r3, [r3, #12]
 8001e94:	011b      	lsls	r3, r3, #4
 8001e96:	b299      	uxth	r1, r3
 8001e98:	183b      	adds	r3, r7, r0
 8001e9a:	183a      	adds	r2, r7, r0
 8001e9c:	8812      	ldrh	r2, [r2, #0]
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	801a      	strh	r2, [r3, #0]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	885b      	ldrh	r3, [r3, #2]
 8001ea6:	011b      	lsls	r3, r3, #4
 8001ea8:	b299      	uxth	r1, r3
 8001eaa:	183b      	adds	r3, r7, r0
 8001eac:	183a      	adds	r2, r7, r0
 8001eae:	8812      	ldrh	r2, [r2, #0]
 8001eb0:	430a      	orrs	r2, r1
 8001eb2:	801a      	strh	r2, [r3, #0]
    
  if((TIMx == TIM1) || (TIMx == TIM15))
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a32      	ldr	r2, [pc, #200]	; (8001f80 <TIM_OC2Init+0x174>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d003      	beq.n	8001ec4 <TIM_OC2Init+0xb8>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4a31      	ldr	r2, [pc, #196]	; (8001f84 <TIM_OC2Init+0x178>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d141      	bne.n	8001f48 <TIM_OC2Init+0x13c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Ouput Compare State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2));
 8001ec4:	200c      	movs	r0, #12
 8001ec6:	183b      	adds	r3, r7, r0
 8001ec8:	183a      	adds	r2, r7, r0
 8001eca:	8812      	ldrh	r2, [r2, #0]
 8001ecc:	492e      	ldr	r1, [pc, #184]	; (8001f88 <TIM_OC2Init+0x17c>)
 8001ece:	400a      	ands	r2, r1
 8001ed0:	801a      	strh	r2, [r3, #0]
    
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	8a1b      	ldrh	r3, [r3, #16]
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	b299      	uxth	r1, r3
 8001eda:	183b      	adds	r3, r7, r0
 8001edc:	183a      	adds	r2, r7, r0
 8001ede:	8812      	ldrh	r2, [r2, #0]
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	801a      	strh	r2, [r3, #0]
    
    if (TIMx == TIM1)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4a26      	ldr	r2, [pc, #152]	; (8001f80 <TIM_OC2Init+0x174>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d12d      	bne.n	8001f48 <TIM_OC2Init+0x13c>
      assert_param(IS_TIM_OUTPUTN_STATE(TIM_OCInitStruct->TIM_OutputNState));
      assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
      assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
      
      /* Reset the Output N Polarity level */
      tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NP));
 8001eec:	240e      	movs	r4, #14
 8001eee:	193b      	adds	r3, r7, r4
 8001ef0:	193a      	adds	r2, r7, r4
 8001ef2:	8812      	ldrh	r2, [r2, #0]
 8001ef4:	2180      	movs	r1, #128	; 0x80
 8001ef6:	438a      	bics	r2, r1
 8001ef8:	801a      	strh	r2, [r3, #0]
      /* Set the Output N Polarity */
      tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	89db      	ldrh	r3, [r3, #14]
 8001efe:	011b      	lsls	r3, r3, #4
 8001f00:	b299      	uxth	r1, r3
 8001f02:	193b      	adds	r3, r7, r4
 8001f04:	193a      	adds	r2, r7, r4
 8001f06:	8812      	ldrh	r2, [r2, #0]
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	801a      	strh	r2, [r3, #0]
      
      /* Reset the Output N State */
      tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NE));    
 8001f0c:	193b      	adds	r3, r7, r4
 8001f0e:	193a      	adds	r2, r7, r4
 8001f10:	8812      	ldrh	r2, [r2, #0]
 8001f12:	2140      	movs	r1, #64	; 0x40
 8001f14:	438a      	bics	r2, r1
 8001f16:	801a      	strh	r2, [r3, #0]
      /* Set the Output N State */
      tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	889b      	ldrh	r3, [r3, #4]
 8001f1c:	011b      	lsls	r3, r3, #4
 8001f1e:	b299      	uxth	r1, r3
 8001f20:	193b      	adds	r3, r7, r4
 8001f22:	193a      	adds	r2, r7, r4
 8001f24:	8812      	ldrh	r2, [r2, #0]
 8001f26:	430a      	orrs	r2, r1
 8001f28:	801a      	strh	r2, [r3, #0]
      
      /* Reset the Output Compare N IDLE State */
      tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2N));
 8001f2a:	183b      	adds	r3, r7, r0
 8001f2c:	183a      	adds	r2, r7, r0
 8001f2e:	8812      	ldrh	r2, [r2, #0]
 8001f30:	4916      	ldr	r1, [pc, #88]	; (8001f8c <TIM_OC2Init+0x180>)
 8001f32:	400a      	ands	r2, r1
 8001f34:	801a      	strh	r2, [r3, #0]
      
      /* Set the Output N Idle state */
      tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	8a5b      	ldrh	r3, [r3, #18]
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	b299      	uxth	r1, r3
 8001f3e:	183b      	adds	r3, r7, r0
 8001f40:	183a      	adds	r2, r7, r0
 8001f42:	8812      	ldrh	r2, [r2, #0]
 8001f44:	430a      	orrs	r2, r1
 8001f46:	801a      	strh	r2, [r3, #0]
    }
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	220c      	movs	r2, #12
 8001f4c:	18ba      	adds	r2, r7, r2
 8001f4e:	8812      	ldrh	r2, [r2, #0]
 8001f50:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	220a      	movs	r2, #10
 8001f56:	18ba      	adds	r2, r7, r2
 8001f58:	8812      	ldrh	r2, [r2, #0]
 8001f5a:	831a      	strh	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	220e      	movs	r2, #14
 8001f68:	18ba      	adds	r2, r7, r2
 8001f6a:	8812      	ldrh	r2, [r2, #0]
 8001f6c:	841a      	strh	r2, [r3, #32]
}
 8001f6e:	46c0      	nop			; (mov r8, r8)
 8001f70:	46bd      	mov	sp, r7
 8001f72:	b005      	add	sp, #20
 8001f74:	bd90      	pop	{r4, r7, pc}
 8001f76:	46c0      	nop			; (mov r8, r8)
 8001f78:	ffff8fff 	.word	0xffff8fff
 8001f7c:	fffffcff 	.word	0xfffffcff
 8001f80:	40012c00 	.word	0x40012c00
 8001f84:	40014000 	.word	0x40014000
 8001f88:	fffffbff 	.word	0xfffffbff
 8001f8c:	fffff7ff 	.word	0xfffff7ff

08001f90 <TIM_SetCompare1>:
  * @note   TIM2 is not applicable for STM32F030 devices.  
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint32_t Compare1)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  
  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001fa0:	46c0      	nop			; (mov r8, r8)
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	b002      	add	sp, #8
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <TIM_SetCompare2>:
  * @note   TIM2 is not applicable for STM32F030 devices.  
  * @param  Compare2: specifies the Capture Compare2 register new value.
  * @retval None
  */
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint32_t Compare2)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  
  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	683a      	ldr	r2, [r7, #0]
 8001fb6:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001fb8:	46c0      	nop			; (mov r8, r8)
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	b002      	add	sp, #8
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	0008      	movs	r0, r1
 8001fca:	0011      	movs	r1, r2
 8001fcc:	1cbb      	adds	r3, r7, #2
 8001fce:	1c02      	adds	r2, r0, #0
 8001fd0:	801a      	strh	r2, [r3, #0]
 8001fd2:	1c7b      	adds	r3, r7, #1
 8001fd4:	1c0a      	adds	r2, r1, #0
 8001fd6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001fd8:	1c7b      	adds	r3, r7, #1
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d009      	beq.n	8001ff4 <TIM_ITConfig+0x34>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	899b      	ldrh	r3, [r3, #12]
 8001fe4:	b29a      	uxth	r2, r3
 8001fe6:	1cbb      	adds	r3, r7, #2
 8001fe8:	881b      	ldrh	r3, [r3, #0]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	b29a      	uxth	r2, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 8001ff2:	e00a      	b.n	800200a <TIM_ITConfig+0x4a>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	899b      	ldrh	r3, [r3, #12]
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	1cba      	adds	r2, r7, #2
 8001ffc:	8812      	ldrh	r2, [r2, #0]
 8001ffe:	43d2      	mvns	r2, r2
 8002000:	b292      	uxth	r2, r2
 8002002:	4013      	ands	r3, r2
 8002004:	b29a      	uxth	r2, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	819a      	strh	r2, [r3, #12]
}
 800200a:	46c0      	nop			; (mov r8, r8)
 800200c:	46bd      	mov	sp, r7
 800200e:	b002      	add	sp, #8
 8002010:	bd80      	pop	{r7, pc}

08002012 <TIM_ClearFlag>:
  * @note   TIM_FLAG_COM is used only with TIM1, TIM15, TIM16 and TIM17.
  *
  * @retval None
  */
void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{  
 8002012:	b580      	push	{r7, lr}
 8002014:	b082      	sub	sp, #8
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
 800201a:	000a      	movs	r2, r1
 800201c:	1cbb      	adds	r3, r7, #2
 800201e:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_CLEAR_FLAG(TIM_FLAG));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
 8002020:	1cbb      	adds	r3, r7, #2
 8002022:	881b      	ldrh	r3, [r3, #0]
 8002024:	43db      	mvns	r3, r3
 8002026:	b29a      	uxth	r2, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	821a      	strh	r2, [r3, #16]
}
 800202c:	46c0      	nop			; (mov r8, r8)
 800202e:	46bd      	mov	sp, r7
 8002030:	b002      	add	sp, #8
 8002032:	bd80      	pop	{r7, pc}

08002034 <TIM_GetITStatus>:
  * @note   TIM_IT_COM is used only with TIM1, TIM15, TIM16 and TIM17.
  *
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8002034:	b5b0      	push	{r4, r5, r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	000a      	movs	r2, r1
 800203e:	1cbb      	adds	r3, r7, #2
 8002040:	801a      	strh	r2, [r3, #0]
  ITStatus bitstatus = RESET;  
 8002042:	250f      	movs	r5, #15
 8002044:	197b      	adds	r3, r7, r5
 8002046:	2200      	movs	r2, #0
 8002048:	701a      	strb	r2, [r3, #0]
  uint16_t itstatus = 0x0, itenable = 0x0;
 800204a:	200c      	movs	r0, #12
 800204c:	183b      	adds	r3, r7, r0
 800204e:	2200      	movs	r2, #0
 8002050:	801a      	strh	r2, [r3, #0]
 8002052:	240a      	movs	r4, #10
 8002054:	193b      	adds	r3, r7, r4
 8002056:	2200      	movs	r2, #0
 8002058:	801a      	strh	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	8a1b      	ldrh	r3, [r3, #16]
 800205e:	b29a      	uxth	r2, r3
 8002060:	183b      	adds	r3, r7, r0
 8002062:	1cb9      	adds	r1, r7, #2
 8002064:	8809      	ldrh	r1, [r1, #0]
 8002066:	400a      	ands	r2, r1
 8002068:	801a      	strh	r2, [r3, #0]
  
  itenable = TIMx->DIER & TIM_IT;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	899b      	ldrh	r3, [r3, #12]
 800206e:	b29a      	uxth	r2, r3
 8002070:	193b      	adds	r3, r7, r4
 8002072:	1cb9      	adds	r1, r7, #2
 8002074:	8809      	ldrh	r1, [r1, #0]
 8002076:	400a      	ands	r2, r1
 8002078:	801a      	strh	r2, [r3, #0]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 800207a:	183b      	adds	r3, r7, r0
 800207c:	881b      	ldrh	r3, [r3, #0]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d007      	beq.n	8002092 <TIM_GetITStatus+0x5e>
 8002082:	193b      	adds	r3, r7, r4
 8002084:	881b      	ldrh	r3, [r3, #0]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d003      	beq.n	8002092 <TIM_GetITStatus+0x5e>
  {
    bitstatus = SET;
 800208a:	197b      	adds	r3, r7, r5
 800208c:	2201      	movs	r2, #1
 800208e:	701a      	strb	r2, [r3, #0]
 8002090:	e003      	b.n	800209a <TIM_GetITStatus+0x66>
  }
  else
  {
    bitstatus = RESET;
 8002092:	230f      	movs	r3, #15
 8002094:	18fb      	adds	r3, r7, r3
 8002096:	2200      	movs	r2, #0
 8002098:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800209a:	230f      	movs	r3, #15
 800209c:	18fb      	adds	r3, r7, r3
 800209e:	781b      	ldrb	r3, [r3, #0]
}
 80020a0:	0018      	movs	r0, r3
 80020a2:	46bd      	mov	sp, r7
 80020a4:	b004      	add	sp, #16
 80020a6:	bdb0      	pop	{r4, r5, r7, pc}

080020a8 <main>:

extern int16_t Read_ADC_Pic;
extern uint16_t i;
extern float Ext_K;

int main(void) {
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0

	Init_PID(K_P * SCALING_FACTOR, K_I * SCALING_FACTOR, K_D * SCALING_FACTOR,
 80020ac:	4b3a      	ldr	r3, [pc, #232]	; (8002198 <main+0xf0>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	2100      	movs	r1, #0
 80020b2:	2010      	movs	r0, #16
 80020b4:	f7ff f9be 	bl	8001434 <Init_PID>
			&Pid_Structure);

	TIM_Config();
 80020b8:	f000 f88e 	bl	80021d8 <TIM_Config>
	ADC_Config();
 80020bc:	f000 f976 	bl	80023ac <ADC_Config>

	GPIOA->BRR |= (1 << 15);
 80020c0:	2390      	movs	r3, #144	; 0x90
 80020c2:	05db      	lsls	r3, r3, #23
 80020c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020c6:	b29a      	uxth	r2, r3
 80020c8:	2390      	movs	r3, #144	; 0x90
 80020ca:	05db      	lsls	r3, r3, #23
 80020cc:	4933      	ldr	r1, [pc, #204]	; (800219c <main+0xf4>)
 80020ce:	430a      	orrs	r2, r1
 80020d0:	b292      	uxth	r2, r2
 80020d2:	851a      	strh	r2, [r3, #40]	; 0x28
	while (1) {

		if (Read_ADC_Pic > 2000 && Read_ADC_Pic < 2100) {
 80020d4:	4b32      	ldr	r3, [pc, #200]	; (80021a0 <main+0xf8>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	5e9a      	ldrsh	r2, [r3, r2]
 80020da:	23fa      	movs	r3, #250	; 0xfa
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	429a      	cmp	r2, r3
 80020e0:	dd0a      	ble.n	80020f8 <main+0x50>
 80020e2:	4b2f      	ldr	r3, [pc, #188]	; (80021a0 <main+0xf8>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	5e9b      	ldrsh	r3, [r3, r2]
 80020e8:	4a2e      	ldr	r2, [pc, #184]	; (80021a4 <main+0xfc>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	dc04      	bgt.n	80020f8 <main+0x50>
			K = K;
 80020ee:	4b2e      	ldr	r3, [pc, #184]	; (80021a8 <main+0x100>)
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	4b2d      	ldr	r3, [pc, #180]	; (80021a8 <main+0x100>)
 80020f4:	601a      	str	r2, [r3, #0]
 80020f6:	e031      	b.n	800215c <main+0xb4>
		} else {
			if (i == 0) {
 80020f8:	4b2c      	ldr	r3, [pc, #176]	; (80021ac <main+0x104>)
 80020fa:	881b      	ldrh	r3, [r3, #0]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d12d      	bne.n	800215c <main+0xb4>
				K += PID_Conv_K;
 8002100:	4b29      	ldr	r3, [pc, #164]	; (80021a8 <main+0x100>)
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	4b2a      	ldr	r3, [pc, #168]	; (80021b0 <main+0x108>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	1c19      	adds	r1, r3, #0
 800210a:	1c10      	adds	r0, r2, #0
 800210c:	f7fe f93e 	bl	800038c <__aeabi_fadd>
 8002110:	1c03      	adds	r3, r0, #0
 8002112:	1c1a      	adds	r2, r3, #0
 8002114:	4b24      	ldr	r3, [pc, #144]	; (80021a8 <main+0x100>)
 8002116:	601a      	str	r2, [r3, #0]

				if (K >= 0.950) {
 8002118:	4b23      	ldr	r3, [pc, #140]	; (80021a8 <main+0x100>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	1c18      	adds	r0, r3, #0
 800211e:	f7ff f839 	bl	8001194 <__aeabi_f2d>
 8002122:	4a24      	ldr	r2, [pc, #144]	; (80021b4 <main+0x10c>)
 8002124:	4b24      	ldr	r3, [pc, #144]	; (80021b8 <main+0x110>)
 8002126:	f7fe f90f 	bl	8000348 <__aeabi_dcmpge>
 800212a:	1e03      	subs	r3, r0, #0
 800212c:	d003      	beq.n	8002136 <main+0x8e>
					K = 0.950;
 800212e:	4b1e      	ldr	r3, [pc, #120]	; (80021a8 <main+0x100>)
 8002130:	4a22      	ldr	r2, [pc, #136]	; (80021bc <main+0x114>)
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	e012      	b.n	800215c <main+0xb4>
				} else if (K <= 0.3) {
 8002136:	4b1c      	ldr	r3, [pc, #112]	; (80021a8 <main+0x100>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	1c18      	adds	r0, r3, #0
 800213c:	f7ff f82a 	bl	8001194 <__aeabi_f2d>
 8002140:	4a1f      	ldr	r2, [pc, #124]	; (80021c0 <main+0x118>)
 8002142:	4b20      	ldr	r3, [pc, #128]	; (80021c4 <main+0x11c>)
 8002144:	f7fe f8ec 	bl	8000320 <__aeabi_dcmple>
 8002148:	1e03      	subs	r3, r0, #0
 800214a:	d003      	beq.n	8002154 <main+0xac>
					K = 0.300;
 800214c:	4b16      	ldr	r3, [pc, #88]	; (80021a8 <main+0x100>)
 800214e:	4a1e      	ldr	r2, [pc, #120]	; (80021c8 <main+0x120>)
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	e003      	b.n	800215c <main+0xb4>
				} else {

					Ext_K = K;
 8002154:	4b14      	ldr	r3, [pc, #80]	; (80021a8 <main+0x100>)
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	4b1c      	ldr	r3, [pc, #112]	; (80021cc <main+0x124>)
 800215a:	601a      	str	r2, [r3, #0]
				}
			}
		}

		PID_Conv = PID(2048, Read_ADC_Pic, &Pid_Structure);
 800215c:	4b10      	ldr	r3, [pc, #64]	; (80021a0 <main+0xf8>)
 800215e:	2200      	movs	r2, #0
 8002160:	5e9b      	ldrsh	r3, [r3, r2]
 8002162:	0019      	movs	r1, r3
 8002164:	4a0c      	ldr	r2, [pc, #48]	; (8002198 <main+0xf0>)
 8002166:	2380      	movs	r3, #128	; 0x80
 8002168:	011b      	lsls	r3, r3, #4
 800216a:	0018      	movs	r0, r3
 800216c:	f7ff f994 	bl	8001498 <PID>
 8002170:	0003      	movs	r3, r0
 8002172:	b21a      	sxth	r2, r3
 8002174:	4b16      	ldr	r3, [pc, #88]	; (80021d0 <main+0x128>)
 8002176:	801a      	strh	r2, [r3, #0]
		PID_Conv_K = ((float) PID_Conv) / 409600;
 8002178:	4b15      	ldr	r3, [pc, #84]	; (80021d0 <main+0x128>)
 800217a:	2200      	movs	r2, #0
 800217c:	5e9b      	ldrsh	r3, [r3, r2]
 800217e:	0018      	movs	r0, r3
 8002180:	f7fe feae 	bl	8000ee0 <__aeabi_i2f>
 8002184:	1c03      	adds	r3, r0, #0
 8002186:	4913      	ldr	r1, [pc, #76]	; (80021d4 <main+0x12c>)
 8002188:	1c18      	adds	r0, r3, #0
 800218a:	f7fe fa9d 	bl	80006c8 <__aeabi_fdiv>
 800218e:	1c03      	adds	r3, r0, #0
 8002190:	1c1a      	adds	r2, r3, #0
 8002192:	4b07      	ldr	r3, [pc, #28]	; (80021b0 <main+0x108>)
 8002194:	601a      	str	r2, [r3, #0]
		if (Read_ADC_Pic > 2000 && Read_ADC_Pic < 2100) {
 8002196:	e79d      	b.n	80020d4 <main+0x2c>
 8002198:	200006e8 	.word	0x200006e8
 800219c:	ffff8000 	.word	0xffff8000
 80021a0:	2000070e 	.word	0x2000070e
 80021a4:	00000833 	.word	0x00000833
 80021a8:	20000000 	.word	0x20000000
 80021ac:	2000070c 	.word	0x2000070c
 80021b0:	20000708 	.word	0x20000708
 80021b4:	66666666 	.word	0x66666666
 80021b8:	3fee6666 	.word	0x3fee6666
 80021bc:	3f733333 	.word	0x3f733333
 80021c0:	33333333 	.word	0x33333333
 80021c4:	3fd33333 	.word	0x3fd33333
 80021c8:	3e99999a 	.word	0x3e99999a
 80021cc:	20000710 	.word	0x20000710
 80021d0:	20000704 	.word	0x20000704
 80021d4:	48c80000 	.word	0x48c80000

080021d8 <TIM_Config>:
	}
}

static void TIM_Config(void) {
 80021d8:	b590      	push	{r4, r7, lr}
 80021da:	b091      	sub	sp, #68	; 0x44
 80021dc:	af00      	add	r7, sp, #0
	TIM_BDTRInitTypeDef TIM_BDTRStructure;
	GPIO_InitTypeDef GPIO_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

	/* GPIOA, GPIOB and GPIOE Clocks enable */
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA | RCC_AHBPeriph_GPIOB, ENABLE);
 80021de:	23c0      	movs	r3, #192	; 0xc0
 80021e0:	02db      	lsls	r3, r3, #11
 80021e2:	2101      	movs	r1, #1
 80021e4:	0018      	movs	r0, r3
 80021e6:	f7ff fc1b 	bl	8001a20 <RCC_AHBPeriphClockCmd>

	/* Config LED PA6 */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_15;
 80021ea:	2408      	movs	r4, #8
 80021ec:	193b      	adds	r3, r7, r4
 80021ee:	2280      	movs	r2, #128	; 0x80
 80021f0:	0212      	lsls	r2, r2, #8
 80021f2:	601a      	str	r2, [r3, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80021f4:	193b      	adds	r3, r7, r4
 80021f6:	2201      	movs	r2, #1
 80021f8:	711a      	strb	r2, [r3, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80021fa:	193b      	adds	r3, r7, r4
 80021fc:	2203      	movs	r2, #3
 80021fe:	715a      	strb	r2, [r3, #5]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002200:	193b      	adds	r3, r7, r4
 8002202:	2200      	movs	r2, #0
 8002204:	719a      	strb	r2, [r3, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8002206:	193b      	adds	r3, r7, r4
 8002208:	2201      	movs	r2, #1
 800220a:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 800220c:	193a      	adds	r2, r7, r4
 800220e:	2390      	movs	r3, #144	; 0x90
 8002210:	05db      	lsls	r3, r3, #23
 8002212:	0011      	movs	r1, r2
 8002214:	0018      	movs	r0, r3
 8002216:	f7ff fac7 	bl	80017a8 <GPIO_Init>

	/* GPIOA Configuration : Channel 1, 2 and Channel 1N as alternate function push-pull */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9;
 800221a:	193b      	adds	r3, r7, r4
 800221c:	22e0      	movs	r2, #224	; 0xe0
 800221e:	0092      	lsls	r2, r2, #2
 8002220:	601a      	str	r2, [r3, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8002222:	193b      	adds	r3, r7, r4
 8002224:	2202      	movs	r2, #2
 8002226:	711a      	strb	r2, [r3, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002228:	193b      	adds	r3, r7, r4
 800222a:	2203      	movs	r2, #3
 800222c:	715a      	strb	r2, [r3, #5]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800222e:	193b      	adds	r3, r7, r4
 8002230:	2200      	movs	r2, #0
 8002232:	719a      	strb	r2, [r3, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8002234:	193b      	adds	r3, r7, r4
 8002236:	2201      	movs	r2, #1
 8002238:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 800223a:	193a      	adds	r2, r7, r4
 800223c:	2390      	movs	r3, #144	; 0x90
 800223e:	05db      	lsls	r3, r3, #23
 8002240:	0011      	movs	r1, r2
 8002242:	0018      	movs	r0, r3
 8002244:	f7ff fab0 	bl	80017a8 <GPIO_Init>

	/* Config che do thay the GPIO de user PWM */
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource9, GPIO_AF_2);
 8002248:	2390      	movs	r3, #144	; 0x90
 800224a:	05db      	lsls	r3, r3, #23
 800224c:	2202      	movs	r2, #2
 800224e:	2109      	movs	r1, #9
 8002250:	0018      	movs	r0, r3
 8002252:	f7ff fb3d 	bl	80018d0 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource8, GPIO_AF_2);
 8002256:	2390      	movs	r3, #144	; 0x90
 8002258:	05db      	lsls	r3, r3, #23
 800225a:	2202      	movs	r2, #2
 800225c:	2108      	movs	r1, #8
 800225e:	0018      	movs	r0, r3
 8002260:	f7ff fb36 	bl	80018d0 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource7, GPIO_AF_2);
 8002264:	2390      	movs	r3, #144	; 0x90
 8002266:	05db      	lsls	r3, r3, #23
 8002268:	2202      	movs	r2, #2
 800226a:	2107      	movs	r1, #7
 800226c:	0018      	movs	r0, r3
 800226e:	f7ff fb2f 	bl	80018d0 <GPIO_PinAFConfig>

	/* GPIOB Configuration: Channel 1N and 2N as alternate function push-pull */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
 8002272:	193b      	adds	r3, r7, r4
 8002274:	2201      	movs	r2, #1
 8002276:	601a      	str	r2, [r3, #0]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002278:	193b      	adds	r3, r7, r4
 800227a:	4a49      	ldr	r2, [pc, #292]	; (80023a0 <TIM_Config+0x1c8>)
 800227c:	0019      	movs	r1, r3
 800227e:	0010      	movs	r0, r2
 8002280:	f7ff fa92 	bl	80017a8 <GPIO_Init>

	GPIO_PinAFConfig(GPIOB, GPIO_PinSource0, GPIO_AF_2);
 8002284:	4b46      	ldr	r3, [pc, #280]	; (80023a0 <TIM_Config+0x1c8>)
 8002286:	2202      	movs	r2, #2
 8002288:	2100      	movs	r1, #0
 800228a:	0018      	movs	r0, r3
 800228c:	f7ff fb20 	bl	80018d0 <GPIO_PinAFConfig>

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 8002290:	2380      	movs	r3, #128	; 0x80
 8002292:	011b      	lsls	r3, r3, #4
 8002294:	2101      	movs	r1, #1
 8002296:	0018      	movs	r0, r3
 8002298:	f7ff fbe2 	bl	8001a60 <RCC_APB2PeriphClockCmd>

	/* Time Base configuration */
	TIM_TimeBaseStructure.TIM_Prescaler = 1;
 800229c:	2134      	movs	r1, #52	; 0x34
 800229e:	187b      	adds	r3, r7, r1
 80022a0:	2201      	movs	r2, #1
 80022a2:	801a      	strh	r2, [r3, #0]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80022a4:	187b      	adds	r3, r7, r1
 80022a6:	2200      	movs	r2, #0
 80022a8:	805a      	strh	r2, [r3, #2]
	TIM_TimeBaseStructure.TIM_Period = 1101;
 80022aa:	187b      	adds	r3, r7, r1
 80022ac:	4a3d      	ldr	r2, [pc, #244]	; (80023a4 <TIM_Config+0x1cc>)
 80022ae:	605a      	str	r2, [r3, #4]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 80022b0:	187b      	adds	r3, r7, r1
 80022b2:	2200      	movs	r2, #0
 80022b4:	811a      	strh	r2, [r3, #8]
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
 80022b6:	187b      	adds	r3, r7, r1
 80022b8:	2200      	movs	r2, #0
 80022ba:	729a      	strb	r2, [r3, #10]

	TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);
 80022bc:	187b      	adds	r3, r7, r1
 80022be:	4a3a      	ldr	r2, [pc, #232]	; (80023a8 <TIM_Config+0x1d0>)
 80022c0:	0019      	movs	r1, r3
 80022c2:	0010      	movs	r0, r2
 80022c4:	f7ff fc0c 	bl	8001ae0 <TIM_TimeBaseInit>

	/* Channel 1, 2,3 and 4 Configuration in PWM mode */
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 80022c8:	2120      	movs	r1, #32
 80022ca:	187b      	adds	r3, r7, r1
 80022cc:	2260      	movs	r2, #96	; 0x60
 80022ce:	801a      	strh	r2, [r3, #0]
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 80022d0:	187b      	adds	r3, r7, r1
 80022d2:	2201      	movs	r2, #1
 80022d4:	805a      	strh	r2, [r3, #2]
	TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Enable;
 80022d6:	187b      	adds	r3, r7, r1
 80022d8:	2204      	movs	r2, #4
 80022da:	809a      	strh	r2, [r3, #4]
	TIM_OCInitStructure.TIM_Pulse = 0;
 80022dc:	187b      	adds	r3, r7, r1
 80022de:	2200      	movs	r2, #0
 80022e0:	609a      	str	r2, [r3, #8]
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_Low;
 80022e2:	187b      	adds	r3, r7, r1
 80022e4:	2202      	movs	r2, #2
 80022e6:	819a      	strh	r2, [r3, #12]
	TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_Low;
 80022e8:	187b      	adds	r3, r7, r1
 80022ea:	2208      	movs	r2, #8
 80022ec:	81da      	strh	r2, [r3, #14]
	TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Set;
 80022ee:	187b      	adds	r3, r7, r1
 80022f0:	2280      	movs	r2, #128	; 0x80
 80022f2:	0052      	lsls	r2, r2, #1
 80022f4:	821a      	strh	r2, [r3, #16]
	TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCIdleState_Set;
 80022f6:	187b      	adds	r3, r7, r1
 80022f8:	2280      	movs	r2, #128	; 0x80
 80022fa:	0052      	lsls	r2, r2, #1
 80022fc:	825a      	strh	r2, [r3, #18]

	TIM_OC1Init(TIM1, &TIM_OCInitStructure);
 80022fe:	000c      	movs	r4, r1
 8002300:	187b      	adds	r3, r7, r1
 8002302:	4a29      	ldr	r2, [pc, #164]	; (80023a8 <TIM_Config+0x1d0>)
 8002304:	0019      	movs	r1, r3
 8002306:	0010      	movs	r0, r2
 8002308:	f7ff fcc8 	bl	8001c9c <TIM_OC1Init>
	TIM_OC2Init(TIM1, &TIM_OCInitStructure);
 800230c:	193b      	adds	r3, r7, r4
 800230e:	4a26      	ldr	r2, [pc, #152]	; (80023a8 <TIM_Config+0x1d0>)
 8002310:	0019      	movs	r1, r3
 8002312:	0010      	movs	r0, r2
 8002314:	f7ff fd7a 	bl	8001e0c <TIM_OC2Init>
	/* NVIC */
	TIM_BDTRStructure.TIM_OSSRState = TIM_OSSRState_Enable;
 8002318:	2110      	movs	r1, #16
 800231a:	187b      	adds	r3, r7, r1
 800231c:	2280      	movs	r2, #128	; 0x80
 800231e:	0112      	lsls	r2, r2, #4
 8002320:	801a      	strh	r2, [r3, #0]
	TIM_BDTRStructure.TIM_OSSIState = TIM_OSSIState_Enable;
 8002322:	187b      	adds	r3, r7, r1
 8002324:	2280      	movs	r2, #128	; 0x80
 8002326:	00d2      	lsls	r2, r2, #3
 8002328:	805a      	strh	r2, [r3, #2]
	TIM_BDTRStructure.TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 800232a:	187b      	adds	r3, r7, r1
 800232c:	2200      	movs	r2, #0
 800232e:	809a      	strh	r2, [r3, #4]
	TIM_BDTRStructure.TIM_DeadTime = 20;
 8002330:	187b      	adds	r3, r7, r1
 8002332:	2214      	movs	r2, #20
 8002334:	80da      	strh	r2, [r3, #6]
	TIM_BDTRStructure.TIM_Break = TIM_Break_Disable;
 8002336:	187b      	adds	r3, r7, r1
 8002338:	2200      	movs	r2, #0
 800233a:	811a      	strh	r2, [r3, #8]
	TIM_BDTRStructure.TIM_BreakPolarity = TIM_BreakPolarity_Low;
 800233c:	187b      	adds	r3, r7, r1
 800233e:	2200      	movs	r2, #0
 8002340:	815a      	strh	r2, [r3, #10]
	TIM_BDTRStructure.TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 8002342:	187b      	adds	r3, r7, r1
 8002344:	2200      	movs	r2, #0
 8002346:	819a      	strh	r2, [r3, #12]

	TIM_BDTRConfig(TIM1, &TIM_BDTRStructure);
 8002348:	187b      	adds	r3, r7, r1
 800234a:	4a17      	ldr	r2, [pc, #92]	; (80023a8 <TIM_Config+0x1d0>)
 800234c:	0019      	movs	r1, r3
 800234e:	0010      	movs	r0, r2
 8002350:	f7ff fc58 	bl	8001c04 <TIM_BDTRConfig>

	TIM_Cmd(TIM1, ENABLE);
 8002354:	4b14      	ldr	r3, [pc, #80]	; (80023a8 <TIM_Config+0x1d0>)
 8002356:	2101      	movs	r1, #1
 8002358:	0018      	movs	r0, r3
 800235a:	f7ff fc33 	bl	8001bc4 <TIM_Cmd>
	TIM_CtrlPWMOutputs(TIM1, ENABLE);
 800235e:	4b12      	ldr	r3, [pc, #72]	; (80023a8 <TIM_Config+0x1d0>)
 8002360:	2101      	movs	r1, #1
 8002362:	0018      	movs	r0, r3
 8002364:	f7ff fc74 	bl	8001c50 <TIM_CtrlPWMOutputs>

	/* NVIC */
	TIM_ClearFlag(TIM1, TIM_FLAG_Update);
 8002368:	4b0f      	ldr	r3, [pc, #60]	; (80023a8 <TIM_Config+0x1d0>)
 800236a:	2101      	movs	r1, #1
 800236c:	0018      	movs	r0, r3
 800236e:	f7ff fe50 	bl	8002012 <TIM_ClearFlag>
	TIM_ITConfig(TIM1, TIM_IT_Update, ENABLE);
 8002372:	4b0d      	ldr	r3, [pc, #52]	; (80023a8 <TIM_Config+0x1d0>)
 8002374:	2201      	movs	r2, #1
 8002376:	2101      	movs	r1, #1
 8002378:	0018      	movs	r0, r3
 800237a:	f7ff fe21 	bl	8001fc0 <TIM_ITConfig>

	NVIC_InitStructure.NVIC_IRQChannel = TIM1_BRK_UP_TRG_COM_IRQn;
 800237e:	1d3b      	adds	r3, r7, #4
 8002380:	220d      	movs	r2, #13
 8002382:	701a      	strb	r2, [r3, #0]
	NVIC_InitStructure.NVIC_IRQChannelPriority = 0;
 8002384:	1d3b      	adds	r3, r7, #4
 8002386:	2200      	movs	r2, #0
 8002388:	705a      	strb	r2, [r3, #1]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800238a:	1d3b      	adds	r3, r7, #4
 800238c:	2201      	movs	r2, #1
 800238e:	709a      	strb	r2, [r3, #2]
	NVIC_Init(&NVIC_InitStructure);
 8002390:	1d3b      	adds	r3, r7, #4
 8002392:	0018      	movs	r0, r3
 8002394:	f7ff faee 	bl	8001974 <NVIC_Init>
}
 8002398:	46c0      	nop			; (mov r8, r8)
 800239a:	46bd      	mov	sp, r7
 800239c:	b011      	add	sp, #68	; 0x44
 800239e:	bd90      	pop	{r4, r7, pc}
 80023a0:	48000400 	.word	0x48000400
 80023a4:	0000044d 	.word	0x0000044d
 80023a8:	40012c00 	.word	0x40012c00

080023ac <ADC_Config>:

static void ADC_Config(void) {
 80023ac:	b590      	push	{r4, r7, lr}
 80023ae:	b089      	sub	sp, #36	; 0x24
 80023b0:	af00      	add	r7, sp, #0
	ADC_InitTypeDef ADC_InitStructure;
	GPIO_InitTypeDef GPIO_InitStructure;

	/* ADC1 Periph clock enable */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
 80023b2:	2380      	movs	r3, #128	; 0x80
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	2101      	movs	r1, #1
 80023b8:	0018      	movs	r0, r3
 80023ba:	f7ff fb51 	bl	8001a60 <RCC_APB2PeriphClockCmd>

	/* Configure ADC Channel11 as analog input */

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
 80023be:	003b      	movs	r3, r7
 80023c0:	2210      	movs	r2, #16
 80023c2:	601a      	str	r2, [r3, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 80023c4:	003b      	movs	r3, r7
 80023c6:	2203      	movs	r2, #3
 80023c8:	711a      	strb	r2, [r3, #4]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80023ca:	003b      	movs	r3, r7
 80023cc:	2200      	movs	r2, #0
 80023ce:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80023d0:	003a      	movs	r2, r7
 80023d2:	2390      	movs	r3, #144	; 0x90
 80023d4:	05db      	lsls	r3, r3, #23
 80023d6:	0011      	movs	r1, r2
 80023d8:	0018      	movs	r0, r3
 80023da:	f7ff f9e5 	bl	80017a8 <GPIO_Init>

	/* ADCs DeInit */
	ADC_DeInit(ADC1);
 80023de:	4b1f      	ldr	r3, [pc, #124]	; (800245c <ADC_Config+0xb0>)
 80023e0:	0018      	movs	r0, r3
 80023e2:	f7ff f8cf 	bl	8001584 <ADC_DeInit>

	/* Initialize ADC structure */
	ADC_StructInit(&ADC_InitStructure);
 80023e6:	2408      	movs	r4, #8
 80023e8:	193b      	adds	r3, r7, r4
 80023ea:	0018      	movs	r0, r3
 80023ec:	f7ff f910 	bl	8001610 <ADC_StructInit>

	/* Configure the ADC1 in continuous mode with a resolution equal to 12 bits  */
	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 80023f0:	0021      	movs	r1, r4
 80023f2:	187b      	adds	r3, r7, r1
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]
	ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;
 80023f8:	187b      	adds	r3, r7, r1
 80023fa:	2201      	movs	r2, #1
 80023fc:	711a      	strb	r2, [r3, #4]
	ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 80023fe:	187b      	adds	r3, r7, r1
 8002400:	2200      	movs	r2, #0
 8002402:	609a      	str	r2, [r3, #8]
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 8002404:	187b      	adds	r3, r7, r1
 8002406:	2200      	movs	r2, #0
 8002408:	611a      	str	r2, [r3, #16]
	ADC_InitStructure.ADC_ScanDirection = ADC_ScanDirection_Upward;
 800240a:	187b      	adds	r3, r7, r1
 800240c:	2200      	movs	r2, #0
 800240e:	615a      	str	r2, [r3, #20]
	ADC_Init(ADC1, &ADC_InitStructure);
 8002410:	187b      	adds	r3, r7, r1
 8002412:	4a12      	ldr	r2, [pc, #72]	; (800245c <ADC_Config+0xb0>)
 8002414:	0019      	movs	r1, r3
 8002416:	0010      	movs	r0, r2
 8002418:	f7ff f8ce 	bl	80015b8 <ADC_Init>

	/* Convert the ADC1 Channel 11 with 239.5 Cycles as sampling time */
	ADC_ChannelConfig(ADC1, ADC_Channel_4, ADC_SampleTime_55_5Cycles);
 800241c:	4b0f      	ldr	r3, [pc, #60]	; (800245c <ADC_Config+0xb0>)
 800241e:	2205      	movs	r2, #5
 8002420:	2110      	movs	r1, #16
 8002422:	0018      	movs	r0, r3
 8002424:	f7ff f92a 	bl	800167c <ADC_ChannelConfig>
	/* ADC Calibration */
	ADC_GetCalibrationFactor(ADC1);
 8002428:	4b0c      	ldr	r3, [pc, #48]	; (800245c <ADC_Config+0xb0>)
 800242a:	0018      	movs	r0, r3
 800242c:	f7ff f943 	bl	80016b6 <ADC_GetCalibrationFactor>

	/* Enable the ADC peripheral */
	ADC_Cmd(ADC1, ENABLE);
 8002430:	4b0a      	ldr	r3, [pc, #40]	; (800245c <ADC_Config+0xb0>)
 8002432:	2101      	movs	r1, #1
 8002434:	0018      	movs	r0, r3
 8002436:	f7ff f905 	bl	8001644 <ADC_Cmd>

	/* Wait the ADRDY flag */
	while (!ADC_GetFlagStatus(ADC1, ADC_FLAG_ADRDY))
 800243a:	46c0      	nop			; (mov r8, r8)
 800243c:	4b07      	ldr	r3, [pc, #28]	; (800245c <ADC_Config+0xb0>)
 800243e:	2101      	movs	r1, #1
 8002440:	0018      	movs	r0, r3
 8002442:	f7ff f981 	bl	8001748 <ADC_GetFlagStatus>
 8002446:	1e03      	subs	r3, r0, #0
 8002448:	d0f8      	beq.n	800243c <ADC_Config+0x90>
		;

	/* ADC1 regular Software Start Conv */
	ADC_StartOfConversion(ADC1);
 800244a:	4b04      	ldr	r3, [pc, #16]	; (800245c <ADC_Config+0xb0>)
 800244c:	0018      	movs	r0, r3
 800244e:	f7ff f962 	bl	8001716 <ADC_StartOfConversion>

}
 8002452:	46c0      	nop			; (mov r8, r8)
 8002454:	46bd      	mov	sp, r7
 8002456:	b009      	add	sp, #36	; 0x24
 8002458:	bd90      	pop	{r4, r7, pc}
 800245a:	46c0      	nop			; (mov r8, r8)
 800245c:	40012400 	.word	0x40012400

08002460 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

volatile uint16_t i = 0;
int16_t Read_ADC_Pic = 0;
volatile float Ext_K = 0;

void TIM1_BRK_UP_TRG_COM_IRQHandler(void) {
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(TIM1, TIM_IT_Update) != RESET) //if update flag turns on
 8002464:	4b31      	ldr	r3, [pc, #196]	; (800252c <TIM1_BRK_UP_TRG_COM_IRQHandler+0xcc>)
 8002466:	2101      	movs	r1, #1
 8002468:	0018      	movs	r0, r3
 800246a:	f7ff fde3 	bl	8002034 <TIM_GetITStatus>
 800246e:	1e03      	subs	r3, r0, #0
 8002470:	d058      	beq.n	8002524 <TIM1_BRK_UP_TRG_COM_IRQHandler+0xc4>
	{

		i++;
 8002472:	4b2f      	ldr	r3, [pc, #188]	; (8002530 <TIM1_BRK_UP_TRG_COM_IRQHandler+0xd0>)
 8002474:	881b      	ldrh	r3, [r3, #0]
 8002476:	b29b      	uxth	r3, r3
 8002478:	3301      	adds	r3, #1
 800247a:	b29a      	uxth	r2, r3
 800247c:	4b2c      	ldr	r3, [pc, #176]	; (8002530 <TIM1_BRK_UP_TRG_COM_IRQHandler+0xd0>)
 800247e:	801a      	strh	r2, [r3, #0]
		if (i == 110) {
 8002480:	4b2b      	ldr	r3, [pc, #172]	; (8002530 <TIM1_BRK_UP_TRG_COM_IRQHandler+0xd0>)
 8002482:	881b      	ldrh	r3, [r3, #0]
 8002484:	b29b      	uxth	r3, r3
 8002486:	2b6e      	cmp	r3, #110	; 0x6e
 8002488:	d107      	bne.n	800249a <TIM1_BRK_UP_TRG_COM_IRQHandler+0x3a>
			Read_ADC_Pic = ADC_GetConversionValue(ADC1);
 800248a:	4b2a      	ldr	r3, [pc, #168]	; (8002534 <TIM1_BRK_UP_TRG_COM_IRQHandler+0xd4>)
 800248c:	0018      	movs	r0, r3
 800248e:	f7ff f950 	bl	8001732 <ADC_GetConversionValue>
 8002492:	0003      	movs	r3, r0
 8002494:	b21a      	sxth	r2, r3
 8002496:	4b28      	ldr	r3, [pc, #160]	; (8002538 <TIM1_BRK_UP_TRG_COM_IRQHandler+0xd8>)
 8002498:	801a      	strh	r2, [r3, #0]
		}
		if (i > 434) {
 800249a:	4b25      	ldr	r3, [pc, #148]	; (8002530 <TIM1_BRK_UP_TRG_COM_IRQHandler+0xd0>)
 800249c:	881b      	ldrh	r3, [r3, #0]
 800249e:	b29a      	uxth	r2, r3
 80024a0:	23d9      	movs	r3, #217	; 0xd9
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d902      	bls.n	80024ae <TIM1_BRK_UP_TRG_COM_IRQHandler+0x4e>
			i = 0;
 80024a8:	4b21      	ldr	r3, [pc, #132]	; (8002530 <TIM1_BRK_UP_TRG_COM_IRQHandler+0xd0>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	801a      	strh	r2, [r3, #0]
		}

		TIM_SetCompare2(TIM1, (lookUp1[i]) * Ext_K);
 80024ae:	4b20      	ldr	r3, [pc, #128]	; (8002530 <TIM1_BRK_UP_TRG_COM_IRQHandler+0xd0>)
 80024b0:	881b      	ldrh	r3, [r3, #0]
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	001a      	movs	r2, r3
 80024b6:	4b21      	ldr	r3, [pc, #132]	; (800253c <TIM1_BRK_UP_TRG_COM_IRQHandler+0xdc>)
 80024b8:	0052      	lsls	r2, r2, #1
 80024ba:	5ad3      	ldrh	r3, [r2, r3]
 80024bc:	0018      	movs	r0, r3
 80024be:	f7fe fd0f 	bl	8000ee0 <__aeabi_i2f>
 80024c2:	1c02      	adds	r2, r0, #0
 80024c4:	4b1e      	ldr	r3, [pc, #120]	; (8002540 <TIM1_BRK_UP_TRG_COM_IRQHandler+0xe0>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	1c19      	adds	r1, r3, #0
 80024ca:	1c10      	adds	r0, r2, #0
 80024cc:	f7fe fa14 	bl	80008f8 <__aeabi_fmul>
 80024d0:	1c03      	adds	r3, r0, #0
 80024d2:	1c18      	adds	r0, r3, #0
 80024d4:	f7fd ff42 	bl	800035c <__aeabi_f2uiz>
 80024d8:	0003      	movs	r3, r0
 80024da:	4a14      	ldr	r2, [pc, #80]	; (800252c <TIM1_BRK_UP_TRG_COM_IRQHandler+0xcc>)
 80024dc:	0019      	movs	r1, r3
 80024de:	0010      	movs	r0, r2
 80024e0:	f7ff fd62 	bl	8001fa8 <TIM_SetCompare2>
		TIM_SetCompare1(TIM1, (lookUp2[i]) * Ext_K);
 80024e4:	4b12      	ldr	r3, [pc, #72]	; (8002530 <TIM1_BRK_UP_TRG_COM_IRQHandler+0xd0>)
 80024e6:	881b      	ldrh	r3, [r3, #0]
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	001a      	movs	r2, r3
 80024ec:	4b15      	ldr	r3, [pc, #84]	; (8002544 <TIM1_BRK_UP_TRG_COM_IRQHandler+0xe4>)
 80024ee:	0052      	lsls	r2, r2, #1
 80024f0:	5ad3      	ldrh	r3, [r2, r3]
 80024f2:	0018      	movs	r0, r3
 80024f4:	f7fe fcf4 	bl	8000ee0 <__aeabi_i2f>
 80024f8:	1c02      	adds	r2, r0, #0
 80024fa:	4b11      	ldr	r3, [pc, #68]	; (8002540 <TIM1_BRK_UP_TRG_COM_IRQHandler+0xe0>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	1c19      	adds	r1, r3, #0
 8002500:	1c10      	adds	r0, r2, #0
 8002502:	f7fe f9f9 	bl	80008f8 <__aeabi_fmul>
 8002506:	1c03      	adds	r3, r0, #0
 8002508:	1c18      	adds	r0, r3, #0
 800250a:	f7fd ff27 	bl	800035c <__aeabi_f2uiz>
 800250e:	0003      	movs	r3, r0
 8002510:	4a06      	ldr	r2, [pc, #24]	; (800252c <TIM1_BRK_UP_TRG_COM_IRQHandler+0xcc>)
 8002512:	0019      	movs	r1, r3
 8002514:	0010      	movs	r0, r2
 8002516:	f7ff fd3b 	bl	8001f90 <TIM_SetCompare1>

		TIM_ClearFlag(TIM1, TIM_FLAG_Update);
 800251a:	4b04      	ldr	r3, [pc, #16]	; (800252c <TIM1_BRK_UP_TRG_COM_IRQHandler+0xcc>)
 800251c:	2101      	movs	r1, #1
 800251e:	0018      	movs	r0, r3
 8002520:	f7ff fd77 	bl	8002012 <TIM_ClearFlag>
	}
}
 8002524:	46c0      	nop			; (mov r8, r8)
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	46c0      	nop			; (mov r8, r8)
 800252c:	40012c00 	.word	0x40012c00
 8002530:	2000070c 	.word	0x2000070c
 8002534:	40012400 	.word	0x40012400
 8002538:	2000070e 	.word	0x2000070e
 800253c:	20000004 	.word	0x20000004
 8002540:	20000710 	.word	0x20000710
 8002544:	20000368 	.word	0x20000368

08002548 <NMI_Handler>:
void NMI_Handler(void) {
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
}
 800254c:	46c0      	nop			; (mov r8, r8)
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <HardFault_Handler>:
/**
 * @brief  This function handles Hard Fault exception.
 * @param  None
 * @retval None
 */
void HardFault_Handler(void) {
 8002552:	b580      	push	{r7, lr}
 8002554:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Hard Fault exception occurs */
	while (1) {
 8002556:	e7fe      	b.n	8002556 <HardFault_Handler+0x4>

08002558 <SVC_Handler>:
/**
 * @brief  This function handles SVCall exception.
 * @param  None
 * @retval None
 */
void SVC_Handler(void) {
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
}
 800255c:	46c0      	nop			; (mov r8, r8)
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <PendSV_Handler>:
/**
 * @brief  This function handles PendSVC exception.
 * @param  None
 * @retval None
 */
void PendSV_Handler(void) {
 8002562:	b580      	push	{r7, lr}
 8002564:	af00      	add	r7, sp, #0
}
 8002566:	46c0      	nop			; (mov r8, r8)
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <SysTick_Handler>:
/**
 * @brief  This function handles SysTick Handler.
 * @param  None
 * @retval None
 */
void SysTick_Handler(void) {
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
}
 8002570:	46c0      	nop			; (mov r8, r8)
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
	...

08002578 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{    
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800257c:	4b1b      	ldr	r3, [pc, #108]	; (80025ec <SystemInit+0x74>)
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	4b1a      	ldr	r3, [pc, #104]	; (80025ec <SystemInit+0x74>)
 8002582:	2101      	movs	r1, #1
 8002584:	430a      	orrs	r2, r1
 8002586:	601a      	str	r2, [r3, #0]
#if defined(STM32F051)   
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 8002588:	4b18      	ldr	r3, [pc, #96]	; (80025ec <SystemInit+0x74>)
 800258a:	685a      	ldr	r2, [r3, #4]
 800258c:	4b17      	ldr	r3, [pc, #92]	; (80025ec <SystemInit+0x74>)
 800258e:	4918      	ldr	r1, [pc, #96]	; (80025f0 <SystemInit+0x78>)
 8002590:	400a      	ands	r2, r1
 8002592:	605a      	str	r2, [r3, #4]
#endif /* STM32F051 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002594:	4b15      	ldr	r3, [pc, #84]	; (80025ec <SystemInit+0x74>)
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	4b14      	ldr	r3, [pc, #80]	; (80025ec <SystemInit+0x74>)
 800259a:	4916      	ldr	r1, [pc, #88]	; (80025f4 <SystemInit+0x7c>)
 800259c:	400a      	ands	r2, r1
 800259e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80025a0:	4b12      	ldr	r3, [pc, #72]	; (80025ec <SystemInit+0x74>)
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	4b11      	ldr	r3, [pc, #68]	; (80025ec <SystemInit+0x74>)
 80025a6:	4914      	ldr	r1, [pc, #80]	; (80025f8 <SystemInit+0x80>)
 80025a8:	400a      	ands	r2, r1
 80025aa:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 80025ac:	4b0f      	ldr	r3, [pc, #60]	; (80025ec <SystemInit+0x74>)
 80025ae:	685a      	ldr	r2, [r3, #4]
 80025b0:	4b0e      	ldr	r3, [pc, #56]	; (80025ec <SystemInit+0x74>)
 80025b2:	4912      	ldr	r1, [pc, #72]	; (80025fc <SystemInit+0x84>)
 80025b4:	400a      	ands	r2, r1
 80025b6:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 80025b8:	4b0c      	ldr	r3, [pc, #48]	; (80025ec <SystemInit+0x74>)
 80025ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025bc:	4b0b      	ldr	r3, [pc, #44]	; (80025ec <SystemInit+0x74>)
 80025be:	210f      	movs	r1, #15
 80025c0:	438a      	bics	r2, r1
 80025c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEAC;
 80025c4:	4b09      	ldr	r3, [pc, #36]	; (80025ec <SystemInit+0x74>)
 80025c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025c8:	4b08      	ldr	r3, [pc, #32]	; (80025ec <SystemInit+0x74>)
 80025ca:	490d      	ldr	r1, [pc, #52]	; (8002600 <SystemInit+0x88>)
 80025cc:	400a      	ands	r2, r1
 80025ce:	631a      	str	r2, [r3, #48]	; 0x30

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 80025d0:	4b06      	ldr	r3, [pc, #24]	; (80025ec <SystemInit+0x74>)
 80025d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025d4:	4b05      	ldr	r3, [pc, #20]	; (80025ec <SystemInit+0x74>)
 80025d6:	2101      	movs	r1, #1
 80025d8:	438a      	bics	r2, r1
 80025da:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80025dc:	4b03      	ldr	r3, [pc, #12]	; (80025ec <SystemInit+0x74>)
 80025de:	2200      	movs	r2, #0
 80025e0:	609a      	str	r2, [r3, #8]

  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
 80025e2:	f000 f80f 	bl	8002604 <SetSysClock>
}
 80025e6:	46c0      	nop			; (mov r8, r8)
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	40021000 	.word	0x40021000
 80025f0:	08ffb80c 	.word	0x08ffb80c
 80025f4:	fef6ffff 	.word	0xfef6ffff
 80025f8:	fffbffff 	.word	0xfffbffff
 80025fc:	ffc0ffff 	.word	0xffc0ffff
 8002600:	fffffeac 	.word	0xfffffeac

08002604 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800260a:	2300      	movs	r3, #0
 800260c:	607b      	str	r3, [r7, #4]
 800260e:	2300      	movs	r3, #0
 8002610:	603b      	str	r3, [r7, #0]
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8002612:	4b31      	ldr	r3, [pc, #196]	; (80026d8 <SetSysClock+0xd4>)
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	4b30      	ldr	r3, [pc, #192]	; (80026d8 <SetSysClock+0xd4>)
 8002618:	2180      	movs	r1, #128	; 0x80
 800261a:	0249      	lsls	r1, r1, #9
 800261c:	430a      	orrs	r2, r1
 800261e:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8002620:	4b2d      	ldr	r3, [pc, #180]	; (80026d8 <SetSysClock+0xd4>)
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	2380      	movs	r3, #128	; 0x80
 8002626:	029b      	lsls	r3, r3, #10
 8002628:	4013      	ands	r3, r2
 800262a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	3301      	adds	r3, #1
 8002630:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d104      	bne.n	8002642 <SetSysClock+0x3e>
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	23a0      	movs	r3, #160	; 0xa0
 800263c:	01db      	lsls	r3, r3, #7
 800263e:	429a      	cmp	r2, r3
 8002640:	d1ee      	bne.n	8002620 <SetSysClock+0x1c>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8002642:	4b25      	ldr	r3, [pc, #148]	; (80026d8 <SetSysClock+0xd4>)
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	2380      	movs	r3, #128	; 0x80
 8002648:	029b      	lsls	r3, r3, #10
 800264a:	4013      	ands	r3, r2
 800264c:	d002      	beq.n	8002654 <SetSysClock+0x50>
  {
    HSEStatus = (uint32_t)0x01;
 800264e:	2301      	movs	r3, #1
 8002650:	603b      	str	r3, [r7, #0]
 8002652:	e001      	b.n	8002658 <SetSysClock+0x54>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8002654:	2300      	movs	r3, #0
 8002656:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d138      	bne.n	80026d0 <SetSysClock+0xcc>
  {
    /* Enable Prefetch Buffer and set Flash Latency */
    FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;
 800265e:	4b1f      	ldr	r3, [pc, #124]	; (80026dc <SetSysClock+0xd8>)
 8002660:	2211      	movs	r2, #17
 8002662:	601a      	str	r2, [r3, #0]
 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8002664:	4a1c      	ldr	r2, [pc, #112]	; (80026d8 <SetSysClock+0xd4>)
 8002666:	4b1c      	ldr	r3, [pc, #112]	; (80026d8 <SetSysClock+0xd4>)
 8002668:	6852      	ldr	r2, [r2, #4]
 800266a:	605a      	str	r2, [r3, #4]
      
    /* PCLK = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE_DIV1;
 800266c:	4a1a      	ldr	r2, [pc, #104]	; (80026d8 <SetSysClock+0xd4>)
 800266e:	4b1a      	ldr	r3, [pc, #104]	; (80026d8 <SetSysClock+0xd4>)
 8002670:	6852      	ldr	r2, [r2, #4]
 8002672:	605a      	str	r2, [r3, #4]

    /* PLL configuration */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8002674:	4b18      	ldr	r3, [pc, #96]	; (80026d8 <SetSysClock+0xd4>)
 8002676:	685a      	ldr	r2, [r3, #4]
 8002678:	4b17      	ldr	r3, [pc, #92]	; (80026d8 <SetSysClock+0xd4>)
 800267a:	4919      	ldr	r1, [pc, #100]	; (80026e0 <SetSysClock+0xdc>)
 800267c:	400a      	ands	r2, r1
 800267e:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL6);
 8002680:	4b15      	ldr	r3, [pc, #84]	; (80026d8 <SetSysClock+0xd4>)
 8002682:	685a      	ldr	r2, [r3, #4]
 8002684:	4b14      	ldr	r3, [pc, #80]	; (80026d8 <SetSysClock+0xd4>)
 8002686:	2188      	movs	r1, #136	; 0x88
 8002688:	0349      	lsls	r1, r1, #13
 800268a:	430a      	orrs	r2, r1
 800268c:	605a      	str	r2, [r3, #4]
            
    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 800268e:	4b12      	ldr	r3, [pc, #72]	; (80026d8 <SetSysClock+0xd4>)
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	4b11      	ldr	r3, [pc, #68]	; (80026d8 <SetSysClock+0xd4>)
 8002694:	2180      	movs	r1, #128	; 0x80
 8002696:	0449      	lsls	r1, r1, #17
 8002698:	430a      	orrs	r2, r1
 800269a:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800269c:	46c0      	nop			; (mov r8, r8)
 800269e:	4b0e      	ldr	r3, [pc, #56]	; (80026d8 <SetSysClock+0xd4>)
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	2380      	movs	r3, #128	; 0x80
 80026a4:	049b      	lsls	r3, r3, #18
 80026a6:	4013      	ands	r3, r2
 80026a8:	d0f9      	beq.n	800269e <SetSysClock+0x9a>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80026aa:	4b0b      	ldr	r3, [pc, #44]	; (80026d8 <SetSysClock+0xd4>)
 80026ac:	685a      	ldr	r2, [r3, #4]
 80026ae:	4b0a      	ldr	r3, [pc, #40]	; (80026d8 <SetSysClock+0xd4>)
 80026b0:	2103      	movs	r1, #3
 80026b2:	438a      	bics	r2, r1
 80026b4:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80026b6:	4b08      	ldr	r3, [pc, #32]	; (80026d8 <SetSysClock+0xd4>)
 80026b8:	685a      	ldr	r2, [r3, #4]
 80026ba:	4b07      	ldr	r3, [pc, #28]	; (80026d8 <SetSysClock+0xd4>)
 80026bc:	2102      	movs	r1, #2
 80026be:	430a      	orrs	r2, r1
 80026c0:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 80026c2:	46c0      	nop			; (mov r8, r8)
 80026c4:	4b04      	ldr	r3, [pc, #16]	; (80026d8 <SetSysClock+0xd4>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	220c      	movs	r2, #12
 80026ca:	4013      	ands	r3, r2
 80026cc:	2b08      	cmp	r3, #8
 80026ce:	d1f9      	bne.n	80026c4 <SetSysClock+0xc0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }  
}
 80026d0:	46c0      	nop			; (mov r8, r8)
 80026d2:	46bd      	mov	sp, r7
 80026d4:	b002      	add	sp, #8
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	40021000 	.word	0x40021000
 80026dc:	40022000 	.word	0x40022000
 80026e0:	ffc07fff 	.word	0xffc07fff

080026e4 <Reset_Handler>:
 80026e4:	480d      	ldr	r0, [pc, #52]	; (800271c <LoopForever+0x2>)
 80026e6:	4685      	mov	sp, r0
 80026e8:	f7ff ff46 	bl	8002578 <SystemInit>
 80026ec:	480c      	ldr	r0, [pc, #48]	; (8002720 <LoopForever+0x6>)
 80026ee:	490d      	ldr	r1, [pc, #52]	; (8002724 <LoopForever+0xa>)
 80026f0:	4a0d      	ldr	r2, [pc, #52]	; (8002728 <LoopForever+0xe>)
 80026f2:	2300      	movs	r3, #0
 80026f4:	e002      	b.n	80026fc <LoopCopyDataInit>

080026f6 <CopyDataInit>:
 80026f6:	58d4      	ldr	r4, [r2, r3]
 80026f8:	50c4      	str	r4, [r0, r3]
 80026fa:	3304      	adds	r3, #4

080026fc <LoopCopyDataInit>:
 80026fc:	18c4      	adds	r4, r0, r3
 80026fe:	428c      	cmp	r4, r1
 8002700:	d3f9      	bcc.n	80026f6 <CopyDataInit>
 8002702:	4a0a      	ldr	r2, [pc, #40]	; (800272c <LoopForever+0x12>)
 8002704:	4c0a      	ldr	r4, [pc, #40]	; (8002730 <LoopForever+0x16>)
 8002706:	2300      	movs	r3, #0
 8002708:	e001      	b.n	800270e <LoopFillZerobss>

0800270a <FillZerobss>:
 800270a:	6013      	str	r3, [r2, #0]
 800270c:	3204      	adds	r2, #4

0800270e <LoopFillZerobss>:
 800270e:	42a2      	cmp	r2, r4
 8002710:	d3fb      	bcc.n	800270a <FillZerobss>
 8002712:	f000 f811 	bl	8002738 <__libc_init_array>
 8002716:	f7ff fcc7 	bl	80020a8 <main>

0800271a <LoopForever>:
 800271a:	e7fe      	b.n	800271a <LoopForever>
 800271c:	20001000 	.word	0x20001000
 8002720:	20000000 	.word	0x20000000
 8002724:	200006cc 	.word	0x200006cc
 8002728:	08002860 	.word	0x08002860
 800272c:	200006cc 	.word	0x200006cc
 8002730:	20000714 	.word	0x20000714

08002734 <ADC_IRQHandler>:
 8002734:	e7fe      	b.n	8002734 <ADC_IRQHandler>
	...

08002738 <__libc_init_array>:
 8002738:	b570      	push	{r4, r5, r6, lr}
 800273a:	2600      	movs	r6, #0
 800273c:	4d0c      	ldr	r5, [pc, #48]	; (8002770 <__libc_init_array+0x38>)
 800273e:	4c0d      	ldr	r4, [pc, #52]	; (8002774 <__libc_init_array+0x3c>)
 8002740:	1b64      	subs	r4, r4, r5
 8002742:	10a4      	asrs	r4, r4, #2
 8002744:	42a6      	cmp	r6, r4
 8002746:	d109      	bne.n	800275c <__libc_init_array+0x24>
 8002748:	2600      	movs	r6, #0
 800274a:	f000 f819 	bl	8002780 <_init>
 800274e:	4d0a      	ldr	r5, [pc, #40]	; (8002778 <__libc_init_array+0x40>)
 8002750:	4c0a      	ldr	r4, [pc, #40]	; (800277c <__libc_init_array+0x44>)
 8002752:	1b64      	subs	r4, r4, r5
 8002754:	10a4      	asrs	r4, r4, #2
 8002756:	42a6      	cmp	r6, r4
 8002758:	d105      	bne.n	8002766 <__libc_init_array+0x2e>
 800275a:	bd70      	pop	{r4, r5, r6, pc}
 800275c:	00b3      	lsls	r3, r6, #2
 800275e:	58eb      	ldr	r3, [r5, r3]
 8002760:	4798      	blx	r3
 8002762:	3601      	adds	r6, #1
 8002764:	e7ee      	b.n	8002744 <__libc_init_array+0xc>
 8002766:	00b3      	lsls	r3, r6, #2
 8002768:	58eb      	ldr	r3, [r5, r3]
 800276a:	4798      	blx	r3
 800276c:	3601      	adds	r6, #1
 800276e:	e7f2      	b.n	8002756 <__libc_init_array+0x1e>
 8002770:	08002858 	.word	0x08002858
 8002774:	08002858 	.word	0x08002858
 8002778:	08002858 	.word	0x08002858
 800277c:	0800285c 	.word	0x0800285c

08002780 <_init>:
 8002780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002782:	46c0      	nop			; (mov r8, r8)
 8002784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002786:	bc08      	pop	{r3}
 8002788:	469e      	mov	lr, r3
 800278a:	4770      	bx	lr

0800278c <_fini>:
 800278c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800278e:	46c0      	nop			; (mov r8, r8)
 8002790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002792:	bc08      	pop	{r3}
 8002794:	469e      	mov	lr, r3
 8002796:	4770      	bx	lr
