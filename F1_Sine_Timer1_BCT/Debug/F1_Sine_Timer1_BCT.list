
F1_Sine_Timer1_BCT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f6c  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800209c  0800209c  00020320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800209c  0800209c  00020320  2**0
                  CONTENTS
  4 .ARM          00000000  0800209c  0800209c  00020320  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800209c  0800209c  00020320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800209c  0800209c  0001209c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080020a0  080020a0  000120a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000320  20000000  080020a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006c0  20000320  080023c4  00020320  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009e0  080023c4  000209e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020320  2**0
                  CONTENTS, READONLY
 12 .debug_info   000059e9  00000000  00000000  00020349  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000f3d  00000000  00000000  00025d32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000748  00000000  00000000  00026c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006b0  00000000  00000000  000273b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e446  00000000  00000000  00027a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000592c  00000000  00000000  00035eae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000541a9  00000000  00000000  0003b7da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0008f983  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000213c  00000000  00000000  0008f9d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000320 	.word	0x20000320
 800014c:	00000000 	.word	0x00000000
 8000150:	08002084 	.word	0x08002084

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000324 	.word	0x20000324
 800016c:	08002084 	.word	0x08002084

08000170 <__aeabi_drsub>:
 8000170:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__adddf3>
 8000176:	bf00      	nop

08000178 <__aeabi_dsub>:
 8000178:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800017c <__adddf3>:
 800017c:	b530      	push	{r4, r5, lr}
 800017e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000182:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000186:	ea94 0f05 	teq	r4, r5
 800018a:	bf08      	it	eq
 800018c:	ea90 0f02 	teqeq	r0, r2
 8000190:	bf1f      	itttt	ne
 8000192:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000196:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800019e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a2:	f000 80e2 	beq.w	800036a <__adddf3+0x1ee>
 80001a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ae:	bfb8      	it	lt
 80001b0:	426d      	neglt	r5, r5
 80001b2:	dd0c      	ble.n	80001ce <__adddf3+0x52>
 80001b4:	442c      	add	r4, r5
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	ea82 0000 	eor.w	r0, r2, r0
 80001c2:	ea83 0101 	eor.w	r1, r3, r1
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	2d36      	cmp	r5, #54	; 0x36
 80001d0:	bf88      	it	hi
 80001d2:	bd30      	pophi	{r4, r5, pc}
 80001d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x70>
 80001e6:	4240      	negs	r0, r0
 80001e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001f8:	d002      	beq.n	8000200 <__adddf3+0x84>
 80001fa:	4252      	negs	r2, r2
 80001fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000200:	ea94 0f05 	teq	r4, r5
 8000204:	f000 80a7 	beq.w	8000356 <__adddf3+0x1da>
 8000208:	f1a4 0401 	sub.w	r4, r4, #1
 800020c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000210:	db0d      	blt.n	800022e <__adddf3+0xb2>
 8000212:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000216:	fa22 f205 	lsr.w	r2, r2, r5
 800021a:	1880      	adds	r0, r0, r2
 800021c:	f141 0100 	adc.w	r1, r1, #0
 8000220:	fa03 f20e 	lsl.w	r2, r3, lr
 8000224:	1880      	adds	r0, r0, r2
 8000226:	fa43 f305 	asr.w	r3, r3, r5
 800022a:	4159      	adcs	r1, r3
 800022c:	e00e      	b.n	800024c <__adddf3+0xd0>
 800022e:	f1a5 0520 	sub.w	r5, r5, #32
 8000232:	f10e 0e20 	add.w	lr, lr, #32
 8000236:	2a01      	cmp	r2, #1
 8000238:	fa03 fc0e 	lsl.w	ip, r3, lr
 800023c:	bf28      	it	cs
 800023e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000242:	fa43 f305 	asr.w	r3, r3, r5
 8000246:	18c0      	adds	r0, r0, r3
 8000248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800024c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000250:	d507      	bpl.n	8000262 <__adddf3+0xe6>
 8000252:	f04f 0e00 	mov.w	lr, #0
 8000256:	f1dc 0c00 	rsbs	ip, ip, #0
 800025a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800025e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000262:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000266:	d31b      	bcc.n	80002a0 <__adddf3+0x124>
 8000268:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800026c:	d30c      	bcc.n	8000288 <__adddf3+0x10c>
 800026e:	0849      	lsrs	r1, r1, #1
 8000270:	ea5f 0030 	movs.w	r0, r0, rrx
 8000274:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000278:	f104 0401 	add.w	r4, r4, #1
 800027c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000280:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000284:	f080 809a 	bcs.w	80003bc <__adddf3+0x240>
 8000288:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	ea41 0105 	orr.w	r1, r1, r5
 800029e:	bd30      	pop	{r4, r5, pc}
 80002a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a4:	4140      	adcs	r0, r0
 80002a6:	eb41 0101 	adc.w	r1, r1, r1
 80002aa:	3c01      	subs	r4, #1
 80002ac:	bf28      	it	cs
 80002ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b2:	d2e9      	bcs.n	8000288 <__adddf3+0x10c>
 80002b4:	f091 0f00 	teq	r1, #0
 80002b8:	bf04      	itt	eq
 80002ba:	4601      	moveq	r1, r0
 80002bc:	2000      	moveq	r0, #0
 80002be:	fab1 f381 	clz	r3, r1
 80002c2:	bf08      	it	eq
 80002c4:	3320      	addeq	r3, #32
 80002c6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ca:	f1b3 0220 	subs.w	r2, r3, #32
 80002ce:	da0c      	bge.n	80002ea <__adddf3+0x16e>
 80002d0:	320c      	adds	r2, #12
 80002d2:	dd08      	ble.n	80002e6 <__adddf3+0x16a>
 80002d4:	f102 0c14 	add.w	ip, r2, #20
 80002d8:	f1c2 020c 	rsb	r2, r2, #12
 80002dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e0:	fa21 f102 	lsr.w	r1, r1, r2
 80002e4:	e00c      	b.n	8000300 <__adddf3+0x184>
 80002e6:	f102 0214 	add.w	r2, r2, #20
 80002ea:	bfd8      	it	le
 80002ec:	f1c2 0c20 	rsble	ip, r2, #32
 80002f0:	fa01 f102 	lsl.w	r1, r1, r2
 80002f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002f8:	bfdc      	itt	le
 80002fa:	ea41 010c 	orrle.w	r1, r1, ip
 80002fe:	4090      	lslle	r0, r2
 8000300:	1ae4      	subs	r4, r4, r3
 8000302:	bfa2      	ittt	ge
 8000304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000308:	4329      	orrge	r1, r5
 800030a:	bd30      	popge	{r4, r5, pc}
 800030c:	ea6f 0404 	mvn.w	r4, r4
 8000310:	3c1f      	subs	r4, #31
 8000312:	da1c      	bge.n	800034e <__adddf3+0x1d2>
 8000314:	340c      	adds	r4, #12
 8000316:	dc0e      	bgt.n	8000336 <__adddf3+0x1ba>
 8000318:	f104 0414 	add.w	r4, r4, #20
 800031c:	f1c4 0220 	rsb	r2, r4, #32
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f302 	lsl.w	r3, r1, r2
 8000328:	ea40 0003 	orr.w	r0, r0, r3
 800032c:	fa21 f304 	lsr.w	r3, r1, r4
 8000330:	ea45 0103 	orr.w	r1, r5, r3
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f1c4 040c 	rsb	r4, r4, #12
 800033a:	f1c4 0220 	rsb	r2, r4, #32
 800033e:	fa20 f002 	lsr.w	r0, r0, r2
 8000342:	fa01 f304 	lsl.w	r3, r1, r4
 8000346:	ea40 0003 	orr.w	r0, r0, r3
 800034a:	4629      	mov	r1, r5
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	fa21 f004 	lsr.w	r0, r1, r4
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f094 0f00 	teq	r4, #0
 800035a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800035e:	bf06      	itte	eq
 8000360:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000364:	3401      	addeq	r4, #1
 8000366:	3d01      	subne	r5, #1
 8000368:	e74e      	b.n	8000208 <__adddf3+0x8c>
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf18      	it	ne
 8000370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000374:	d029      	beq.n	80003ca <__adddf3+0x24e>
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	d005      	beq.n	800038e <__adddf3+0x212>
 8000382:	ea54 0c00 	orrs.w	ip, r4, r0
 8000386:	bf04      	itt	eq
 8000388:	4619      	moveq	r1, r3
 800038a:	4610      	moveq	r0, r2
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	ea91 0f03 	teq	r1, r3
 8000392:	bf1e      	ittt	ne
 8000394:	2100      	movne	r1, #0
 8000396:	2000      	movne	r0, #0
 8000398:	bd30      	popne	{r4, r5, pc}
 800039a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800039e:	d105      	bne.n	80003ac <__adddf3+0x230>
 80003a0:	0040      	lsls	r0, r0, #1
 80003a2:	4149      	adcs	r1, r1
 80003a4:	bf28      	it	cs
 80003a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b0:	bf3c      	itt	cc
 80003b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003b6:	bd30      	popcc	{r4, r5, pc}
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf1a      	itte	ne
 80003d0:	4619      	movne	r1, r3
 80003d2:	4610      	movne	r0, r2
 80003d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003d8:	bf1c      	itt	ne
 80003da:	460b      	movne	r3, r1
 80003dc:	4602      	movne	r2, r0
 80003de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e2:	bf06      	itte	eq
 80003e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003e8:	ea91 0f03 	teqeq	r1, r3
 80003ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	bf00      	nop

080003f4 <__aeabi_ui2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f04f 0500 	mov.w	r5, #0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e750      	b.n	80002b4 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_i2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e73e      	b.n	80002b4 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_f2d>:
 8000438:	0042      	lsls	r2, r0, #1
 800043a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800043e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000442:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000446:	bf1f      	itttt	ne
 8000448:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000454:	4770      	bxne	lr
 8000456:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045a:	bf08      	it	eq
 800045c:	4770      	bxeq	lr
 800045e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000462:	bf04      	itt	eq
 8000464:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000478:	e71c      	b.n	80002b4 <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_ul2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f04f 0500 	mov.w	r5, #0
 800048a:	e00a      	b.n	80004a2 <__aeabi_l2d+0x16>

0800048c <__aeabi_l2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049a:	d502      	bpl.n	80004a2 <__aeabi_l2d+0x16>
 800049c:	4240      	negs	r0, r0
 800049e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ae:	f43f aed8 	beq.w	8000262 <__adddf3+0xe6>
 80004b2:	f04f 0203 	mov.w	r2, #3
 80004b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ba:	bf18      	it	ne
 80004bc:	3203      	addne	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d2:	fa20 f002 	lsr.w	r0, r0, r2
 80004d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004da:	ea40 000e 	orr.w	r0, r0, lr
 80004de:	fa21 f102 	lsr.w	r1, r1, r2
 80004e2:	4414      	add	r4, r2
 80004e4:	e6bd      	b.n	8000262 <__adddf3+0xe6>
 80004e6:	bf00      	nop

080004e8 <__gedf2>:
 80004e8:	f04f 3cff 	mov.w	ip, #4294967295
 80004ec:	e006      	b.n	80004fc <__cmpdf2+0x4>
 80004ee:	bf00      	nop

080004f0 <__ledf2>:
 80004f0:	f04f 0c01 	mov.w	ip, #1
 80004f4:	e002      	b.n	80004fc <__cmpdf2+0x4>
 80004f6:	bf00      	nop

080004f8 <__cmpdf2>:
 80004f8:	f04f 0c01 	mov.w	ip, #1
 80004fc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000500:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000504:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000508:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800050c:	bf18      	it	ne
 800050e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000512:	d01b      	beq.n	800054c <__cmpdf2+0x54>
 8000514:	b001      	add	sp, #4
 8000516:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800051a:	bf0c      	ite	eq
 800051c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000520:	ea91 0f03 	teqne	r1, r3
 8000524:	bf02      	ittt	eq
 8000526:	ea90 0f02 	teqeq	r0, r2
 800052a:	2000      	moveq	r0, #0
 800052c:	4770      	bxeq	lr
 800052e:	f110 0f00 	cmn.w	r0, #0
 8000532:	ea91 0f03 	teq	r1, r3
 8000536:	bf58      	it	pl
 8000538:	4299      	cmppl	r1, r3
 800053a:	bf08      	it	eq
 800053c:	4290      	cmpeq	r0, r2
 800053e:	bf2c      	ite	cs
 8000540:	17d8      	asrcs	r0, r3, #31
 8000542:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000546:	f040 0001 	orr.w	r0, r0, #1
 800054a:	4770      	bx	lr
 800054c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000550:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000554:	d102      	bne.n	800055c <__cmpdf2+0x64>
 8000556:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800055a:	d107      	bne.n	800056c <__cmpdf2+0x74>
 800055c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000560:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000564:	d1d6      	bne.n	8000514 <__cmpdf2+0x1c>
 8000566:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800056a:	d0d3      	beq.n	8000514 <__cmpdf2+0x1c>
 800056c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <__aeabi_cdrcmple>:
 8000574:	4684      	mov	ip, r0
 8000576:	4610      	mov	r0, r2
 8000578:	4662      	mov	r2, ip
 800057a:	468c      	mov	ip, r1
 800057c:	4619      	mov	r1, r3
 800057e:	4663      	mov	r3, ip
 8000580:	e000      	b.n	8000584 <__aeabi_cdcmpeq>
 8000582:	bf00      	nop

08000584 <__aeabi_cdcmpeq>:
 8000584:	b501      	push	{r0, lr}
 8000586:	f7ff ffb7 	bl	80004f8 <__cmpdf2>
 800058a:	2800      	cmp	r0, #0
 800058c:	bf48      	it	mi
 800058e:	f110 0f00 	cmnmi.w	r0, #0
 8000592:	bd01      	pop	{r0, pc}

08000594 <__aeabi_dcmpeq>:
 8000594:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000598:	f7ff fff4 	bl	8000584 <__aeabi_cdcmpeq>
 800059c:	bf0c      	ite	eq
 800059e:	2001      	moveq	r0, #1
 80005a0:	2000      	movne	r0, #0
 80005a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005a6:	bf00      	nop

080005a8 <__aeabi_dcmplt>:
 80005a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005ac:	f7ff ffea 	bl	8000584 <__aeabi_cdcmpeq>
 80005b0:	bf34      	ite	cc
 80005b2:	2001      	movcc	r0, #1
 80005b4:	2000      	movcs	r0, #0
 80005b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ba:	bf00      	nop

080005bc <__aeabi_dcmple>:
 80005bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c0:	f7ff ffe0 	bl	8000584 <__aeabi_cdcmpeq>
 80005c4:	bf94      	ite	ls
 80005c6:	2001      	movls	r0, #1
 80005c8:	2000      	movhi	r0, #0
 80005ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ce:	bf00      	nop

080005d0 <__aeabi_dcmpge>:
 80005d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d4:	f7ff ffce 	bl	8000574 <__aeabi_cdrcmple>
 80005d8:	bf94      	ite	ls
 80005da:	2001      	movls	r0, #1
 80005dc:	2000      	movhi	r0, #0
 80005de:	f85d fb08 	ldr.w	pc, [sp], #8
 80005e2:	bf00      	nop

080005e4 <__aeabi_dcmpgt>:
 80005e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005e8:	f7ff ffc4 	bl	8000574 <__aeabi_cdrcmple>
 80005ec:	bf34      	ite	cc
 80005ee:	2001      	movcc	r0, #1
 80005f0:	2000      	movcs	r0, #0
 80005f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005f6:	bf00      	nop

080005f8 <__aeabi_frsub>:
 80005f8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80005fc:	e002      	b.n	8000604 <__addsf3>
 80005fe:	bf00      	nop

08000600 <__aeabi_fsub>:
 8000600:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000604 <__addsf3>:
 8000604:	0042      	lsls	r2, r0, #1
 8000606:	bf1f      	itttt	ne
 8000608:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800060c:	ea92 0f03 	teqne	r2, r3
 8000610:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000614:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000618:	d06a      	beq.n	80006f0 <__addsf3+0xec>
 800061a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800061e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000622:	bfc1      	itttt	gt
 8000624:	18d2      	addgt	r2, r2, r3
 8000626:	4041      	eorgt	r1, r0
 8000628:	4048      	eorgt	r0, r1
 800062a:	4041      	eorgt	r1, r0
 800062c:	bfb8      	it	lt
 800062e:	425b      	neglt	r3, r3
 8000630:	2b19      	cmp	r3, #25
 8000632:	bf88      	it	hi
 8000634:	4770      	bxhi	lr
 8000636:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800063a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800063e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000642:	bf18      	it	ne
 8000644:	4240      	negne	r0, r0
 8000646:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800064a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800064e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000652:	bf18      	it	ne
 8000654:	4249      	negne	r1, r1
 8000656:	ea92 0f03 	teq	r2, r3
 800065a:	d03f      	beq.n	80006dc <__addsf3+0xd8>
 800065c:	f1a2 0201 	sub.w	r2, r2, #1
 8000660:	fa41 fc03 	asr.w	ip, r1, r3
 8000664:	eb10 000c 	adds.w	r0, r0, ip
 8000668:	f1c3 0320 	rsb	r3, r3, #32
 800066c:	fa01 f103 	lsl.w	r1, r1, r3
 8000670:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000674:	d502      	bpl.n	800067c <__addsf3+0x78>
 8000676:	4249      	negs	r1, r1
 8000678:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800067c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000680:	d313      	bcc.n	80006aa <__addsf3+0xa6>
 8000682:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000686:	d306      	bcc.n	8000696 <__addsf3+0x92>
 8000688:	0840      	lsrs	r0, r0, #1
 800068a:	ea4f 0131 	mov.w	r1, r1, rrx
 800068e:	f102 0201 	add.w	r2, r2, #1
 8000692:	2afe      	cmp	r2, #254	; 0xfe
 8000694:	d251      	bcs.n	800073a <__addsf3+0x136>
 8000696:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800069a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800069e:	bf08      	it	eq
 80006a0:	f020 0001 	biceq.w	r0, r0, #1
 80006a4:	ea40 0003 	orr.w	r0, r0, r3
 80006a8:	4770      	bx	lr
 80006aa:	0049      	lsls	r1, r1, #1
 80006ac:	eb40 0000 	adc.w	r0, r0, r0
 80006b0:	3a01      	subs	r2, #1
 80006b2:	bf28      	it	cs
 80006b4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80006b8:	d2ed      	bcs.n	8000696 <__addsf3+0x92>
 80006ba:	fab0 fc80 	clz	ip, r0
 80006be:	f1ac 0c08 	sub.w	ip, ip, #8
 80006c2:	ebb2 020c 	subs.w	r2, r2, ip
 80006c6:	fa00 f00c 	lsl.w	r0, r0, ip
 80006ca:	bfaa      	itet	ge
 80006cc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80006d0:	4252      	neglt	r2, r2
 80006d2:	4318      	orrge	r0, r3
 80006d4:	bfbc      	itt	lt
 80006d6:	40d0      	lsrlt	r0, r2
 80006d8:	4318      	orrlt	r0, r3
 80006da:	4770      	bx	lr
 80006dc:	f092 0f00 	teq	r2, #0
 80006e0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80006e4:	bf06      	itte	eq
 80006e6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80006ea:	3201      	addeq	r2, #1
 80006ec:	3b01      	subne	r3, #1
 80006ee:	e7b5      	b.n	800065c <__addsf3+0x58>
 80006f0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80006f4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80006f8:	bf18      	it	ne
 80006fa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80006fe:	d021      	beq.n	8000744 <__addsf3+0x140>
 8000700:	ea92 0f03 	teq	r2, r3
 8000704:	d004      	beq.n	8000710 <__addsf3+0x10c>
 8000706:	f092 0f00 	teq	r2, #0
 800070a:	bf08      	it	eq
 800070c:	4608      	moveq	r0, r1
 800070e:	4770      	bx	lr
 8000710:	ea90 0f01 	teq	r0, r1
 8000714:	bf1c      	itt	ne
 8000716:	2000      	movne	r0, #0
 8000718:	4770      	bxne	lr
 800071a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800071e:	d104      	bne.n	800072a <__addsf3+0x126>
 8000720:	0040      	lsls	r0, r0, #1
 8000722:	bf28      	it	cs
 8000724:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000728:	4770      	bx	lr
 800072a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800072e:	bf3c      	itt	cc
 8000730:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000734:	4770      	bxcc	lr
 8000736:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800073a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800073e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000742:	4770      	bx	lr
 8000744:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000748:	bf16      	itet	ne
 800074a:	4608      	movne	r0, r1
 800074c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000750:	4601      	movne	r1, r0
 8000752:	0242      	lsls	r2, r0, #9
 8000754:	bf06      	itte	eq
 8000756:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800075a:	ea90 0f01 	teqeq	r0, r1
 800075e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000762:	4770      	bx	lr

08000764 <__aeabi_ui2f>:
 8000764:	f04f 0300 	mov.w	r3, #0
 8000768:	e004      	b.n	8000774 <__aeabi_i2f+0x8>
 800076a:	bf00      	nop

0800076c <__aeabi_i2f>:
 800076c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000770:	bf48      	it	mi
 8000772:	4240      	negmi	r0, r0
 8000774:	ea5f 0c00 	movs.w	ip, r0
 8000778:	bf08      	it	eq
 800077a:	4770      	bxeq	lr
 800077c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000780:	4601      	mov	r1, r0
 8000782:	f04f 0000 	mov.w	r0, #0
 8000786:	e01c      	b.n	80007c2 <__aeabi_l2f+0x2a>

08000788 <__aeabi_ul2f>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	f04f 0300 	mov.w	r3, #0
 8000794:	e00a      	b.n	80007ac <__aeabi_l2f+0x14>
 8000796:	bf00      	nop

08000798 <__aeabi_l2f>:
 8000798:	ea50 0201 	orrs.w	r2, r0, r1
 800079c:	bf08      	it	eq
 800079e:	4770      	bxeq	lr
 80007a0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80007a4:	d502      	bpl.n	80007ac <__aeabi_l2f+0x14>
 80007a6:	4240      	negs	r0, r0
 80007a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007ac:	ea5f 0c01 	movs.w	ip, r1
 80007b0:	bf02      	ittt	eq
 80007b2:	4684      	moveq	ip, r0
 80007b4:	4601      	moveq	r1, r0
 80007b6:	2000      	moveq	r0, #0
 80007b8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80007bc:	bf08      	it	eq
 80007be:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80007c2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80007c6:	fabc f28c 	clz	r2, ip
 80007ca:	3a08      	subs	r2, #8
 80007cc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80007d0:	db10      	blt.n	80007f4 <__aeabi_l2f+0x5c>
 80007d2:	fa01 fc02 	lsl.w	ip, r1, r2
 80007d6:	4463      	add	r3, ip
 80007d8:	fa00 fc02 	lsl.w	ip, r0, r2
 80007dc:	f1c2 0220 	rsb	r2, r2, #32
 80007e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80007e4:	fa20 f202 	lsr.w	r2, r0, r2
 80007e8:	eb43 0002 	adc.w	r0, r3, r2
 80007ec:	bf08      	it	eq
 80007ee:	f020 0001 	biceq.w	r0, r0, #1
 80007f2:	4770      	bx	lr
 80007f4:	f102 0220 	add.w	r2, r2, #32
 80007f8:	fa01 fc02 	lsl.w	ip, r1, r2
 80007fc:	f1c2 0220 	rsb	r2, r2, #32
 8000800:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000804:	fa21 f202 	lsr.w	r2, r1, r2
 8000808:	eb43 0002 	adc.w	r0, r3, r2
 800080c:	bf08      	it	eq
 800080e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000812:	4770      	bx	lr

08000814 <__aeabi_fmul>:
 8000814:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000818:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800081c:	bf1e      	ittt	ne
 800081e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000822:	ea92 0f0c 	teqne	r2, ip
 8000826:	ea93 0f0c 	teqne	r3, ip
 800082a:	d06f      	beq.n	800090c <__aeabi_fmul+0xf8>
 800082c:	441a      	add	r2, r3
 800082e:	ea80 0c01 	eor.w	ip, r0, r1
 8000832:	0240      	lsls	r0, r0, #9
 8000834:	bf18      	it	ne
 8000836:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800083a:	d01e      	beq.n	800087a <__aeabi_fmul+0x66>
 800083c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000840:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000844:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000848:	fba0 3101 	umull	r3, r1, r0, r1
 800084c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000850:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000854:	bf3e      	ittt	cc
 8000856:	0049      	lslcc	r1, r1, #1
 8000858:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800085c:	005b      	lslcc	r3, r3, #1
 800085e:	ea40 0001 	orr.w	r0, r0, r1
 8000862:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000866:	2afd      	cmp	r2, #253	; 0xfd
 8000868:	d81d      	bhi.n	80008a6 <__aeabi_fmul+0x92>
 800086a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800086e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000872:	bf08      	it	eq
 8000874:	f020 0001 	biceq.w	r0, r0, #1
 8000878:	4770      	bx	lr
 800087a:	f090 0f00 	teq	r0, #0
 800087e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000882:	bf08      	it	eq
 8000884:	0249      	lsleq	r1, r1, #9
 8000886:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800088a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800088e:	3a7f      	subs	r2, #127	; 0x7f
 8000890:	bfc2      	ittt	gt
 8000892:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000896:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800089a:	4770      	bxgt	lr
 800089c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008a0:	f04f 0300 	mov.w	r3, #0
 80008a4:	3a01      	subs	r2, #1
 80008a6:	dc5d      	bgt.n	8000964 <__aeabi_fmul+0x150>
 80008a8:	f112 0f19 	cmn.w	r2, #25
 80008ac:	bfdc      	itt	le
 80008ae:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80008b2:	4770      	bxle	lr
 80008b4:	f1c2 0200 	rsb	r2, r2, #0
 80008b8:	0041      	lsls	r1, r0, #1
 80008ba:	fa21 f102 	lsr.w	r1, r1, r2
 80008be:	f1c2 0220 	rsb	r2, r2, #32
 80008c2:	fa00 fc02 	lsl.w	ip, r0, r2
 80008c6:	ea5f 0031 	movs.w	r0, r1, rrx
 80008ca:	f140 0000 	adc.w	r0, r0, #0
 80008ce:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80008d2:	bf08      	it	eq
 80008d4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80008d8:	4770      	bx	lr
 80008da:	f092 0f00 	teq	r2, #0
 80008de:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80008e2:	bf02      	ittt	eq
 80008e4:	0040      	lsleq	r0, r0, #1
 80008e6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80008ea:	3a01      	subeq	r2, #1
 80008ec:	d0f9      	beq.n	80008e2 <__aeabi_fmul+0xce>
 80008ee:	ea40 000c 	orr.w	r0, r0, ip
 80008f2:	f093 0f00 	teq	r3, #0
 80008f6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80008fa:	bf02      	ittt	eq
 80008fc:	0049      	lsleq	r1, r1, #1
 80008fe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000902:	3b01      	subeq	r3, #1
 8000904:	d0f9      	beq.n	80008fa <__aeabi_fmul+0xe6>
 8000906:	ea41 010c 	orr.w	r1, r1, ip
 800090a:	e78f      	b.n	800082c <__aeabi_fmul+0x18>
 800090c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000910:	ea92 0f0c 	teq	r2, ip
 8000914:	bf18      	it	ne
 8000916:	ea93 0f0c 	teqne	r3, ip
 800091a:	d00a      	beq.n	8000932 <__aeabi_fmul+0x11e>
 800091c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000920:	bf18      	it	ne
 8000922:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000926:	d1d8      	bne.n	80008da <__aeabi_fmul+0xc6>
 8000928:	ea80 0001 	eor.w	r0, r0, r1
 800092c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000930:	4770      	bx	lr
 8000932:	f090 0f00 	teq	r0, #0
 8000936:	bf17      	itett	ne
 8000938:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 800093c:	4608      	moveq	r0, r1
 800093e:	f091 0f00 	teqne	r1, #0
 8000942:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000946:	d014      	beq.n	8000972 <__aeabi_fmul+0x15e>
 8000948:	ea92 0f0c 	teq	r2, ip
 800094c:	d101      	bne.n	8000952 <__aeabi_fmul+0x13e>
 800094e:	0242      	lsls	r2, r0, #9
 8000950:	d10f      	bne.n	8000972 <__aeabi_fmul+0x15e>
 8000952:	ea93 0f0c 	teq	r3, ip
 8000956:	d103      	bne.n	8000960 <__aeabi_fmul+0x14c>
 8000958:	024b      	lsls	r3, r1, #9
 800095a:	bf18      	it	ne
 800095c:	4608      	movne	r0, r1
 800095e:	d108      	bne.n	8000972 <__aeabi_fmul+0x15e>
 8000960:	ea80 0001 	eor.w	r0, r0, r1
 8000964:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000968:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800096c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000970:	4770      	bx	lr
 8000972:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000976:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800097a:	4770      	bx	lr

0800097c <__aeabi_fdiv>:
 800097c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000980:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000984:	bf1e      	ittt	ne
 8000986:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800098a:	ea92 0f0c 	teqne	r2, ip
 800098e:	ea93 0f0c 	teqne	r3, ip
 8000992:	d069      	beq.n	8000a68 <__aeabi_fdiv+0xec>
 8000994:	eba2 0203 	sub.w	r2, r2, r3
 8000998:	ea80 0c01 	eor.w	ip, r0, r1
 800099c:	0249      	lsls	r1, r1, #9
 800099e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80009a2:	d037      	beq.n	8000a14 <__aeabi_fdiv+0x98>
 80009a4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80009a8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80009ac:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80009b0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80009b4:	428b      	cmp	r3, r1
 80009b6:	bf38      	it	cc
 80009b8:	005b      	lslcc	r3, r3, #1
 80009ba:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80009be:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80009c2:	428b      	cmp	r3, r1
 80009c4:	bf24      	itt	cs
 80009c6:	1a5b      	subcs	r3, r3, r1
 80009c8:	ea40 000c 	orrcs.w	r0, r0, ip
 80009cc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80009d0:	bf24      	itt	cs
 80009d2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80009d6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009da:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80009de:	bf24      	itt	cs
 80009e0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80009e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009e8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80009ec:	bf24      	itt	cs
 80009ee:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80009f2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009f6:	011b      	lsls	r3, r3, #4
 80009f8:	bf18      	it	ne
 80009fa:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80009fe:	d1e0      	bne.n	80009c2 <__aeabi_fdiv+0x46>
 8000a00:	2afd      	cmp	r2, #253	; 0xfd
 8000a02:	f63f af50 	bhi.w	80008a6 <__aeabi_fmul+0x92>
 8000a06:	428b      	cmp	r3, r1
 8000a08:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a0c:	bf08      	it	eq
 8000a0e:	f020 0001 	biceq.w	r0, r0, #1
 8000a12:	4770      	bx	lr
 8000a14:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a18:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a1c:	327f      	adds	r2, #127	; 0x7f
 8000a1e:	bfc2      	ittt	gt
 8000a20:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a24:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a28:	4770      	bxgt	lr
 8000a2a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a2e:	f04f 0300 	mov.w	r3, #0
 8000a32:	3a01      	subs	r2, #1
 8000a34:	e737      	b.n	80008a6 <__aeabi_fmul+0x92>
 8000a36:	f092 0f00 	teq	r2, #0
 8000a3a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000a3e:	bf02      	ittt	eq
 8000a40:	0040      	lsleq	r0, r0, #1
 8000a42:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000a46:	3a01      	subeq	r2, #1
 8000a48:	d0f9      	beq.n	8000a3e <__aeabi_fdiv+0xc2>
 8000a4a:	ea40 000c 	orr.w	r0, r0, ip
 8000a4e:	f093 0f00 	teq	r3, #0
 8000a52:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a56:	bf02      	ittt	eq
 8000a58:	0049      	lsleq	r1, r1, #1
 8000a5a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000a5e:	3b01      	subeq	r3, #1
 8000a60:	d0f9      	beq.n	8000a56 <__aeabi_fdiv+0xda>
 8000a62:	ea41 010c 	orr.w	r1, r1, ip
 8000a66:	e795      	b.n	8000994 <__aeabi_fdiv+0x18>
 8000a68:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a6c:	ea92 0f0c 	teq	r2, ip
 8000a70:	d108      	bne.n	8000a84 <__aeabi_fdiv+0x108>
 8000a72:	0242      	lsls	r2, r0, #9
 8000a74:	f47f af7d 	bne.w	8000972 <__aeabi_fmul+0x15e>
 8000a78:	ea93 0f0c 	teq	r3, ip
 8000a7c:	f47f af70 	bne.w	8000960 <__aeabi_fmul+0x14c>
 8000a80:	4608      	mov	r0, r1
 8000a82:	e776      	b.n	8000972 <__aeabi_fmul+0x15e>
 8000a84:	ea93 0f0c 	teq	r3, ip
 8000a88:	d104      	bne.n	8000a94 <__aeabi_fdiv+0x118>
 8000a8a:	024b      	lsls	r3, r1, #9
 8000a8c:	f43f af4c 	beq.w	8000928 <__aeabi_fmul+0x114>
 8000a90:	4608      	mov	r0, r1
 8000a92:	e76e      	b.n	8000972 <__aeabi_fmul+0x15e>
 8000a94:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000a98:	bf18      	it	ne
 8000a9a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000a9e:	d1ca      	bne.n	8000a36 <__aeabi_fdiv+0xba>
 8000aa0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000aa4:	f47f af5c 	bne.w	8000960 <__aeabi_fmul+0x14c>
 8000aa8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000aac:	f47f af3c 	bne.w	8000928 <__aeabi_fmul+0x114>
 8000ab0:	e75f      	b.n	8000972 <__aeabi_fmul+0x15e>
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_f2uiz>:
 8000ab4:	0042      	lsls	r2, r0, #1
 8000ab6:	d20e      	bcs.n	8000ad6 <__aeabi_f2uiz+0x22>
 8000ab8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000abc:	d30b      	bcc.n	8000ad6 <__aeabi_f2uiz+0x22>
 8000abe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000ac2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ac6:	d409      	bmi.n	8000adc <__aeabi_f2uiz+0x28>
 8000ac8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000acc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad0:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr
 8000adc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000ae0:	d101      	bne.n	8000ae6 <__aeabi_f2uiz+0x32>
 8000ae2:	0242      	lsls	r2, r0, #9
 8000ae4:	d102      	bne.n	8000aec <__aeabi_f2uiz+0x38>
 8000ae6:	f04f 30ff 	mov.w	r0, #4294967295
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	0000      	movs	r0, r0
	...

08000af8 <main>:
float k = 0.3;

int Read_pid = 0;
float read_p1 = 0;

int main(void) {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0

	SystemInit();
 8000afe:	f000 fa99 	bl	8001034 <SystemInit>
	TIM1_Configuraion();
 8000b02:	f000 f8dd 	bl	8000cc0 <TIM1_Configuraion>
	ADC_Configuration();
 8000b06:	f000 f99f 	bl	8000e48 <ADC_Configuration>

	Init_PID(K_P * SCALING_FACTOR, K_I * SCALING_FACTOR, K_D * SCALING_FACTOR,
 8000b0a:	4b61      	ldr	r3, [pc, #388]	; (8000c90 <main+0x198>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	2100      	movs	r1, #0
 8000b10:	2008      	movs	r0, #8
 8000b12:	f000 fbd5 	bl	80012c0 <Init_PID>
			&pidData);

	while (1) {

		if (Ext_ReadAdc_Max1 > 1900 && Ext_ReadAdc_Max1 < 2200) {
 8000b16:	4b5f      	ldr	r3, [pc, #380]	; (8000c94 <main+0x19c>)
 8000b18:	881b      	ldrh	r3, [r3, #0]
 8000b1a:	f240 726c 	movw	r2, #1900	; 0x76c
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d90a      	bls.n	8000b38 <main+0x40>
 8000b22:	4b5c      	ldr	r3, [pc, #368]	; (8000c94 <main+0x19c>)
 8000b24:	881b      	ldrh	r3, [r3, #0]
 8000b26:	f640 0297 	movw	r2, #2199	; 0x897
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d804      	bhi.n	8000b38 <main+0x40>
			k = k;
 8000b2e:	4b5a      	ldr	r3, [pc, #360]	; (8000c98 <main+0x1a0>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a59      	ldr	r2, [pc, #356]	; (8000c98 <main+0x1a0>)
 8000b34:	6013      	str	r3, [r2, #0]
 8000b36:	e07c      	b.n	8000c32 <main+0x13a>

		} else {
			k += read_p1;
 8000b38:	4b57      	ldr	r3, [pc, #348]	; (8000c98 <main+0x1a0>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a57      	ldr	r2, [pc, #348]	; (8000c9c <main+0x1a4>)
 8000b3e:	6812      	ldr	r2, [r2, #0]
 8000b40:	4611      	mov	r1, r2
 8000b42:	4618      	mov	r0, r3
 8000b44:	f7ff fd5e 	bl	8000604 <__addsf3>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	461a      	mov	r2, r3
 8000b4c:	4b52      	ldr	r3, [pc, #328]	; (8000c98 <main+0x1a0>)
 8000b4e:	601a      	str	r2, [r3, #0]
			if (k >= 0.950) {
 8000b50:	4b51      	ldr	r3, [pc, #324]	; (8000c98 <main+0x1a0>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff fc6f 	bl	8000438 <__aeabi_f2d>
 8000b5a:	a349      	add	r3, pc, #292	; (adr r3, 8000c80 <main+0x188>)
 8000b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b60:	f7ff fd36 	bl	80005d0 <__aeabi_dcmpge>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d003      	beq.n	8000b72 <main+0x7a>
				k = 0.950;
 8000b6a:	4b4b      	ldr	r3, [pc, #300]	; (8000c98 <main+0x1a0>)
 8000b6c:	4a4c      	ldr	r2, [pc, #304]	; (8000ca0 <main+0x1a8>)
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	e05f      	b.n	8000c32 <main+0x13a>
			} else if (k < 0.3) {
 8000b72:	4b49      	ldr	r3, [pc, #292]	; (8000c98 <main+0x1a0>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4618      	mov	r0, r3
 8000b78:	f7ff fc5e 	bl	8000438 <__aeabi_f2d>
 8000b7c:	a342      	add	r3, pc, #264	; (adr r3, 8000c88 <main+0x190>)
 8000b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b82:	f7ff fd11 	bl	80005a8 <__aeabi_dcmplt>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d003      	beq.n	8000b94 <main+0x9c>
				k = 0.3;
 8000b8c:	4b42      	ldr	r3, [pc, #264]	; (8000c98 <main+0x1a0>)
 8000b8e:	4a45      	ldr	r2, [pc, #276]	; (8000ca4 <main+0x1ac>)
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	e04e      	b.n	8000c32 <main+0x13a>
			} else {
				if (chonmang == 1) {
 8000b94:	4b44      	ldr	r3, [pc, #272]	; (8000ca8 <main+0x1b0>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d125      	bne.n	8000be8 <main+0xf0>

					for (int g = 0; g < 396; g++) {
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	607b      	str	r3, [r7, #4]
 8000ba0:	e01a      	b.n	8000bd8 <main+0xe0>
						L3[g] = (L4[g] * k);
 8000ba2:	4a42      	ldr	r2, [pc, #264]	; (8000cac <main+0x1b4>)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff fdde 	bl	800076c <__aeabi_i2f>
 8000bb0:	4602      	mov	r2, r0
 8000bb2:	4b39      	ldr	r3, [pc, #228]	; (8000c98 <main+0x1a0>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4610      	mov	r0, r2
 8000bba:	f7ff fe2b 	bl	8000814 <__aeabi_fmul>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff ff77 	bl	8000ab4 <__aeabi_f2uiz>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	b299      	uxth	r1, r3
 8000bca:	4a39      	ldr	r2, [pc, #228]	; (8000cb0 <main+0x1b8>)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					for (int g = 0; g < 396; g++) {
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	f5b3 7fc6 	cmp.w	r3, #396	; 0x18c
 8000bde:	dbe0      	blt.n	8000ba2 <main+0xaa>
					}
					chonmang = 0;
 8000be0:	4b31      	ldr	r3, [pc, #196]	; (8000ca8 <main+0x1b0>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	e024      	b.n	8000c32 <main+0x13a>
				} else {

					for (int g = 0; g < 396; g++) {
 8000be8:	2300      	movs	r3, #0
 8000bea:	603b      	str	r3, [r7, #0]
 8000bec:	e01a      	b.n	8000c24 <main+0x12c>
						L5[g] = (L4[g] * k);
 8000bee:	4a2f      	ldr	r2, [pc, #188]	; (8000cac <main+0x1b4>)
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f7ff fdb8 	bl	800076c <__aeabi_i2f>
 8000bfc:	4602      	mov	r2, r0
 8000bfe:	4b26      	ldr	r3, [pc, #152]	; (8000c98 <main+0x1a0>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4619      	mov	r1, r3
 8000c04:	4610      	mov	r0, r2
 8000c06:	f7ff fe05 	bl	8000814 <__aeabi_fmul>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff ff51 	bl	8000ab4 <__aeabi_f2uiz>
 8000c12:	4603      	mov	r3, r0
 8000c14:	b299      	uxth	r1, r3
 8000c16:	4a27      	ldr	r2, [pc, #156]	; (8000cb4 <main+0x1bc>)
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					for (int g = 0; g < 396; g++) {
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	3301      	adds	r3, #1
 8000c22:	603b      	str	r3, [r7, #0]
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	f5b3 7fc6 	cmp.w	r3, #396	; 0x18c
 8000c2a:	dbe0      	blt.n	8000bee <main+0xf6>
					}
					chonmang = 1;
 8000c2c:	4b1e      	ldr	r3, [pc, #120]	; (8000ca8 <main+0x1b0>)
 8000c2e:	2201      	movs	r2, #1
 8000c30:	601a      	str	r2, [r3, #0]
//				Ext_K = k;

			}
		}

		Read_pid = PID(2048, Ext_ReadAdc_Max1, &pidData);
 8000c32:	4b18      	ldr	r3, [pc, #96]	; (8000c94 <main+0x19c>)
 8000c34:	881b      	ldrh	r3, [r3, #0]
 8000c36:	4a16      	ldr	r2, [pc, #88]	; (8000c90 <main+0x198>)
 8000c38:	4619      	mov	r1, r3
 8000c3a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000c3e:	f000 fb6d 	bl	800131c <PID>
 8000c42:	4603      	mov	r3, r0
 8000c44:	4a1c      	ldr	r2, [pc, #112]	; (8000cb8 <main+0x1c0>)
 8000c46:	6013      	str	r3, [r2, #0]

		if (Read_pid >= -2048 && Read_pid <= 2048) {
 8000c48:	4b1b      	ldr	r3, [pc, #108]	; (8000cb8 <main+0x1c0>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f513 6f00 	cmn.w	r3, #2048	; 0x800
 8000c50:	f6ff af61 	blt.w	8000b16 <main+0x1e>
 8000c54:	4b18      	ldr	r3, [pc, #96]	; (8000cb8 <main+0x1c0>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000c5c:	f73f af5b 	bgt.w	8000b16 <main+0x1e>
			read_p1 = ((float) Read_pid) / (float) 4096000;
 8000c60:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <main+0x1c0>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff fd81 	bl	800076c <__aeabi_i2f>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	4913      	ldr	r1, [pc, #76]	; (8000cbc <main+0x1c4>)
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f7ff fe84 	bl	800097c <__aeabi_fdiv>
 8000c74:	4603      	mov	r3, r0
 8000c76:	461a      	mov	r2, r3
 8000c78:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <main+0x1a4>)
 8000c7a:	601a      	str	r2, [r3, #0]
		if (Ext_ReadAdc_Max1 > 1900 && Ext_ReadAdc_Max1 < 2200) {
 8000c7c:	e74b      	b.n	8000b16 <main+0x1e>
 8000c7e:	bf00      	nop
 8000c80:	66666666 	.word	0x66666666
 8000c84:	3fee6666 	.word	0x3fee6666
 8000c88:	33333333 	.word	0x33333333
 8000c8c:	3fd33333 	.word	0x3fd33333
 8000c90:	20000384 	.word	0x20000384
 8000c94:	200009d0 	.word	0x200009d0
 8000c98:	20000004 	.word	0x20000004
 8000c9c:	200009dc 	.word	0x200009dc
 8000ca0:	3f733333 	.word	0x3f733333
 8000ca4:	3e99999a 	.word	0x3e99999a
 8000ca8:	200009d4 	.word	0x200009d4
 8000cac:	20000008 	.word	0x20000008
 8000cb0:	200003a0 	.word	0x200003a0
 8000cb4:	200006b8 	.word	0x200006b8
 8000cb8:	200009d8 	.word	0x200009d8
 8000cbc:	4a7a0000 	.word	0x4a7a0000

08000cc0 <TIM1_Configuraion>:
		}
	}
}

void TIM1_Configuraion(void) {
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
	/*Cap clock*/
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOB, ENABLE);
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	200c      	movs	r0, #12
 8000cc8:	f000 fe24 	bl	8001914 <RCC_APB2PeriphClockCmd>

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 8000ccc:	2101      	movs	r1, #1
 8000cce:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000cd2:	f000 fe1f 	bl	8001914 <RCC_APB2PeriphClockCmd>

	/* Cau hinh channel */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9;
 8000cd6:	4b54      	ldr	r3, [pc, #336]	; (8000e28 <TIM1_Configuraion+0x168>)
 8000cd8:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000cdc:	801a      	strh	r2, [r3, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8000cde:	4b52      	ldr	r3, [pc, #328]	; (8000e28 <TIM1_Configuraion+0x168>)
 8000ce0:	2218      	movs	r2, #24
 8000ce2:	70da      	strb	r2, [r3, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000ce4:	4b50      	ldr	r3, [pc, #320]	; (8000e28 <TIM1_Configuraion+0x168>)
 8000ce6:	2203      	movs	r2, #3
 8000ce8:	709a      	strb	r2, [r3, #2]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000cea:	494f      	ldr	r1, [pc, #316]	; (8000e28 <TIM1_Configuraion+0x168>)
 8000cec:	484f      	ldr	r0, [pc, #316]	; (8000e2c <TIM1_Configuraion+0x16c>)
 8000cee:	f000 fd55 	bl	800179c <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_14;
 8000cf2:	4b4d      	ldr	r3, [pc, #308]	; (8000e28 <TIM1_Configuraion+0x168>)
 8000cf4:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8000cf8:	801a      	strh	r2, [r3, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8000cfa:	4b4b      	ldr	r3, [pc, #300]	; (8000e28 <TIM1_Configuraion+0x168>)
 8000cfc:	2218      	movs	r2, #24
 8000cfe:	70da      	strb	r2, [r3, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000d00:	4b49      	ldr	r3, [pc, #292]	; (8000e28 <TIM1_Configuraion+0x168>)
 8000d02:	2203      	movs	r2, #3
 8000d04:	709a      	strb	r2, [r3, #2]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000d06:	4948      	ldr	r1, [pc, #288]	; (8000e28 <TIM1_Configuraion+0x168>)
 8000d08:	4849      	ldr	r0, [pc, #292]	; (8000e30 <TIM1_Configuraion+0x170>)
 8000d0a:	f000 fd47 	bl	800179c <GPIO_Init>

	/* cau hinh timer base */
	TIM_TimeBaseStructure.TIM_Prescaler = 2;
 8000d0e:	4b49      	ldr	r3, [pc, #292]	; (8000e34 <TIM1_Configuraion+0x174>)
 8000d10:	2202      	movs	r2, #2
 8000d12:	801a      	strh	r2, [r3, #0]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8000d14:	4b47      	ldr	r3, [pc, #284]	; (8000e34 <TIM1_Configuraion+0x174>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	805a      	strh	r2, [r3, #2]
	TIM_TimeBaseStructure.TIM_Period = 1200;
 8000d1a:	4b46      	ldr	r3, [pc, #280]	; (8000e34 <TIM1_Configuraion+0x174>)
 8000d1c:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8000d20:	809a      	strh	r2, [r3, #4]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 8000d22:	4b44      	ldr	r3, [pc, #272]	; (8000e34 <TIM1_Configuraion+0x174>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	80da      	strh	r2, [r3, #6]
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
 8000d28:	4b42      	ldr	r3, [pc, #264]	; (8000e34 <TIM1_Configuraion+0x174>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	721a      	strb	r2, [r3, #8]
	TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);
 8000d2e:	4941      	ldr	r1, [pc, #260]	; (8000e34 <TIM1_Configuraion+0x174>)
 8000d30:	4841      	ldr	r0, [pc, #260]	; (8000e38 <TIM1_Configuraion+0x178>)
 8000d32:	f000 fe0d 	bl	8001950 <TIM_TimeBaseInit>

	/* cho phep TIM1 hoat dong */
	TIM_Cmd(TIM1, ENABLE);
 8000d36:	2101      	movs	r1, #1
 8000d38:	483f      	ldr	r0, [pc, #252]	; (8000e38 <TIM1_Configuraion+0x178>)
 8000d3a:	f000 ffc0 	bl	8001cbe <TIM_Cmd>

	/* config NVIC  */
	TIM_ClearFlag(TIM1, TIM_FLAG_Update);
 8000d3e:	2101      	movs	r1, #1
 8000d40:	483d      	ldr	r0, [pc, #244]	; (8000e38 <TIM1_Configuraion+0x178>)
 8000d42:	f001 f942 	bl	8001fca <TIM_ClearFlag>
	TIM_ITConfig(TIM1, TIM_IT_Update, ENABLE);
 8000d46:	2201      	movs	r2, #1
 8000d48:	2101      	movs	r1, #1
 8000d4a:	483b      	ldr	r0, [pc, #236]	; (8000e38 <TIM1_Configuraion+0x178>)
 8000d4c:	f000 fffb 	bl	8001d46 <TIM_ITConfig>

	/* cau hinh channel3 o mode PWM */
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8000d50:	4b3a      	ldr	r3, [pc, #232]	; (8000e3c <TIM1_Configuraion+0x17c>)
 8000d52:	2260      	movs	r2, #96	; 0x60
 8000d54:	801a      	strh	r2, [r3, #0]
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8000d56:	4b39      	ldr	r3, [pc, #228]	; (8000e3c <TIM1_Configuraion+0x17c>)
 8000d58:	2201      	movs	r2, #1
 8000d5a:	805a      	strh	r2, [r3, #2]
	TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Enable;     // nguoc
 8000d5c:	4b37      	ldr	r3, [pc, #220]	; (8000e3c <TIM1_Configuraion+0x17c>)
 8000d5e:	2204      	movs	r2, #4
 8000d60:	809a      	strh	r2, [r3, #4]
	TIM_OCInitStructure.TIM_Pulse = 0;
 8000d62:	4b36      	ldr	r3, [pc, #216]	; (8000e3c <TIM1_Configuraion+0x17c>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	80da      	strh	r2, [r3, #6]
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_Low;
 8000d68:	4b34      	ldr	r3, [pc, #208]	; (8000e3c <TIM1_Configuraion+0x17c>)
 8000d6a:	2202      	movs	r2, #2
 8000d6c:	811a      	strh	r2, [r3, #8]
	TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_Low;         // nguoc
 8000d6e:	4b33      	ldr	r3, [pc, #204]	; (8000e3c <TIM1_Configuraion+0x17c>)
 8000d70:	2208      	movs	r2, #8
 8000d72:	815a      	strh	r2, [r3, #10]

	TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Reset;
 8000d74:	4b31      	ldr	r3, [pc, #196]	; (8000e3c <TIM1_Configuraion+0x17c>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	819a      	strh	r2, [r3, #12]
	TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCIdleState_Reset;       // nguoc
 8000d7a:	4b30      	ldr	r3, [pc, #192]	; (8000e3c <TIM1_Configuraion+0x17c>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	81da      	strh	r2, [r3, #14]

	TIM_OC1Init(TIM1, &TIM_OCInitStructure);
 8000d80:	492e      	ldr	r1, [pc, #184]	; (8000e3c <TIM1_Configuraion+0x17c>)
 8000d82:	482d      	ldr	r0, [pc, #180]	; (8000e38 <TIM1_Configuraion+0x178>)
 8000d84:	f000 fe60 	bl	8001a48 <TIM_OC1Init>
	TIM_OC2Init(TIM1, &TIM_OCInitStructure);
 8000d88:	492c      	ldr	r1, [pc, #176]	; (8000e3c <TIM1_Configuraion+0x17c>)
 8000d8a:	482b      	ldr	r0, [pc, #172]	; (8000e38 <TIM1_Configuraion+0x178>)
 8000d8c:	f000 fee8 	bl	8001b60 <TIM_OC2Init>

	/* Tai truoc thanh ghi CCRx */
	TIM_OC1PreloadConfig(TIM1, TIM_OCPreload_Enable);
 8000d90:	2108      	movs	r1, #8
 8000d92:	4829      	ldr	r0, [pc, #164]	; (8000e38 <TIM1_Configuraion+0x178>)
 8000d94:	f001 f819 	bl	8001dca <TIM_OC1PreloadConfig>
	TIM_OC2PreloadConfig(TIM1, TIM_OCPreload_Enable);
 8000d98:	2108      	movs	r1, #8
 8000d9a:	4827      	ldr	r0, [pc, #156]	; (8000e38 <TIM1_Configuraion+0x178>)
 8000d9c:	f001 f830 	bl	8001e00 <TIM_OC2PreloadConfig>
	/* tai truoc thanh ghi dem ARR(Preiod) */
	TIM_ARRPreloadConfig(TIM1, ENABLE);
 8000da0:	2101      	movs	r1, #1
 8000da2:	4825      	ldr	r0, [pc, #148]	; (8000e38 <TIM1_Configuraion+0x178>)
 8000da4:	f000 fff2 	bl	8001d8c <TIM_ARRPreloadConfig>

	TIM_BDTRInitStructure.TIM_OSSRState = TIM_OSSRState_Enable;
 8000da8:	4b25      	ldr	r3, [pc, #148]	; (8000e40 <TIM1_Configuraion+0x180>)
 8000daa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000dae:	801a      	strh	r2, [r3, #0]
	TIM_BDTRInitStructure.TIM_OSSIState = TIM_OSSIState_Enable;
 8000db0:	4b23      	ldr	r3, [pc, #140]	; (8000e40 <TIM1_Configuraion+0x180>)
 8000db2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000db6:	805a      	strh	r2, [r3, #2]
	TIM_BDTRInitStructure.TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 8000db8:	4b21      	ldr	r3, [pc, #132]	; (8000e40 <TIM1_Configuraion+0x180>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	809a      	strh	r2, [r3, #4]
	TIM_BDTRInitStructure.TIM_DeadTime = 20;
 8000dbe:	4b20      	ldr	r3, [pc, #128]	; (8000e40 <TIM1_Configuraion+0x180>)
 8000dc0:	2214      	movs	r2, #20
 8000dc2:	80da      	strh	r2, [r3, #6]
	TIM_BDTRInitStructure.TIM_Break = TIM_Break_Disable;
 8000dc4:	4b1e      	ldr	r3, [pc, #120]	; (8000e40 <TIM1_Configuraion+0x180>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	811a      	strh	r2, [r3, #8]
	TIM_BDTRInitStructure.TIM_BreakPolarity = TIM_BreakPolarity_Low;
 8000dca:	4b1d      	ldr	r3, [pc, #116]	; (8000e40 <TIM1_Configuraion+0x180>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	815a      	strh	r2, [r3, #10]
	TIM_BDTRInitStructure.TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 8000dd0:	4b1b      	ldr	r3, [pc, #108]	; (8000e40 <TIM1_Configuraion+0x180>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	819a      	strh	r2, [r3, #12]
	TIM_BDTRConfig(TIM1, &TIM_BDTRInitStructure);
 8000dd6:	491a      	ldr	r1, [pc, #104]	; (8000e40 <TIM1_Configuraion+0x180>)
 8000dd8:	4817      	ldr	r0, [pc, #92]	; (8000e38 <TIM1_Configuraion+0x178>)
 8000dda:	f000 ff49 	bl	8001c70 <TIM_BDTRConfig>

	TIM_CtrlPWMOutputs(TIM1, ENABLE); // luu ý command này phai set, enabel bit 15-BDTR( enable OC va OCN)
 8000dde:	2101      	movs	r1, #1
 8000de0:	4815      	ldr	r0, [pc, #84]	; (8000e38 <TIM1_Configuraion+0x178>)
 8000de2:	f000 ff8b 	bl	8001cfc <TIM_CtrlPWMOutputs>

	/* Config NVIC */

	NVIC_InitStructure.NVIC_IRQChannel = TIM1_UP_IRQn;
 8000de6:	4b17      	ldr	r3, [pc, #92]	; (8000e44 <TIM1_Configuraion+0x184>)
 8000de8:	2219      	movs	r2, #25
 8000dea:	701a      	strb	r2, [r3, #0]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8000dec:	4b15      	ldr	r3, [pc, #84]	; (8000e44 <TIM1_Configuraion+0x184>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	705a      	strb	r2, [r3, #1]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8000df2:	4b14      	ldr	r3, [pc, #80]	; (8000e44 <TIM1_Configuraion+0x184>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	709a      	strb	r2, [r3, #2]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000df8:	4b12      	ldr	r3, [pc, #72]	; (8000e44 <TIM1_Configuraion+0x184>)
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	70da      	strb	r2, [r3, #3]
	NVIC_Init(&NVIC_InitStructure);
 8000dfe:	4811      	ldr	r0, [pc, #68]	; (8000e44 <TIM1_Configuraion+0x184>)
 8000e00:	f000 f9fc 	bl	80011fc <NVIC_Init>

	TIM_SelectOCxM(TIM1, TIM_Channel_1, TIM_OCMode_PWM1);
 8000e04:	2260      	movs	r2, #96	; 0x60
 8000e06:	2100      	movs	r1, #0
 8000e08:	480b      	ldr	r0, [pc, #44]	; (8000e38 <TIM1_Configuraion+0x178>)
 8000e0a:	f001 f86a 	bl	8001ee2 <TIM_SelectOCxM>
	TIM_CCxCmd(TIM1, TIM_Channel_1, TIM_CCx_Enable);
 8000e0e:	2201      	movs	r2, #1
 8000e10:	2100      	movs	r1, #0
 8000e12:	4809      	ldr	r0, [pc, #36]	; (8000e38 <TIM1_Configuraion+0x178>)
 8000e14:	f001 f811 	bl	8001e3a <TIM_CCxCmd>
	TIM_CCxNCmd(TIM1, TIM_Channel_1, TIM_CCxN_Enable);
 8000e18:	2204      	movs	r2, #4
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	4806      	ldr	r0, [pc, #24]	; (8000e38 <TIM1_Configuraion+0x178>)
 8000e1e:	f001 f836 	bl	8001e8e <TIM_CCxNCmd>

}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	2000033c 	.word	0x2000033c
 8000e2c:	40010800 	.word	0x40010800
 8000e30:	40010c00 	.word	0x40010c00
 8000e34:	20000340 	.word	0x20000340
 8000e38:	40012c00 	.word	0x40012c00
 8000e3c:	2000034c 	.word	0x2000034c
 8000e40:	2000035c 	.word	0x2000035c
 8000e44:	2000036c 	.word	0x2000036c

08000e48 <ADC_Configuration>:

void ADC_Configuration(void) {
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
	/*cap clock cho chan GPIO va bo ADC1*/
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000e52:	f000 fd5f 	bl	8001914 <RCC_APB2PeriphClockCmd>

	/*cau hinh chan Input cua bo ADC1 la chan PA0*/
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;
 8000e56:	4b24      	ldr	r3, [pc, #144]	; (8000ee8 <ADC_Configuration+0xa0>)
 8000e58:	2202      	movs	r2, #2
 8000e5a:	801a      	strh	r2, [r3, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
 8000e5c:	4b22      	ldr	r3, [pc, #136]	; (8000ee8 <ADC_Configuration+0xa0>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	70da      	strb	r2, [r3, #3]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000e62:	4921      	ldr	r1, [pc, #132]	; (8000ee8 <ADC_Configuration+0xa0>)
 8000e64:	4821      	ldr	r0, [pc, #132]	; (8000eec <ADC_Configuration+0xa4>)
 8000e66:	f000 fc99 	bl	800179c <GPIO_Init>

	/*cau hinh ADC1*/
	ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
 8000e6a:	4b21      	ldr	r3, [pc, #132]	; (8000ef0 <ADC_Configuration+0xa8>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
	ADC_InitStructure.ADC_ScanConvMode = DISABLE;
 8000e70:	4b1f      	ldr	r3, [pc, #124]	; (8000ef0 <ADC_Configuration+0xa8>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	711a      	strb	r2, [r3, #4]
	ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;
 8000e76:	4b1e      	ldr	r3, [pc, #120]	; (8000ef0 <ADC_Configuration+0xa8>)
 8000e78:	2201      	movs	r2, #1
 8000e7a:	715a      	strb	r2, [r3, #5]
	ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
 8000e7c:	4b1c      	ldr	r3, [pc, #112]	; (8000ef0 <ADC_Configuration+0xa8>)
 8000e7e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000e82:	609a      	str	r2, [r3, #8]
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 8000e84:	4b1a      	ldr	r3, [pc, #104]	; (8000ef0 <ADC_Configuration+0xa8>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	60da      	str	r2, [r3, #12]
	ADC_InitStructure.ADC_NbrOfChannel = 1;
 8000e8a:	4b19      	ldr	r3, [pc, #100]	; (8000ef0 <ADC_Configuration+0xa8>)
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	741a      	strb	r2, [r3, #16]
	ADC_Init(ADC1, &ADC_InitStructure);
 8000e90:	4917      	ldr	r1, [pc, #92]	; (8000ef0 <ADC_Configuration+0xa8>)
 8000e92:	4818      	ldr	r0, [pc, #96]	; (8000ef4 <ADC_Configuration+0xac>)
 8000e94:	f000 fabc 	bl	8001410 <ADC_Init>

	/* Cau hinh chanel, rank, thoi gian lay mau */
	ADC_RegularChannelConfig(ADC1, ADC_Channel_1, 1, ADC_SampleTime_55Cycles5);
 8000e98:	2305      	movs	r3, #5
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	2101      	movs	r1, #1
 8000e9e:	4815      	ldr	r0, [pc, #84]	; (8000ef4 <ADC_Configuration+0xac>)
 8000ea0:	f000 fb8a 	bl	80015b8 <ADC_RegularChannelConfig>
	/* Cho phep bo ADC1 hoa dong */
	ADC_Cmd(ADC1, ENABLE);
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	4813      	ldr	r0, [pc, #76]	; (8000ef4 <ADC_Configuration+0xac>)
 8000ea8:	f000 fb04 	bl	80014b4 <ADC_Cmd>
	/* cho phep cam bien nhiet hoat dong */
	ADC_TempSensorVrefintCmd(ENABLE);
 8000eac:	2001      	movs	r0, #1
 8000eae:	f000 fc59 	bl	8001764 <ADC_TempSensorVrefintCmd>
	/* Reset thanh ghi cablib  */
	ADC_ResetCalibration(ADC1);
 8000eb2:	4810      	ldr	r0, [pc, #64]	; (8000ef4 <ADC_Configuration+0xac>)
 8000eb4:	f000 fb19 	bl	80014ea <ADC_ResetCalibration>
	/* Cho thanh ghi cablib reset xong */
	while (ADC_GetResetCalibrationStatus(ADC1))
 8000eb8:	bf00      	nop
 8000eba:	480e      	ldr	r0, [pc, #56]	; (8000ef4 <ADC_Configuration+0xac>)
 8000ebc:	f000 fb24 	bl	8001508 <ADC_GetResetCalibrationStatus>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d1f9      	bne.n	8000eba <ADC_Configuration+0x72>
		;
	/* Khoi dong bo ADC */
	ADC_StartCalibration(ADC1);
 8000ec6:	480b      	ldr	r0, [pc, #44]	; (8000ef4 <ADC_Configuration+0xac>)
 8000ec8:	f000 fb35 	bl	8001536 <ADC_StartCalibration>
	/* Cho trang thai cablib duoc bat */
	while (ADC_GetCalibrationStatus(ADC1))
 8000ecc:	bf00      	nop
 8000ece:	4809      	ldr	r0, [pc, #36]	; (8000ef4 <ADC_Configuration+0xac>)
 8000ed0:	f000 fb40 	bl	8001554 <ADC_GetCalibrationStatus>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d1f9      	bne.n	8000ece <ADC_Configuration+0x86>
		;
	/* Bat dau chuyen doi ADC */
	ADC_SoftwareStartConvCmd(ADC1, ENABLE);
 8000eda:	2101      	movs	r1, #1
 8000edc:	4805      	ldr	r0, [pc, #20]	; (8000ef4 <ADC_Configuration+0xac>)
 8000ede:	f000 fb50 	bl	8001582 <ADC_SoftwareStartConvCmd>
}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	2000033c 	.word	0x2000033c
 8000eec:	40010800 	.word	0x40010800
 8000ef0:	20000370 	.word	0x20000370
 8000ef4:	40012400 	.word	0x40012400

08000ef8 <TIM1_UP_IRQHandler>:
extern int chonmang;
extern uint16_t Ext_ReadAdc_Max1;
extern uint16_t Arr1;
extern uint16_t Arr;

void TIM1_UP_IRQHandler(void) {
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0

	if (TIM_GetITStatus( TIM1, TIM_IT_Update) != RESET) {
 8000efc:	2101      	movs	r1, #1
 8000efe:	4830      	ldr	r0, [pc, #192]	; (8000fc0 <TIM1_UP_IRQHandler+0xc8>)
 8000f00:	f001 f873 	bl	8001fea <TIM_GetITStatus>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d058      	beq.n	8000fbc <TIM1_UP_IRQHandler+0xc4>

		++Arr;
 8000f0a:	4b2e      	ldr	r3, [pc, #184]	; (8000fc4 <TIM1_UP_IRQHandler+0xcc>)
 8000f0c:	881b      	ldrh	r3, [r3, #0]
 8000f0e:	3301      	adds	r3, #1
 8000f10:	b29a      	uxth	r2, r3
 8000f12:	4b2c      	ldr	r3, [pc, #176]	; (8000fc4 <TIM1_UP_IRQHandler+0xcc>)
 8000f14:	801a      	strh	r2, [r3, #0]
		--Arr1;
 8000f16:	4b2c      	ldr	r3, [pc, #176]	; (8000fc8 <TIM1_UP_IRQHandler+0xd0>)
 8000f18:	881b      	ldrh	r3, [r3, #0]
 8000f1a:	3b01      	subs	r3, #1
 8000f1c:	b29a      	uxth	r2, r3
 8000f1e:	4b2a      	ldr	r3, [pc, #168]	; (8000fc8 <TIM1_UP_IRQHandler+0xd0>)
 8000f20:	801a      	strh	r2, [r3, #0]
		if (Arr == 300) {
 8000f22:	4b28      	ldr	r3, [pc, #160]	; (8000fc4 <TIM1_UP_IRQHandler+0xcc>)
 8000f24:	881b      	ldrh	r3, [r3, #0]
 8000f26:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000f2a:	d106      	bne.n	8000f3a <TIM1_UP_IRQHandler+0x42>
			Ext_ReadAdc_Max1 = ADC_GetConversionValue(ADC1);
 8000f2c:	4827      	ldr	r0, [pc, #156]	; (8000fcc <TIM1_UP_IRQHandler+0xd4>)
 8000f2e:	f000 fc0c 	bl	800174a <ADC_GetConversionValue>
 8000f32:	4603      	mov	r3, r0
 8000f34:	461a      	mov	r2, r3
 8000f36:	4b26      	ldr	r3, [pc, #152]	; (8000fd0 <TIM1_UP_IRQHandler+0xd8>)
 8000f38:	801a      	strh	r2, [r3, #0]

		}

		if (chonmang == 1) {
 8000f3a:	4b26      	ldr	r3, [pc, #152]	; (8000fd4 <TIM1_UP_IRQHandler+0xdc>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d114      	bne.n	8000f6c <TIM1_UP_IRQHandler+0x74>
			TIM_SetCompare1(TIM1, L5[Arr]);
 8000f42:	4b20      	ldr	r3, [pc, #128]	; (8000fc4 <TIM1_UP_IRQHandler+0xcc>)
 8000f44:	881b      	ldrh	r3, [r3, #0]
 8000f46:	461a      	mov	r2, r3
 8000f48:	4b23      	ldr	r3, [pc, #140]	; (8000fd8 <TIM1_UP_IRQHandler+0xe0>)
 8000f4a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000f4e:	4619      	mov	r1, r3
 8000f50:	481b      	ldr	r0, [pc, #108]	; (8000fc0 <TIM1_UP_IRQHandler+0xc8>)
 8000f52:	f001 f81e 	bl	8001f92 <TIM_SetCompare1>
			TIM_SetCompare2(TIM1, L5[Arr1]);
 8000f56:	4b1c      	ldr	r3, [pc, #112]	; (8000fc8 <TIM1_UP_IRQHandler+0xd0>)
 8000f58:	881b      	ldrh	r3, [r3, #0]
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	4b1e      	ldr	r3, [pc, #120]	; (8000fd8 <TIM1_UP_IRQHandler+0xe0>)
 8000f5e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000f62:	4619      	mov	r1, r3
 8000f64:	4816      	ldr	r0, [pc, #88]	; (8000fc0 <TIM1_UP_IRQHandler+0xc8>)
 8000f66:	f001 f822 	bl	8001fae <TIM_SetCompare2>
 8000f6a:	e013      	b.n	8000f94 <TIM1_UP_IRQHandler+0x9c>

		} else {
			TIM_SetCompare1(TIM1, L3[Arr]);
 8000f6c:	4b15      	ldr	r3, [pc, #84]	; (8000fc4 <TIM1_UP_IRQHandler+0xcc>)
 8000f6e:	881b      	ldrh	r3, [r3, #0]
 8000f70:	461a      	mov	r2, r3
 8000f72:	4b1a      	ldr	r3, [pc, #104]	; (8000fdc <TIM1_UP_IRQHandler+0xe4>)
 8000f74:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4811      	ldr	r0, [pc, #68]	; (8000fc0 <TIM1_UP_IRQHandler+0xc8>)
 8000f7c:	f001 f809 	bl	8001f92 <TIM_SetCompare1>
			TIM_SetCompare2(TIM1, L3[Arr1]);
 8000f80:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <TIM1_UP_IRQHandler+0xd0>)
 8000f82:	881b      	ldrh	r3, [r3, #0]
 8000f84:	461a      	mov	r2, r3
 8000f86:	4b15      	ldr	r3, [pc, #84]	; (8000fdc <TIM1_UP_IRQHandler+0xe4>)
 8000f88:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	480c      	ldr	r0, [pc, #48]	; (8000fc0 <TIM1_UP_IRQHandler+0xc8>)
 8000f90:	f001 f80d 	bl	8001fae <TIM_SetCompare2>
		}
//		TIM_SetCompare2(TIM1,  L4[Arr] * Ext_K );
//		TIM_SetCompare1(TIM1,  L4[Arr1] * Ext_K );

		if (Arr == 396 && Arr1 == 0) { // sua bang sine, can phai -1 gia tri doi voi pp bam luong cuc
 8000f94:	4b0b      	ldr	r3, [pc, #44]	; (8000fc4 <TIM1_UP_IRQHandler+0xcc>)
 8000f96:	881b      	ldrh	r3, [r3, #0]
 8000f98:	f5b3 7fc6 	cmp.w	r3, #396	; 0x18c
 8000f9c:	d10a      	bne.n	8000fb4 <TIM1_UP_IRQHandler+0xbc>
 8000f9e:	4b0a      	ldr	r3, [pc, #40]	; (8000fc8 <TIM1_UP_IRQHandler+0xd0>)
 8000fa0:	881b      	ldrh	r3, [r3, #0]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d106      	bne.n	8000fb4 <TIM1_UP_IRQHandler+0xbc>
			Arr1 = 396;
 8000fa6:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <TIM1_UP_IRQHandler+0xd0>)
 8000fa8:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8000fac:	801a      	strh	r2, [r3, #0]
			Arr = 0;
 8000fae:	4b05      	ldr	r3, [pc, #20]	; (8000fc4 <TIM1_UP_IRQHandler+0xcc>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	801a      	strh	r2, [r3, #0]
		}
		TIM_ClearFlag(TIM1, TIM_FLAG_Update);
 8000fb4:	2101      	movs	r1, #1
 8000fb6:	4802      	ldr	r0, [pc, #8]	; (8000fc0 <TIM1_UP_IRQHandler+0xc8>)
 8000fb8:	f001 f807 	bl	8001fca <TIM_ClearFlag>
	}
}
 8000fbc:	bf00      	nop
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40012c00 	.word	0x40012c00
 8000fc4:	200009d2 	.word	0x200009d2
 8000fc8:	20000000 	.word	0x20000000
 8000fcc:	40012400 	.word	0x40012400
 8000fd0:	200009d0 	.word	0x200009d0
 8000fd4:	200009d4 	.word	0x200009d4
 8000fd8:	200006b8 	.word	0x200006b8
 8000fdc:	200003a0 	.word	0x200003a0

08000fe0 <NMI_Handler>:

void NMI_Handler(void) {
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bc80      	pop	{r7}
 8000fea:	4770      	bx	lr

08000fec <HardFault_Handler>:
/**
 * @brief  This function handles Hard Fault exception.
 * @param  None
 * @retval None
 */
void HardFault_Handler(void) {
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Hard Fault exception occurs */
	while (1) {
 8000ff0:	e7fe      	b.n	8000ff0 <HardFault_Handler+0x4>

08000ff2 <MemManage_Handler>:
/**
 * @brief  This function handles Memory Manage exception.
 * @param  None
 * @retval None
 */
void MemManage_Handler(void) {
 8000ff2:	b480      	push	{r7}
 8000ff4:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Memory Manage exception occurs */
	while (1) {
 8000ff6:	e7fe      	b.n	8000ff6 <MemManage_Handler+0x4>

08000ff8 <BusFault_Handler>:
/**
 * @brief  This function handles Bus Fault exception.
 * @param  None
 * @retval None
 */
void BusFault_Handler(void) {
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Bus Fault exception occurs */
	while (1) {
 8000ffc:	e7fe      	b.n	8000ffc <BusFault_Handler+0x4>

08000ffe <UsageFault_Handler>:
/**
 * @brief  This function handles Usage Fault exception.
 * @param  None
 * @retval None
 */
void UsageFault_Handler(void) {
 8000ffe:	b480      	push	{r7}
 8001000:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Usage Fault exception occurs */
	while (1) {
 8001002:	e7fe      	b.n	8001002 <UsageFault_Handler+0x4>

08001004 <SVC_Handler>:
/**
 * @brief  This function handles SVCall exception.
 * @param  None
 * @retval None
 */
void SVC_Handler(void) {
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
}
 8001008:	bf00      	nop
 800100a:	46bd      	mov	sp, r7
 800100c:	bc80      	pop	{r7}
 800100e:	4770      	bx	lr

08001010 <DebugMon_Handler>:
/**
 * @brief  This function handles Debug Monitor exception.
 * @param  None
 * @retval None
 */
void DebugMon_Handler(void) {
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr

0800101c <PendSV_Handler>:
/**
 * @brief  This function handles PendSVC exception.
 * @param  None
 * @retval None
 */
void PendSV_Handler(void) {
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	bc80      	pop	{r7}
 8001026:	4770      	bx	lr

08001028 <SysTick_Handler>:
/**
 * @brief  This function handles SysTick Handler.
 * @param  None
 * @retval None
 */
void SysTick_Handler(void) {
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	bc80      	pop	{r7}
 8001032:	4770      	bx	lr

08001034 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001038:	4b15      	ldr	r3, [pc, #84]	; (8001090 <SystemInit+0x5c>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a14      	ldr	r2, [pc, #80]	; (8001090 <SystemInit+0x5c>)
 800103e:	f043 0301 	orr.w	r3, r3, #1
 8001042:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8001044:	4b12      	ldr	r3, [pc, #72]	; (8001090 <SystemInit+0x5c>)
 8001046:	685a      	ldr	r2, [r3, #4]
 8001048:	4911      	ldr	r1, [pc, #68]	; (8001090 <SystemInit+0x5c>)
 800104a:	4b12      	ldr	r3, [pc, #72]	; (8001094 <SystemInit+0x60>)
 800104c:	4013      	ands	r3, r2
 800104e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001050:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <SystemInit+0x5c>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a0e      	ldr	r2, [pc, #56]	; (8001090 <SystemInit+0x5c>)
 8001056:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800105a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800105e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001060:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <SystemInit+0x5c>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a0a      	ldr	r2, [pc, #40]	; (8001090 <SystemInit+0x5c>)
 8001066:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800106a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 800106c:	4b08      	ldr	r3, [pc, #32]	; (8001090 <SystemInit+0x5c>)
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	4a07      	ldr	r2, [pc, #28]	; (8001090 <SystemInit+0x5c>)
 8001072:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001076:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8001078:	4b05      	ldr	r3, [pc, #20]	; (8001090 <SystemInit+0x5c>)
 800107a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800107e:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8001080:	f000 f80c 	bl	800109c <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001084:	4b04      	ldr	r3, [pc, #16]	; (8001098 <SystemInit+0x64>)
 8001086:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800108a:	609a      	str	r2, [r3, #8]
#endif 
}
 800108c:	bf00      	nop
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40021000 	.word	0x40021000
 8001094:	f8ff0000 	.word	0xf8ff0000
 8001098:	e000ed00 	.word	0xe000ed00

0800109c <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 80010a0:	f000 f802 	bl	80010a8 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 80010a4:	bf00      	nop
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	607b      	str	r3, [r7, #4]
 80010b2:	2300      	movs	r3, #0
 80010b4:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80010b6:	4b3a      	ldr	r3, [pc, #232]	; (80011a0 <SetSysClockTo72+0xf8>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a39      	ldr	r2, [pc, #228]	; (80011a0 <SetSysClockTo72+0xf8>)
 80010bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010c0:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80010c2:	4b37      	ldr	r3, [pc, #220]	; (80011a0 <SetSysClockTo72+0xf8>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ca:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3301      	adds	r3, #1
 80010d0:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d103      	bne.n	80010e0 <SetSysClockTo72+0x38>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80010de:	d1f0      	bne.n	80010c2 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80010e0:	4b2f      	ldr	r3, [pc, #188]	; (80011a0 <SetSysClockTo72+0xf8>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d002      	beq.n	80010f2 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80010ec:	2301      	movs	r3, #1
 80010ee:	603b      	str	r3, [r7, #0]
 80010f0:	e001      	b.n	80010f6 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80010f2:	2300      	movs	r3, #0
 80010f4:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d14b      	bne.n	8001194 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 80010fc:	4b29      	ldr	r3, [pc, #164]	; (80011a4 <SetSysClockTo72+0xfc>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a28      	ldr	r2, [pc, #160]	; (80011a4 <SetSysClockTo72+0xfc>)
 8001102:	f043 0310 	orr.w	r3, r3, #16
 8001106:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8001108:	4b26      	ldr	r3, [pc, #152]	; (80011a4 <SetSysClockTo72+0xfc>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a25      	ldr	r2, [pc, #148]	; (80011a4 <SetSysClockTo72+0xfc>)
 800110e:	f023 0303 	bic.w	r3, r3, #3
 8001112:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8001114:	4b23      	ldr	r3, [pc, #140]	; (80011a4 <SetSysClockTo72+0xfc>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a22      	ldr	r2, [pc, #136]	; (80011a4 <SetSysClockTo72+0xfc>)
 800111a:	f043 0302 	orr.w	r3, r3, #2
 800111e:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8001120:	4b1f      	ldr	r3, [pc, #124]	; (80011a0 <SetSysClockTo72+0xf8>)
 8001122:	4a1f      	ldr	r2, [pc, #124]	; (80011a0 <SetSysClockTo72+0xf8>)
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8001128:	4b1d      	ldr	r3, [pc, #116]	; (80011a0 <SetSysClockTo72+0xf8>)
 800112a:	4a1d      	ldr	r2, [pc, #116]	; (80011a0 <SetSysClockTo72+0xf8>)
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8001130:	4b1b      	ldr	r3, [pc, #108]	; (80011a0 <SetSysClockTo72+0xf8>)
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	4a1a      	ldr	r2, [pc, #104]	; (80011a0 <SetSysClockTo72+0xf8>)
 8001136:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800113a:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 800113c:	4b18      	ldr	r3, [pc, #96]	; (80011a0 <SetSysClockTo72+0xf8>)
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	4a17      	ldr	r2, [pc, #92]	; (80011a0 <SetSysClockTo72+0xf8>)
 8001142:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8001146:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8001148:	4b15      	ldr	r3, [pc, #84]	; (80011a0 <SetSysClockTo72+0xf8>)
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	4a14      	ldr	r2, [pc, #80]	; (80011a0 <SetSysClockTo72+0xf8>)
 800114e:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8001152:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001154:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <SetSysClockTo72+0xf8>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a11      	ldr	r2, [pc, #68]	; (80011a0 <SetSysClockTo72+0xf8>)
 800115a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800115e:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001160:	bf00      	nop
 8001162:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <SetSysClockTo72+0xf8>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800116a:	2b00      	cmp	r3, #0
 800116c:	d0f9      	beq.n	8001162 <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800116e:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <SetSysClockTo72+0xf8>)
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	4a0b      	ldr	r2, [pc, #44]	; (80011a0 <SetSysClockTo72+0xf8>)
 8001174:	f023 0303 	bic.w	r3, r3, #3
 8001178:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 800117a:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <SetSysClockTo72+0xf8>)
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	4a08      	ldr	r2, [pc, #32]	; (80011a0 <SetSysClockTo72+0xf8>)
 8001180:	f043 0302 	orr.w	r3, r3, #2
 8001184:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8001186:	bf00      	nop
 8001188:	4b05      	ldr	r3, [pc, #20]	; (80011a0 <SetSysClockTo72+0xf8>)
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f003 030c 	and.w	r3, r3, #12
 8001190:	2b08      	cmp	r3, #8
 8001192:	d1f9      	bne.n	8001188 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8001194:	bf00      	nop
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	bc80      	pop	{r7}
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	40021000 	.word	0x40021000
 80011a4:	40022000 	.word	0x40022000

080011a8 <Reset_Handler>:
 80011a8:	480d      	ldr	r0, [pc, #52]	; (80011e0 <LoopForever+0x2>)
 80011aa:	4685      	mov	sp, r0
 80011ac:	f7ff ff42 	bl	8001034 <SystemInit>
 80011b0:	480c      	ldr	r0, [pc, #48]	; (80011e4 <LoopForever+0x6>)
 80011b2:	490d      	ldr	r1, [pc, #52]	; (80011e8 <LoopForever+0xa>)
 80011b4:	4a0d      	ldr	r2, [pc, #52]	; (80011ec <LoopForever+0xe>)
 80011b6:	2300      	movs	r3, #0
 80011b8:	e002      	b.n	80011c0 <LoopCopyDataInit>

080011ba <CopyDataInit>:
 80011ba:	58d4      	ldr	r4, [r2, r3]
 80011bc:	50c4      	str	r4, [r0, r3]
 80011be:	3304      	adds	r3, #4

080011c0 <LoopCopyDataInit>:
 80011c0:	18c4      	adds	r4, r0, r3
 80011c2:	428c      	cmp	r4, r1
 80011c4:	d3f9      	bcc.n	80011ba <CopyDataInit>
 80011c6:	4a0a      	ldr	r2, [pc, #40]	; (80011f0 <LoopForever+0x12>)
 80011c8:	4c0a      	ldr	r4, [pc, #40]	; (80011f4 <LoopForever+0x16>)
 80011ca:	2300      	movs	r3, #0
 80011cc:	e001      	b.n	80011d2 <LoopFillZerobss>

080011ce <FillZerobss>:
 80011ce:	6013      	str	r3, [r2, #0]
 80011d0:	3204      	adds	r2, #4

080011d2 <LoopFillZerobss>:
 80011d2:	42a2      	cmp	r2, r4
 80011d4:	d3fb      	bcc.n	80011ce <FillZerobss>
 80011d6:	f000 ff31 	bl	800203c <__libc_init_array>
 80011da:	f7ff fc8d 	bl	8000af8 <main>

080011de <LoopForever>:
 80011de:	e7fe      	b.n	80011de <LoopForever>
 80011e0:	20005000 	.word	0x20005000
 80011e4:	20000000 	.word	0x20000000
 80011e8:	20000320 	.word	0x20000320
 80011ec:	080020a4 	.word	0x080020a4
 80011f0:	20000320 	.word	0x20000320
 80011f4:	200009e0 	.word	0x200009e0

080011f8 <ADC1_2_IRQHandler>:
 80011f8:	e7fe      	b.n	80011f8 <ADC1_2_IRQHandler>
	...

080011fc <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b087      	sub	sp, #28
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]
 8001208:	2300      	movs	r3, #0
 800120a:	613b      	str	r3, [r7, #16]
 800120c:	230f      	movs	r3, #15
 800120e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	78db      	ldrb	r3, [r3, #3]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d03a      	beq.n	800128e <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8001218:	4b27      	ldr	r3, [pc, #156]	; (80012b8 <NVIC_Init+0xbc>)
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	43db      	mvns	r3, r3
 800121e:	0a1b      	lsrs	r3, r3, #8
 8001220:	f003 0307 	and.w	r3, r3, #7
 8001224:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	f1c3 0304 	rsb	r3, r3, #4
 800122c:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 800122e:	68fa      	ldr	r2, [r7, #12]
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	fa22 f303 	lsr.w	r3, r2, r3
 8001236:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	785b      	ldrb	r3, [r3, #1]
 800123c:	461a      	mov	r2, r3
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	789b      	ldrb	r3, [r3, #2]
 800124a:	461a      	mov	r2, r3
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	4013      	ands	r3, r2
 8001250:	697a      	ldr	r2, [r7, #20]
 8001252:	4313      	orrs	r3, r2
 8001254:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	011b      	lsls	r3, r3, #4
 800125a:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800125c:	4a17      	ldr	r2, [pc, #92]	; (80012bc <NVIC_Init+0xc0>)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	6979      	ldr	r1, [r7, #20]
 8001264:	b2c9      	uxtb	r1, r1
 8001266:	4413      	add	r3, r2
 8001268:	460a      	mov	r2, r1
 800126a:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	f003 031f 	and.w	r3, r3, #31
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001276:	4911      	ldr	r1, [pc, #68]	; (80012bc <NVIC_Init+0xc0>)
 8001278:	687a      	ldr	r2, [r7, #4]
 800127a:	7812      	ldrb	r2, [r2, #0]
 800127c:	0952      	lsrs	r2, r2, #5
 800127e:	b2d2      	uxtb	r2, r2
 8001280:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001282:	2201      	movs	r2, #1
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001288:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800128c:	e00f      	b.n	80012ae <NVIC_Init+0xb2>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	f003 031f 	and.w	r3, r3, #31
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001296:	4909      	ldr	r1, [pc, #36]	; (80012bc <NVIC_Init+0xc0>)
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	7812      	ldrb	r2, [r2, #0]
 800129c:	0952      	lsrs	r2, r2, #5
 800129e:	b2d2      	uxtb	r2, r2
 80012a0:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80012a2:	2201      	movs	r2, #1
 80012a4:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80012a6:	f100 0320 	add.w	r3, r0, #32
 80012aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80012ae:	bf00      	nop
 80012b0:	371c      	adds	r7, #28
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bc80      	pop	{r7}
 80012b6:	4770      	bx	lr
 80012b8:	e000ed00 	.word	0xe000ed00
 80012bc:	e000e100 	.word	0xe000e100

080012c0 <Init_PID>:
 *  \param d_factor  Derivate term.
 *  \param pid  Struct with PID status.
 */
void Init_PID(int p_factor, int i_factor, int d_factor, struct PID_DATA *pid)
// Set up PID controller parameters
{
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]
 80012cc:	603b      	str	r3, [r7, #0]
  // Start values for PID controller
  pid->SUM_ERROR = 0;
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	2200      	movs	r2, #0
 80012d2:	605a      	str	r2, [r3, #4]
  pid->LAST_PROCESS_VALUE = 0;
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
  // Tuning constants for PID loop
  pid->P_FACTOR = p_factor;
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	68fa      	ldr	r2, [r7, #12]
 80012de:	609a      	str	r2, [r3, #8]
  pid->I_FACTOR = i_factor;
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	68ba      	ldr	r2, [r7, #8]
 80012e4:	60da      	str	r2, [r3, #12]
  pid->D_FACTOR = d_factor;
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	687a      	ldr	r2, [r7, #4]
 80012ea:	611a      	str	r2, [r3, #16]
  // Limits to avoid overflow
  pid->MAX_ERROR = MAX_INT / (pid->P_FACTOR + 1 );
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	3301      	adds	r3, #1
 80012f2:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80012f6:	fb92 f2f3 	sdiv	r2, r2, r3
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	615a      	str	r2, [r3, #20]
  pid->MAX_SUM_ERROR = MAX_INT / (pid->I_FACTOR + 1);
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	68db      	ldr	r3, [r3, #12]
 8001302:	3301      	adds	r3, #1
 8001304:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8001308:	fb92 f2f3 	sdiv	r2, r2, r3
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	619a      	str	r2, [r3, #24]
}
 8001310:	bf00      	nop
 8001312:	3714      	adds	r7, #20
 8001314:	46bd      	mov	sp, r7
 8001316:	bc80      	pop	{r7}
 8001318:	4770      	bx	lr
	...

0800131c <PID>:
 *  \param setPoint  Desired value.
 *  \param processValue  Measured value.
 *  \param pid_st  PID status struct.
 */
int PID(int setPoint, int processValue, struct PID_DATA *pid_st)
{
 800131c:	b480      	push	{r7}
 800131e:	b08b      	sub	sp, #44	; 0x2c
 8001320:	af00      	add	r7, sp, #0
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	60b9      	str	r1, [r7, #8]
 8001326:	607a      	str	r2, [r7, #4]
  int error, p_term, i_term, d_term;
  long ret, temp;

  error = setPoint - processValue;
 8001328:	68fa      	ldr	r2, [r7, #12]
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	61fb      	str	r3, [r7, #28]

  // Calculate Pterm and limit error overflow
  if(error > pid_st->MAX_ERROR)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	695b      	ldr	r3, [r3, #20]
 8001334:	69fa      	ldr	r2, [r7, #28]
 8001336:	429a      	cmp	r2, r3
 8001338:	dd03      	ble.n	8001342 <PID+0x26>
    p_term = MAX_INT;
 800133a:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 800133e:	627b      	str	r3, [r7, #36]	; 0x24
 8001340:	e00e      	b.n	8001360 <PID+0x44>
  else if(error < -pid_st->MAX_ERROR)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	695b      	ldr	r3, [r3, #20]
 8001346:	425b      	negs	r3, r3
 8001348:	69fa      	ldr	r2, [r7, #28]
 800134a:	429a      	cmp	r2, r3
 800134c:	da02      	bge.n	8001354 <PID+0x38>
    p_term = -MAX_INT;
 800134e:	4b2f      	ldr	r3, [pc, #188]	; (800140c <PID+0xf0>)
 8001350:	627b      	str	r3, [r7, #36]	; 0x24
 8001352:	e005      	b.n	8001360 <PID+0x44>
  else
    p_term = pid_st->P_FACTOR * error;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	689a      	ldr	r2, [r3, #8]
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	fb02 f303 	mul.w	r3, r2, r3
 800135e:	627b      	str	r3, [r7, #36]	; 0x24

  // Calculate Iterm and limit integral runaway
  temp = (long)pid_st->SUM_ERROR + error;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	69fa      	ldr	r2, [r7, #28]
 8001366:	4413      	add	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
  if(temp > pid_st->MAX_SUM_ERROR){
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	699b      	ldr	r3, [r3, #24]
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	429a      	cmp	r2, r3
 8001372:	dd07      	ble.n	8001384 <PID+0x68>
    i_term = MAX_INT;
 8001374:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 8001378:	617b      	str	r3, [r7, #20]
    pid_st->SUM_ERROR = pid_st->MAX_SUM_ERROR;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	699a      	ldr	r2, [r3, #24]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	e010      	b.n	80013a6 <PID+0x8a>
  }
  else if(temp < -pid_st->MAX_SUM_ERROR){
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	425b      	negs	r3, r3
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	429a      	cmp	r2, r3
 800138e:	da07      	bge.n	80013a0 <PID+0x84>
    i_term = -MAX_INT;
 8001390:	4b1e      	ldr	r3, [pc, #120]	; (800140c <PID+0xf0>)
 8001392:	617b      	str	r3, [r7, #20]
    pid_st->SUM_ERROR = -pid_st->MAX_SUM_ERROR;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	699b      	ldr	r3, [r3, #24]
 8001398:	425a      	negs	r2, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	e002      	b.n	80013a6 <PID+0x8a>
  }
  else
    pid_st->SUM_ERROR = temp;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	605a      	str	r2, [r3, #4]
    i_term = pid_st->I_FACTOR * pid_st->SUM_ERROR;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	68db      	ldr	r3, [r3, #12]
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	6852      	ldr	r2, [r2, #4]
 80013ae:	fb02 f303 	mul.w	r3, r2, r3
 80013b2:	617b      	str	r3, [r7, #20]

  // Calculate Dterm
  d_term = pid_st->D_FACTOR * (pid_st->LAST_PROCESS_VALUE - processValue);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	691b      	ldr	r3, [r3, #16]
 80013b8:	687a      	ldr	r2, [r7, #4]
 80013ba:	6811      	ldr	r1, [r2, #0]
 80013bc:	68ba      	ldr	r2, [r7, #8]
 80013be:	1a8a      	subs	r2, r1, r2
 80013c0:	fb02 f303 	mul.w	r3, r2, r3
 80013c4:	613b      	str	r3, [r7, #16]

  pid_st->LAST_PROCESS_VALUE = processValue;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	68ba      	ldr	r2, [r7, #8]
 80013ca:	601a      	str	r2, [r3, #0]

  //ret = (((long)p_term + i_term + d_term))/128;
//  ret = (((long)p_term + i_term + d_term)) >> 7; // <--- scale back down (right shift seven bits = divide by 128)
  ret = (((long)p_term + i_term + d_term))/SCALING_FACTOR;
 80013cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	441a      	add	r2, r3
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	4413      	add	r3, r2
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	da00      	bge.n	80013dc <PID+0xc0>
 80013da:	3307      	adds	r3, #7
 80013dc:	10db      	asrs	r3, r3, #3
 80013de:	623b      	str	r3, [r7, #32]
  if(ret > MAX_INT)
 80013e0:	6a3b      	ldr	r3, [r7, #32]
 80013e2:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80013e6:	4293      	cmp	r3, r2
 80013e8:	dd03      	ble.n	80013f2 <PID+0xd6>
    ret = MAX_INT;
 80013ea:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 80013ee:	623b      	str	r3, [r7, #32]
 80013f0:	e005      	b.n	80013fe <PID+0xe2>
  else if(ret < -MAX_INT)
 80013f2:	6a3b      	ldr	r3, [r7, #32]
 80013f4:	4a05      	ldr	r2, [pc, #20]	; (800140c <PID+0xf0>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	da01      	bge.n	80013fe <PID+0xe2>
    ret = -MAX_INT;
 80013fa:	4b04      	ldr	r3, [pc, #16]	; (800140c <PID+0xf0>)
 80013fc:	623b      	str	r3, [r7, #32]
  return((int)ret);
 80013fe:	6a3b      	ldr	r3, [r7, #32]
}
 8001400:	4618      	mov	r0, r3
 8001402:	372c      	adds	r7, #44	; 0x2c
 8001404:	46bd      	mov	sp, r7
 8001406:	bc80      	pop	{r7}
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	ffff8002 	.word	0xffff8002

08001410 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 800141a:	2300      	movs	r3, #0
 800141c:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 800141e:	2300      	movs	r3, #0
 8001420:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfChannel));

  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	60fb      	str	r3, [r7, #12]
  /* Clear DUALMOD and SCAN bits */
  tmpreg1 &= CR1_CLEAR_Mask;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800142e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001432:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: Dual mode and scan conversion mode */
  /* Set DUALMOD bits according to ADC_Mode value */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_Mode | ((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8));
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	791b      	ldrb	r3, [r3, #4]
 800143c:	021b      	lsls	r3, r3, #8
 800143e:	4313      	orrs	r3, r2
 8001440:	68fa      	ldr	r2, [r7, #12]
 8001442:	4313      	orrs	r3, r2
 8001444:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	68fa      	ldr	r2, [r7, #12]
 800144a:	605a      	str	r2, [r3, #4]

  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	60fb      	str	r3, [r7, #12]
  /* Clear CONT, ALIGN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_Mask;
 8001452:	68fa      	ldr	r2, [r7, #12]
 8001454:	4b16      	ldr	r3, [pc, #88]	; (80014b0 <ADC_Init+0xa0>)
 8001456:	4013      	ands	r3, r2
 8001458:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: external trigger event and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	68da      	ldr	r2, [r3, #12]
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	431a      	orrs	r2, r3
            ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	795b      	ldrb	r3, [r3, #5]
 8001468:	005b      	lsls	r3, r3, #1
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
 800146a:	4313      	orrs	r3, r2
 800146c:	68fa      	ldr	r2, [r7, #12]
 800146e:	4313      	orrs	r3, r2
 8001470:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	68fa      	ldr	r2, [r7, #12]
 8001476:	609a      	str	r2, [r3, #8]

  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800147c:	60fb      	str	r3, [r7, #12]
  /* Clear L bits */
  tmpreg1 &= SQR1_CLEAR_Mask;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001484:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfChannel value */
  tmpreg2 |= (uint8_t) (ADC_InitStruct->ADC_NbrOfChannel - (uint8_t)1);
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	7c1b      	ldrb	r3, [r3, #16]
 800148a:	3b01      	subs	r3, #1
 800148c:	b2da      	uxtb	r2, r3
 800148e:	7afb      	ldrb	r3, [r7, #11]
 8001490:	4313      	orrs	r3, r2
 8001492:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= (uint32_t)tmpreg2 << 20;
 8001494:	7afb      	ldrb	r3, [r7, #11]
 8001496:	051b      	lsls	r3, r3, #20
 8001498:	68fa      	ldr	r2, [r7, #12]
 800149a:	4313      	orrs	r3, r2
 800149c:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	68fa      	ldr	r2, [r7, #12]
 80014a2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80014a4:	bf00      	nop
 80014a6:	3714      	adds	r7, #20
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bc80      	pop	{r7}
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	fff1f7fd 	.word	0xfff1f7fd

080014b4 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	460b      	mov	r3, r1
 80014be:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80014c0:	78fb      	ldrb	r3, [r7, #3]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d006      	beq.n	80014d4 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= CR2_ADON_Set;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	f043 0201 	orr.w	r2, r3, #1
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= CR2_ADON_Reset;
  }
}
 80014d2:	e005      	b.n	80014e0 <ADC_Cmd+0x2c>
    ADCx->CR2 &= CR2_ADON_Reset;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	f023 0201 	bic.w	r2, r3, #1
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	609a      	str	r2, [r3, #8]
}
 80014e0:	bf00      	nop
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bc80      	pop	{r7}
 80014e8:	4770      	bx	lr

080014ea <ADC_ResetCalibration>:
  * @brief  Resets the selected ADC calibration registers.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_ResetCalibration(ADC_TypeDef* ADCx)
{
 80014ea:	b480      	push	{r7}
 80014ec:	b083      	sub	sp, #12
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Resets the selected ADC calibration registers */  
  ADCx->CR2 |= CR2_RSTCAL_Set;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	f043 0208 	orr.w	r2, r3, #8
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	609a      	str	r2, [r3, #8]
}
 80014fe:	bf00      	nop
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	bc80      	pop	{r7}
 8001506:	4770      	bx	lr

08001508 <ADC_GetResetCalibrationStatus>:
  * @brief  Gets the selected ADC reset calibration registers status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC reset calibration registers (SET or RESET).
  */
FlagStatus ADC_GetResetCalibrationStatus(ADC_TypeDef* ADCx)
{
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8001510:	2300      	movs	r3, #0
 8001512:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of RSTCAL bit */
  if ((ADCx->CR2 & CR2_RSTCAL_Set) != (uint32_t)RESET)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	f003 0308 	and.w	r3, r3, #8
 800151c:	2b00      	cmp	r3, #0
 800151e:	d002      	beq.n	8001526 <ADC_GetResetCalibrationStatus+0x1e>
  {
    /* RSTCAL bit is set */
    bitstatus = SET;
 8001520:	2301      	movs	r3, #1
 8001522:	73fb      	strb	r3, [r7, #15]
 8001524:	e001      	b.n	800152a <ADC_GetResetCalibrationStatus+0x22>
  }
  else
  {
    /* RSTCAL bit is reset */
    bitstatus = RESET;
 8001526:	2300      	movs	r3, #0
 8001528:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RSTCAL bit status */
  return  bitstatus;
 800152a:	7bfb      	ldrb	r3, [r7, #15]
}
 800152c:	4618      	mov	r0, r3
 800152e:	3714      	adds	r7, #20
 8001530:	46bd      	mov	sp, r7
 8001532:	bc80      	pop	{r7}
 8001534:	4770      	bx	lr

08001536 <ADC_StartCalibration>:
  * @brief  Starts the selected ADC calibration process.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_StartCalibration(ADC_TypeDef* ADCx)
{
 8001536:	b480      	push	{r7}
 8001538:	b083      	sub	sp, #12
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Enable the selected ADC calibration process */  
  ADCx->CR2 |= CR2_CAL_Set;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	f043 0204 	orr.w	r2, r3, #4
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	609a      	str	r2, [r3, #8]
}
 800154a:	bf00      	nop
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	bc80      	pop	{r7}
 8001552:	4770      	bx	lr

08001554 <ADC_GetCalibrationStatus>:
  * @brief  Gets the selected ADC calibration status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC calibration (SET or RESET).
  */
FlagStatus ADC_GetCalibrationStatus(ADC_TypeDef* ADCx)
{
 8001554:	b480      	push	{r7}
 8001556:	b085      	sub	sp, #20
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800155c:	2300      	movs	r3, #0
 800155e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of CAL bit */
  if ((ADCx->CR2 & CR2_CAL_Set) != (uint32_t)RESET)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	f003 0304 	and.w	r3, r3, #4
 8001568:	2b00      	cmp	r3, #0
 800156a:	d002      	beq.n	8001572 <ADC_GetCalibrationStatus+0x1e>
  {
    /* CAL bit is set: calibration on going */
    bitstatus = SET;
 800156c:	2301      	movs	r3, #1
 800156e:	73fb      	strb	r3, [r7, #15]
 8001570:	e001      	b.n	8001576 <ADC_GetCalibrationStatus+0x22>
  }
  else
  {
    /* CAL bit is reset: end of calibration */
    bitstatus = RESET;
 8001572:	2300      	movs	r3, #0
 8001574:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the CAL bit status */
  return  bitstatus;
 8001576:	7bfb      	ldrb	r3, [r7, #15]
}
 8001578:	4618      	mov	r0, r3
 800157a:	3714      	adds	r7, #20
 800157c:	46bd      	mov	sp, r7
 800157e:	bc80      	pop	{r7}
 8001580:	4770      	bx	lr

08001582 <ADC_SoftwareStartConvCmd>:
  * @param  NewState: new state of the selected ADC software start conversion.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_SoftwareStartConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8001582:	b480      	push	{r7}
 8001584:	b083      	sub	sp, #12
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
 800158a:	460b      	mov	r3, r1
 800158c:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800158e:	78fb      	ldrb	r3, [r7, #3]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d006      	beq.n	80015a2 <ADC_SoftwareStartConvCmd+0x20>
  {
    /* Enable the selected ADC conversion on external event and start the selected
       ADC conversion */
    ADCx->CR2 |= CR2_EXTTRIG_SWSTART_Set;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	f443 02a0 	orr.w	r2, r3, #5242880	; 0x500000
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	609a      	str	r2, [r3, #8]
  {
    /* Disable the selected ADC conversion on external event and stop the selected
       ADC conversion */
    ADCx->CR2 &= CR2_EXTTRIG_SWSTART_Reset;
  }
}
 80015a0:	e005      	b.n	80015ae <ADC_SoftwareStartConvCmd+0x2c>
    ADCx->CR2 &= CR2_EXTTRIG_SWSTART_Reset;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	f423 02a0 	bic.w	r2, r3, #5242880	; 0x500000
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	609a      	str	r2, [r3, #8]
}
 80015ae:	bf00      	nop
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bc80      	pop	{r7}
 80015b6:	4770      	bx	lr

080015b8 <ADC_RegularChannelConfig>:
  *     @arg ADC_SampleTime_71Cycles5: Sample time equal to 71.5 cycles	
  *     @arg ADC_SampleTime_239Cycles5: Sample time equal to 239.5 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	4608      	mov	r0, r1
 80015c2:	4611      	mov	r1, r2
 80015c4:	461a      	mov	r2, r3
 80015c6:	4603      	mov	r3, r0
 80015c8:	70fb      	strb	r3, [r7, #3]
 80015ca:	460b      	mov	r3, r1
 80015cc:	70bb      	strb	r3, [r7, #2]
 80015ce:	4613      	mov	r3, r2
 80015d0:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 80015d2:	2300      	movs	r3, #0
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	2300      	movs	r3, #0
 80015d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
 80015da:	78fb      	ldrb	r3, [r7, #3]
 80015dc:	2b09      	cmp	r3, #9
 80015de:	d923      	bls.n	8001628 <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_Set << (3 * (ADC_Channel - 10));
 80015e6:	78fb      	ldrb	r3, [r7, #3]
 80015e8:	f1a3 020a 	sub.w	r2, r3, #10
 80015ec:	4613      	mov	r3, r2
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	4413      	add	r3, r2
 80015f2:	2207      	movs	r2, #7
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	43db      	mvns	r3, r3
 80015fe:	68fa      	ldr	r2, [r7, #12]
 8001600:	4013      	ands	r3, r2
 8001602:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8001604:	7879      	ldrb	r1, [r7, #1]
 8001606:	78fb      	ldrb	r3, [r7, #3]
 8001608:	f1a3 020a 	sub.w	r2, r3, #10
 800160c:	4613      	mov	r3, r2
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	4413      	add	r3, r2
 8001612:	fa01 f303 	lsl.w	r3, r1, r3
 8001616:	60bb      	str	r3, [r7, #8]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
 8001618:	68fa      	ldr	r2, [r7, #12]
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	4313      	orrs	r3, r2
 800161e:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	68fa      	ldr	r2, [r7, #12]
 8001624:	60da      	str	r2, [r3, #12]
 8001626:	e01e      	b.n	8001666 <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	691b      	ldr	r3, [r3, #16]
 800162c:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
 800162e:	78fa      	ldrb	r2, [r7, #3]
 8001630:	4613      	mov	r3, r2
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	4413      	add	r3, r2
 8001636:	2207      	movs	r2, #7
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	43db      	mvns	r3, r3
 8001642:	68fa      	ldr	r2, [r7, #12]
 8001644:	4013      	ands	r3, r2
 8001646:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8001648:	7879      	ldrb	r1, [r7, #1]
 800164a:	78fa      	ldrb	r2, [r7, #3]
 800164c:	4613      	mov	r3, r2
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	4413      	add	r3, r2
 8001652:	fa01 f303 	lsl.w	r3, r1, r3
 8001656:	60bb      	str	r3, [r7, #8]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
 8001658:	68fa      	ldr	r2, [r7, #12]
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	4313      	orrs	r3, r2
 800165e:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	68fa      	ldr	r2, [r7, #12]
 8001664:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 8001666:	78bb      	ldrb	r3, [r7, #2]
 8001668:	2b06      	cmp	r3, #6
 800166a:	d821      	bhi.n	80016b0 <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001670:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_Set << (5 * (Rank - 1));
 8001672:	78bb      	ldrb	r3, [r7, #2]
 8001674:	1e5a      	subs	r2, r3, #1
 8001676:	4613      	mov	r3, r2
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	4413      	add	r3, r2
 800167c:	221f      	movs	r2, #31
 800167e:	fa02 f303 	lsl.w	r3, r2, r3
 8001682:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	43db      	mvns	r3, r3
 8001688:	68fa      	ldr	r2, [r7, #12]
 800168a:	4013      	ands	r3, r2
 800168c:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 800168e:	78f9      	ldrb	r1, [r7, #3]
 8001690:	78bb      	ldrb	r3, [r7, #2]
 8001692:	1e5a      	subs	r2, r3, #1
 8001694:	4613      	mov	r3, r2
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	4413      	add	r3, r2
 800169a:	fa01 f303 	lsl.w	r3, r1, r3
 800169e:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80016a0:	68fa      	ldr	r2, [r7, #12]
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	68fa      	ldr	r2, [r7, #12]
 80016ac:	635a      	str	r2, [r3, #52]	; 0x34
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 80016ae:	e047      	b.n	8001740 <ADC_RegularChannelConfig+0x188>
  else if (Rank < 13)
 80016b0:	78bb      	ldrb	r3, [r7, #2]
 80016b2:	2b0c      	cmp	r3, #12
 80016b4:	d821      	bhi.n	80016fa <ADC_RegularChannelConfig+0x142>
    tmpreg1 = ADCx->SQR2;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR2_SQ_Set << (5 * (Rank - 7));
 80016bc:	78bb      	ldrb	r3, [r7, #2]
 80016be:	1fda      	subs	r2, r3, #7
 80016c0:	4613      	mov	r3, r2
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	4413      	add	r3, r2
 80016c6:	221f      	movs	r2, #31
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	43db      	mvns	r3, r3
 80016d2:	68fa      	ldr	r2, [r7, #12]
 80016d4:	4013      	ands	r3, r2
 80016d6:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 80016d8:	78f9      	ldrb	r1, [r7, #3]
 80016da:	78bb      	ldrb	r3, [r7, #2]
 80016dc:	1fda      	subs	r2, r3, #7
 80016de:	4613      	mov	r3, r2
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	4413      	add	r3, r2
 80016e4:	fa01 f303 	lsl.w	r3, r1, r3
 80016e8:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 80016ea:	68fa      	ldr	r2, [r7, #12]
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	60fb      	str	r3, [r7, #12]
    ADCx->SQR2 = tmpreg1;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	68fa      	ldr	r2, [r7, #12]
 80016f6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80016f8:	e022      	b.n	8001740 <ADC_RegularChannelConfig+0x188>
    tmpreg1 = ADCx->SQR1;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016fe:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR1_SQ_Set << (5 * (Rank - 13));
 8001700:	78bb      	ldrb	r3, [r7, #2]
 8001702:	f1a3 020d 	sub.w	r2, r3, #13
 8001706:	4613      	mov	r3, r2
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	4413      	add	r3, r2
 800170c:	221f      	movs	r2, #31
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	43db      	mvns	r3, r3
 8001718:	68fa      	ldr	r2, [r7, #12]
 800171a:	4013      	ands	r3, r2
 800171c:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 800171e:	78f9      	ldrb	r1, [r7, #3]
 8001720:	78bb      	ldrb	r3, [r7, #2]
 8001722:	f1a3 020d 	sub.w	r2, r3, #13
 8001726:	4613      	mov	r3, r2
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	4413      	add	r3, r2
 800172c:	fa01 f303 	lsl.w	r3, r1, r3
 8001730:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 8001732:	68fa      	ldr	r2, [r7, #12]
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	4313      	orrs	r3, r2
 8001738:	60fb      	str	r3, [r7, #12]
    ADCx->SQR1 = tmpreg1;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	68fa      	ldr	r2, [r7, #12]
 800173e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001740:	bf00      	nop
 8001742:	3714      	adds	r7, #20
 8001744:	46bd      	mov	sp, r7
 8001746:	bc80      	pop	{r7}
 8001748:	4770      	bx	lr

0800174a <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 800174a:	b480      	push	{r7}
 800174c:	b083      	sub	sp, #12
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001756:	b29b      	uxth	r3, r3
}
 8001758:	4618      	mov	r0, r3
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	bc80      	pop	{r7}
 8001760:	4770      	bx	lr
	...

08001764 <ADC_TempSensorVrefintCmd>:
  * @param  NewState: new state of the temperature sensor.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_TempSensorVrefintCmd(FunctionalState NewState)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800176e:	79fb      	ldrb	r3, [r7, #7]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d006      	beq.n	8001782 <ADC_TempSensorVrefintCmd+0x1e>
  {
    /* Enable the temperature sensor and Vrefint channel*/
    ADC1->CR2 |= CR2_TSVREFE_Set;
 8001774:	4b08      	ldr	r3, [pc, #32]	; (8001798 <ADC_TempSensorVrefintCmd+0x34>)
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	4a07      	ldr	r2, [pc, #28]	; (8001798 <ADC_TempSensorVrefintCmd+0x34>)
 800177a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800177e:	6093      	str	r3, [r2, #8]
  else
  {
    /* Disable the temperature sensor and Vrefint channel*/
    ADC1->CR2 &= CR2_TSVREFE_Reset;
  }
}
 8001780:	e005      	b.n	800178e <ADC_TempSensorVrefintCmd+0x2a>
    ADC1->CR2 &= CR2_TSVREFE_Reset;
 8001782:	4b05      	ldr	r3, [pc, #20]	; (8001798 <ADC_TempSensorVrefintCmd+0x34>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	4a04      	ldr	r2, [pc, #16]	; (8001798 <ADC_TempSensorVrefintCmd+0x34>)
 8001788:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800178c:	6093      	str	r3, [r2, #8]
}
 800178e:	bf00      	nop
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	bc80      	pop	{r7}
 8001796:	4770      	bx	lr
 8001798:	40012400 	.word	0x40012400

0800179c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800179c:	b480      	push	{r7}
 800179e:	b089      	sub	sp, #36	; 0x24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 80017a6:	2300      	movs	r3, #0
 80017a8:	61fb      	str	r3, [r7, #28]
 80017aa:	2300      	movs	r3, #0
 80017ac:	613b      	str	r3, [r7, #16]
 80017ae:	2300      	movs	r3, #0
 80017b0:	61bb      	str	r3, [r7, #24]
 80017b2:	2300      	movs	r3, #0
 80017b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 80017b6:	2300      	movs	r3, #0
 80017b8:	617b      	str	r3, [r7, #20]
 80017ba:	2300      	movs	r3, #0
 80017bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	78db      	ldrb	r3, [r3, #3]
 80017c2:	f003 030f 	and.w	r3, r3, #15
 80017c6:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	78db      	ldrb	r3, [r3, #3]
 80017cc:	f003 0310 	and.w	r3, r3, #16
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d005      	beq.n	80017e0 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	789b      	ldrb	r3, [r3, #2]
 80017d8:	461a      	mov	r2, r3
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	4313      	orrs	r3, r2
 80017de:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	881b      	ldrh	r3, [r3, #0]
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d044      	beq.n	8001874 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80017f0:	2300      	movs	r3, #0
 80017f2:	61bb      	str	r3, [r7, #24]
 80017f4:	e038      	b.n	8001868 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 80017f6:	2201      	movs	r2, #1
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	881b      	ldrh	r3, [r3, #0]
 8001804:	461a      	mov	r2, r3
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	4013      	ands	r3, r2
 800180a:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	429a      	cmp	r2, r3
 8001812:	d126      	bne.n	8001862 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800181a:	220f      	movs	r2, #15
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	43db      	mvns	r3, r3
 8001828:	697a      	ldr	r2, [r7, #20]
 800182a:	4013      	ands	r3, r2
 800182c:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800182e:	69fa      	ldr	r2, [r7, #28]
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	697a      	ldr	r2, [r7, #20]
 8001838:	4313      	orrs	r3, r2
 800183a:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	78db      	ldrb	r3, [r3, #3]
 8001840:	2b28      	cmp	r3, #40	; 0x28
 8001842:	d105      	bne.n	8001850 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8001844:	2201      	movs	r2, #1
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	409a      	lsls	r2, r3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	615a      	str	r2, [r3, #20]
 800184e:	e008      	b.n	8001862 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	78db      	ldrb	r3, [r3, #3]
 8001854:	2b48      	cmp	r3, #72	; 0x48
 8001856:	d104      	bne.n	8001862 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001858:	2201      	movs	r2, #1
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	409a      	lsls	r2, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	3301      	adds	r3, #1
 8001866:	61bb      	str	r3, [r7, #24]
 8001868:	69bb      	ldr	r3, [r7, #24]
 800186a:	2b07      	cmp	r3, #7
 800186c:	d9c3      	bls.n	80017f6 <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	697a      	ldr	r2, [r7, #20]
 8001872:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	881b      	ldrh	r3, [r3, #0]
 8001878:	2bff      	cmp	r3, #255	; 0xff
 800187a:	d946      	bls.n	800190a <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001882:	2300      	movs	r3, #0
 8001884:	61bb      	str	r3, [r7, #24]
 8001886:	e03a      	b.n	80018fe <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	3308      	adds	r3, #8
 800188c:	2201      	movs	r2, #1
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	881b      	ldrh	r3, [r3, #0]
 8001898:	461a      	mov	r2, r3
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	4013      	ands	r3, r2
 800189e:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 80018a0:	693a      	ldr	r2, [r7, #16]
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d127      	bne.n	80018f8 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80018ae:	220f      	movs	r2, #15
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	43db      	mvns	r3, r3
 80018bc:	697a      	ldr	r2, [r7, #20]
 80018be:	4013      	ands	r3, r2
 80018c0:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80018c2:	69fa      	ldr	r2, [r7, #28]
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	697a      	ldr	r2, [r7, #20]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	78db      	ldrb	r3, [r3, #3]
 80018d4:	2b28      	cmp	r3, #40	; 0x28
 80018d6:	d105      	bne.n	80018e4 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	3308      	adds	r3, #8
 80018dc:	2201      	movs	r2, #1
 80018de:	409a      	lsls	r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	78db      	ldrb	r3, [r3, #3]
 80018e8:	2b48      	cmp	r3, #72	; 0x48
 80018ea:	d105      	bne.n	80018f8 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	3308      	adds	r3, #8
 80018f0:	2201      	movs	r2, #1
 80018f2:	409a      	lsls	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	3301      	adds	r3, #1
 80018fc:	61bb      	str	r3, [r7, #24]
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	2b07      	cmp	r3, #7
 8001902:	d9c1      	bls.n	8001888 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	697a      	ldr	r2, [r7, #20]
 8001908:	605a      	str	r2, [r3, #4]
  }
}
 800190a:	bf00      	nop
 800190c:	3724      	adds	r7, #36	; 0x24
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr

08001914 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	460b      	mov	r3, r1
 800191e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001920:	78fb      	ldrb	r3, [r7, #3]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d006      	beq.n	8001934 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001926:	4b09      	ldr	r3, [pc, #36]	; (800194c <RCC_APB2PeriphClockCmd+0x38>)
 8001928:	699a      	ldr	r2, [r3, #24]
 800192a:	4908      	ldr	r1, [pc, #32]	; (800194c <RCC_APB2PeriphClockCmd+0x38>)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	4313      	orrs	r3, r2
 8001930:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8001932:	e006      	b.n	8001942 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001934:	4b05      	ldr	r3, [pc, #20]	; (800194c <RCC_APB2PeriphClockCmd+0x38>)
 8001936:	699a      	ldr	r2, [r3, #24]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	43db      	mvns	r3, r3
 800193c:	4903      	ldr	r1, [pc, #12]	; (800194c <RCC_APB2PeriphClockCmd+0x38>)
 800193e:	4013      	ands	r3, r2
 8001940:	618b      	str	r3, [r1, #24]
}
 8001942:	bf00      	nop
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	bc80      	pop	{r7}
 800194a:	4770      	bx	lr
 800194c:	40021000 	.word	0x40021000

08001950 <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for the 
  *         specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 800195a:	2300      	movs	r3, #0
 800195c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	881b      	ldrh	r3, [r3, #0]
 8001962:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	4a2e      	ldr	r2, [pc, #184]	; (8001a20 <TIM_TimeBaseInit+0xd0>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d013      	beq.n	8001994 <TIM_TimeBaseInit+0x44>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4a2d      	ldr	r2, [pc, #180]	; (8001a24 <TIM_TimeBaseInit+0xd4>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d00f      	beq.n	8001994 <TIM_TimeBaseInit+0x44>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800197a:	d00b      	beq.n	8001994 <TIM_TimeBaseInit+0x44>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	4a2a      	ldr	r2, [pc, #168]	; (8001a28 <TIM_TimeBaseInit+0xd8>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d007      	beq.n	8001994 <TIM_TimeBaseInit+0x44>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4a29      	ldr	r2, [pc, #164]	; (8001a2c <TIM_TimeBaseInit+0xdc>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d003      	beq.n	8001994 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4a28      	ldr	r2, [pc, #160]	; (8001a30 <TIM_TimeBaseInit+0xe0>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d108      	bne.n	80019a6 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8001994:	89fb      	ldrh	r3, [r7, #14]
 8001996:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800199a:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	885a      	ldrh	r2, [r3, #2]
 80019a0:	89fb      	ldrh	r3, [r7, #14]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a22      	ldr	r2, [pc, #136]	; (8001a34 <TIM_TimeBaseInit+0xe4>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d00c      	beq.n	80019c8 <TIM_TimeBaseInit+0x78>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a21      	ldr	r2, [pc, #132]	; (8001a38 <TIM_TimeBaseInit+0xe8>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d008      	beq.n	80019c8 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 80019b6:	89fb      	ldrh	r3, [r7, #14]
 80019b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019bc:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	88da      	ldrh	r2, [r3, #6]
 80019c2:	89fb      	ldrh	r3, [r7, #14]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	89fa      	ldrh	r2, [r7, #14]
 80019cc:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	889a      	ldrh	r2, [r3, #4]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	859a      	strh	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	881a      	ldrh	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a0f      	ldr	r2, [pc, #60]	; (8001a20 <TIM_TimeBaseInit+0xd0>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d00f      	beq.n	8001a06 <TIM_TimeBaseInit+0xb6>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a0e      	ldr	r2, [pc, #56]	; (8001a24 <TIM_TimeBaseInit+0xd4>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d00b      	beq.n	8001a06 <TIM_TimeBaseInit+0xb6>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a12      	ldr	r2, [pc, #72]	; (8001a3c <TIM_TimeBaseInit+0xec>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d007      	beq.n	8001a06 <TIM_TimeBaseInit+0xb6>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a11      	ldr	r2, [pc, #68]	; (8001a40 <TIM_TimeBaseInit+0xf0>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d003      	beq.n	8001a06 <TIM_TimeBaseInit+0xb6>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a10      	ldr	r2, [pc, #64]	; (8001a44 <TIM_TimeBaseInit+0xf4>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d104      	bne.n	8001a10 <TIM_TimeBaseInit+0xc0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	7a1b      	ldrb	r3, [r3, #8]
 8001a0a:	b29a      	uxth	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2201      	movs	r2, #1
 8001a14:	829a      	strh	r2, [r3, #20]
}
 8001a16:	bf00      	nop
 8001a18:	3714      	adds	r7, #20
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bc80      	pop	{r7}
 8001a1e:	4770      	bx	lr
 8001a20:	40012c00 	.word	0x40012c00
 8001a24:	40013400 	.word	0x40013400
 8001a28:	40000400 	.word	0x40000400
 8001a2c:	40000800 	.word	0x40000800
 8001a30:	40000c00 	.word	0x40000c00
 8001a34:	40001000 	.word	0x40001000
 8001a38:	40001400 	.word	0x40001400
 8001a3c:	40014000 	.word	0x40014000
 8001a40:	40014400 	.word	0x40014400
 8001a44:	40014800 	.word	0x40014800

08001a48 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b085      	sub	sp, #20
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8001a52:	2300      	movs	r3, #0
 8001a54:	817b      	strh	r3, [r7, #10]
 8001a56:	2300      	movs	r3, #0
 8001a58:	81fb      	strh	r3, [r7, #14]
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	8c1b      	ldrh	r3, [r3, #32]
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	f023 0301 	bic.w	r3, r3, #1
 8001a68:	b29a      	uxth	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	841a      	strh	r2, [r3, #32]
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	8c1b      	ldrh	r3, [r3, #32]
 8001a72:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	889b      	ldrh	r3, [r3, #4]
 8001a78:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	8b1b      	ldrh	r3, [r3, #24]
 8001a7e:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC1M));
 8001a80:	897b      	ldrh	r3, [r7, #10]
 8001a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a86:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 8001a88:	897b      	ldrh	r3, [r7, #10]
 8001a8a:	f023 0303 	bic.w	r3, r3, #3
 8001a8e:	817b      	strh	r3, [r7, #10]

  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	881a      	ldrh	r2, [r3, #0]
 8001a94:	897b      	ldrh	r3, [r7, #10]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 8001a9a:	89fb      	ldrh	r3, [r7, #14]
 8001a9c:	f023 0302 	bic.w	r3, r3, #2
 8001aa0:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	891a      	ldrh	r2, [r3, #8]
 8001aa6:	89fb      	ldrh	r3, [r7, #14]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	885a      	ldrh	r2, [r3, #2]
 8001ab0:	89fb      	ldrh	r3, [r7, #14]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a24      	ldr	r2, [pc, #144]	; (8001b4c <TIM_OC1Init+0x104>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d00f      	beq.n	8001ade <TIM_OC1Init+0x96>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a23      	ldr	r2, [pc, #140]	; (8001b50 <TIM_OC1Init+0x108>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d00b      	beq.n	8001ade <TIM_OC1Init+0x96>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a22      	ldr	r2, [pc, #136]	; (8001b54 <TIM_OC1Init+0x10c>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d007      	beq.n	8001ade <TIM_OC1Init+0x96>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a21      	ldr	r2, [pc, #132]	; (8001b58 <TIM_OC1Init+0x110>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d003      	beq.n	8001ade <TIM_OC1Init+0x96>
     (TIMx == TIM16)|| (TIMx == TIM17))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a20      	ldr	r2, [pc, #128]	; (8001b5c <TIM_OC1Init+0x114>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d123      	bne.n	8001b26 <TIM_OC1Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
 8001ade:	89fb      	ldrh	r3, [r7, #14]
 8001ae0:	f023 0308 	bic.w	r3, r3, #8
 8001ae4:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	895a      	ldrh	r2, [r3, #10]
 8001aea:	89fb      	ldrh	r3, [r7, #14]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
 8001af0:	89fb      	ldrh	r3, [r7, #14]
 8001af2:	f023 0304 	bic.w	r3, r3, #4
 8001af6:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	889a      	ldrh	r2, [r3, #4]
 8001afc:	89fb      	ldrh	r3, [r7, #14]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1));
 8001b02:	89bb      	ldrh	r3, [r7, #12]
 8001b04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b08:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
 8001b0a:	89bb      	ldrh	r3, [r7, #12]
 8001b0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001b10:	81bb      	strh	r3, [r7, #12]
    
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	899a      	ldrh	r2, [r3, #12]
 8001b16:	89bb      	ldrh	r3, [r7, #12]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	89da      	ldrh	r2, [r3, #14]
 8001b20:	89bb      	ldrh	r3, [r7, #12]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	89ba      	ldrh	r2, [r7, #12]
 8001b2a:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	897a      	ldrh	r2, [r7, #10]
 8001b30:	831a      	strh	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	88da      	ldrh	r2, [r3, #6]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	869a      	strh	r2, [r3, #52]	; 0x34
 
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	89fa      	ldrh	r2, [r7, #14]
 8001b3e:	841a      	strh	r2, [r3, #32]
}
 8001b40:	bf00      	nop
 8001b42:	3714      	adds	r7, #20
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bc80      	pop	{r7}
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	40012c00 	.word	0x40012c00
 8001b50:	40013400 	.word	0x40013400
 8001b54:	40014000 	.word	0x40014000
 8001b58:	40014400 	.word	0x40014400
 8001b5c:	40014800 	.word	0x40014800

08001b60 <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	817b      	strh	r3, [r7, #10]
 8001b6e:	2300      	movs	r3, #0
 8001b70:	81fb      	strh	r3, [r7, #14]
 8001b72:	2300      	movs	r3, #0
 8001b74:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
   /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	8c1b      	ldrh	r3, [r3, #32]
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	f023 0310 	bic.w	r3, r3, #16
 8001b80:	b29a      	uxth	r2, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	8c1b      	ldrh	r3, [r3, #32]
 8001b8a:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	889b      	ldrh	r3, [r3, #4]
 8001b90:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	8b1b      	ldrh	r3, [r3, #24]
 8001b96:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC2M));
 8001b98:	897b      	ldrh	r3, [r7, #10]
 8001b9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b9e:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
 8001ba0:	897b      	ldrh	r3, [r7, #10]
 8001ba2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ba6:	817b      	strh	r3, [r7, #10]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	881b      	ldrh	r3, [r3, #0]
 8001bac:	021b      	lsls	r3, r3, #8
 8001bae:	b29a      	uxth	r2, r3
 8001bb0:	897b      	ldrh	r3, [r7, #10]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
 8001bb6:	89fb      	ldrh	r3, [r7, #14]
 8001bb8:	f023 0320 	bic.w	r3, r3, #32
 8001bbc:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	891b      	ldrh	r3, [r3, #8]
 8001bc2:	011b      	lsls	r3, r3, #4
 8001bc4:	b29a      	uxth	r2, r3
 8001bc6:	89fb      	ldrh	r3, [r7, #14]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	885b      	ldrh	r3, [r3, #2]
 8001bd0:	011b      	lsls	r3, r3, #4
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	89fb      	ldrh	r3, [r7, #14]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a22      	ldr	r2, [pc, #136]	; (8001c68 <TIM_OC2Init+0x108>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d003      	beq.n	8001bea <TIM_OC2Init+0x8a>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a21      	ldr	r2, [pc, #132]	; (8001c6c <TIM_OC2Init+0x10c>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d12b      	bne.n	8001c42 <TIM_OC2Init+0xe2>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NP));
 8001bea:	89fb      	ldrh	r3, [r7, #14]
 8001bec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001bf0:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	895b      	ldrh	r3, [r3, #10]
 8001bf6:	011b      	lsls	r3, r3, #4
 8001bf8:	b29a      	uxth	r2, r3
 8001bfa:	89fb      	ldrh	r3, [r7, #14]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NE));    
 8001c00:	89fb      	ldrh	r3, [r7, #14]
 8001c02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001c06:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	889b      	ldrh	r3, [r3, #4]
 8001c0c:	011b      	lsls	r3, r3, #4
 8001c0e:	b29a      	uxth	r2, r3
 8001c10:	89fb      	ldrh	r3, [r7, #14]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2));
 8001c16:	89bb      	ldrh	r3, [r7, #12]
 8001c18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001c1c:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2N));
 8001c1e:	89bb      	ldrh	r3, [r7, #12]
 8001c20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001c24:	81bb      	strh	r3, [r7, #12]
    
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	899b      	ldrh	r3, [r3, #12]
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	b29a      	uxth	r2, r3
 8001c2e:	89bb      	ldrh	r3, [r7, #12]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	89db      	ldrh	r3, [r3, #14]
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	89bb      	ldrh	r3, [r7, #12]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	89ba      	ldrh	r2, [r7, #12]
 8001c46:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	897a      	ldrh	r2, [r7, #10]
 8001c4c:	831a      	strh	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	88da      	ldrh	r2, [r3, #6]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	871a      	strh	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	89fa      	ldrh	r2, [r7, #14]
 8001c5a:	841a      	strh	r2, [r3, #32]
}
 8001c5c:	bf00      	nop
 8001c5e:	3714      	adds	r7, #20
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bc80      	pop	{r7}
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	40012c00 	.word	0x40012c00
 8001c6c:	40013400 	.word	0x40013400

08001c70 <TIM_BDTRConfig>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval None
  */
void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	881a      	ldrh	r2, [r3, #0]
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	885b      	ldrh	r3, [r3, #2]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	889b      	ldrh	r3, [r3, #4]
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	88db      	ldrh	r3, [r3, #6]
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8001c92:	4313      	orrs	r3, r2
 8001c94:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	891b      	ldrh	r3, [r3, #8]
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	895b      	ldrh	r3, [r3, #10]
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	899b      	ldrh	r3, [r3, #12]
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8001caa:	4313      	orrs	r3, r2
 8001cac:	b29a      	uxth	r2, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
}
 8001cb4:	bf00      	nop
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bc80      	pop	{r7}
 8001cbc:	4770      	bx	lr

08001cbe <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	b083      	sub	sp, #12
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001cca:	78fb      	ldrb	r3, [r7, #3]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d008      	beq.n	8001ce2 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	881b      	ldrh	r3, [r3, #0]
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	f043 0301 	orr.w	r3, r3, #1
 8001cda:	b29a      	uxth	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 8001ce0:	e007      	b.n	8001cf2 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	881b      	ldrh	r3, [r3, #0]
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	f023 0301 	bic.w	r3, r3, #1
 8001cec:	b29a      	uxth	r2, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	801a      	strh	r2, [r3, #0]
}
 8001cf2:	bf00      	nop
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bc80      	pop	{r7}
 8001cfa:	4770      	bx	lr

08001cfc <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	460b      	mov	r3, r1
 8001d06:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001d08:	78fb      	ldrb	r3, [r7, #3]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d00c      	beq.n	8001d28 <TIM_CtrlPWMOutputs+0x2c>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d1e:	b29a      	uxth	r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
  }  
}
 8001d26:	e009      	b.n	8001d3c <TIM_CtrlPWMOutputs+0x40>
    TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001d34:	b29a      	uxth	r2, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
}
 8001d3c:	bf00      	nop
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bc80      	pop	{r7}
 8001d44:	4770      	bx	lr

08001d46 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8001d46:	b480      	push	{r7}
 8001d48:	b083      	sub	sp, #12
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
 8001d4e:	460b      	mov	r3, r1
 8001d50:	807b      	strh	r3, [r7, #2]
 8001d52:	4613      	mov	r3, r2
 8001d54:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001d56:	787b      	ldrb	r3, [r7, #1]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d008      	beq.n	8001d6e <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	899b      	ldrh	r3, [r3, #12]
 8001d60:	b29a      	uxth	r2, r3
 8001d62:	887b      	ldrh	r3, [r7, #2]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	b29a      	uxth	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 8001d6c:	e009      	b.n	8001d82 <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	899b      	ldrh	r3, [r3, #12]
 8001d72:	b29a      	uxth	r2, r3
 8001d74:	887b      	ldrh	r3, [r7, #2]
 8001d76:	43db      	mvns	r3, r3
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	b29a      	uxth	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	819a      	strh	r2, [r3, #12]
}
 8001d82:	bf00      	nop
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bc80      	pop	{r7}
 8001d8a:	4770      	bx	lr

08001d8c <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	460b      	mov	r3, r1
 8001d96:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001d98:	78fb      	ldrb	r3, [r7, #3]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d008      	beq.n	8001db0 <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	881b      	ldrh	r3, [r3, #0]
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001da8:	b29a      	uxth	r2, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
  }
}
 8001dae:	e007      	b.n	8001dc0 <TIM_ARRPreloadConfig+0x34>
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	881b      	ldrh	r3, [r3, #0]
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001dba:	b29a      	uxth	r2, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	801a      	strh	r2, [r3, #0]
}
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bc80      	pop	{r7}
 8001dc8:	4770      	bx	lr

08001dca <TIM_OC1PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	b085      	sub	sp, #20
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	8b1b      	ldrh	r3, [r3, #24]
 8001dde:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1PE);
 8001de0:	89fb      	ldrh	r3, [r7, #14]
 8001de2:	f023 0308 	bic.w	r3, r3, #8
 8001de6:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8001de8:	89fa      	ldrh	r2, [r7, #14]
 8001dea:	887b      	ldrh	r3, [r7, #2]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	89fa      	ldrh	r2, [r7, #14]
 8001df4:	831a      	strh	r2, [r3, #24]
}
 8001df6:	bf00      	nop
 8001df8:	3714      	adds	r7, #20
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bc80      	pop	{r7}
 8001dfe:	4770      	bx	lr

08001e00 <TIM_OC2PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	460b      	mov	r3, r1
 8001e0a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	8b1b      	ldrh	r3, [r3, #24]
 8001e14:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2PE);
 8001e16:	89fb      	ldrh	r3, [r7, #14]
 8001e18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001e1c:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 8001e1e:	887b      	ldrh	r3, [r7, #2]
 8001e20:	021b      	lsls	r3, r3, #8
 8001e22:	b29a      	uxth	r2, r3
 8001e24:	89fb      	ldrh	r3, [r7, #14]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	89fa      	ldrh	r2, [r7, #14]
 8001e2e:	831a      	strh	r2, [r3, #24]
}
 8001e30:	bf00      	nop
 8001e32:	3714      	adds	r7, #20
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bc80      	pop	{r7}
 8001e38:	4770      	bx	lr

08001e3a <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *   This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	b085      	sub	sp, #20
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
 8001e42:	460b      	mov	r3, r1
 8001e44:	807b      	strh	r3, [r7, #2]
 8001e46:	4613      	mov	r3, r2
 8001e48:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_Set << TIM_Channel;
 8001e4e:	887b      	ldrh	r3, [r7, #2]
 8001e50:	2201      	movs	r2, #1
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	8c1b      	ldrh	r3, [r3, #32]
 8001e5c:	b29a      	uxth	r2, r3
 8001e5e:	89fb      	ldrh	r3, [r7, #14]
 8001e60:	43db      	mvns	r3, r3
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	4013      	ands	r3, r2
 8001e66:	b29a      	uxth	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	8c1b      	ldrh	r3, [r3, #32]
 8001e70:	b29a      	uxth	r2, r3
 8001e72:	8839      	ldrh	r1, [r7, #0]
 8001e74:	887b      	ldrh	r3, [r7, #2]
 8001e76:	fa01 f303 	lsl.w	r3, r1, r3
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	841a      	strh	r2, [r3, #32]
}
 8001e84:	bf00      	nop
 8001e86:	3714      	adds	r7, #20
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bc80      	pop	{r7}
 8001e8c:	4770      	bx	lr

08001e8e <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *   This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	b085      	sub	sp, #20
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
 8001e96:	460b      	mov	r3, r1
 8001e98:	807b      	strh	r3, [r7, #2]
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_Set << TIM_Channel;
 8001ea2:	887b      	ldrh	r3, [r7, #2]
 8001ea4:	2204      	movs	r2, #4
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	8c1b      	ldrh	r3, [r3, #32]
 8001eb0:	b29a      	uxth	r2, r3
 8001eb2:	89fb      	ldrh	r3, [r7, #14]
 8001eb4:	43db      	mvns	r3, r3
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	4013      	ands	r3, r2
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	8c1b      	ldrh	r3, [r3, #32]
 8001ec4:	b29a      	uxth	r2, r3
 8001ec6:	8839      	ldrh	r1, [r7, #0]
 8001ec8:	887b      	ldrh	r3, [r7, #2]
 8001eca:	fa01 f303 	lsl.w	r3, r1, r3
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	b29a      	uxth	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	841a      	strh	r2, [r3, #32]
}
 8001ed8:	bf00      	nop
 8001eda:	3714      	adds	r7, #20
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bc80      	pop	{r7}
 8001ee0:	4770      	bx	lr

08001ee2 <TIM_SelectOCxM>:
  *     @arg TIM_ForcedAction_Active
  *     @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	b085      	sub	sp, #20
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
 8001eea:	460b      	mov	r3, r1
 8001eec:	807b      	strh	r3, [r7, #2]
 8001eee:	4613      	mov	r3, r2
 8001ef0:	803b      	strh	r3, [r7, #0]
  uint32_t tmp = 0;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	60fb      	str	r3, [r7, #12]
  uint16_t tmp1 = 0;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	60fb      	str	r3, [r7, #12]
  tmp += CCMR_Offset;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	3318      	adds	r3, #24
 8001f02:	60fb      	str	r3, [r7, #12]

  tmp1 = CCER_CCE_Set << (uint16_t)TIM_Channel;
 8001f04:	887b      	ldrh	r3, [r7, #2]
 8001f06:	2201      	movs	r2, #1
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	817b      	strh	r3, [r7, #10]

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	8c1b      	ldrh	r3, [r3, #32]
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	897b      	ldrh	r3, [r7, #10]
 8001f16:	43db      	mvns	r3, r3
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	b29a      	uxth	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	841a      	strh	r2, [r3, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 8001f22:	887b      	ldrh	r3, [r7, #2]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d002      	beq.n	8001f2e <TIM_SelectOCxM+0x4c>
 8001f28:	887b      	ldrh	r3, [r7, #2]
 8001f2a:	2b08      	cmp	r3, #8
 8001f2c:	d113      	bne.n	8001f56 <TIM_SelectOCxM+0x74>
  {
    tmp += (TIM_Channel>>1);
 8001f2e:	887b      	ldrh	r3, [r7, #2]
 8001f30:	085b      	lsrs	r3, r3, #1
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	461a      	mov	r2, r3
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	4413      	add	r3, r2
 8001f3a:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC1M);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001f46:	601a      	str	r2, [r3, #0]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	6819      	ldr	r1, [r3, #0]
 8001f4c:	883a      	ldrh	r2, [r7, #0]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	430a      	orrs	r2, r1
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	e018      	b.n	8001f88 <TIM_SelectOCxM+0xa6>
  }
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
 8001f56:	887b      	ldrh	r3, [r7, #2]
 8001f58:	3b04      	subs	r3, #4
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	085b      	lsrs	r3, r3, #1
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	461a      	mov	r2, r3
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	4413      	add	r3, r2
 8001f66:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC2M);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8001f72:	601a      	str	r2, [r3, #0]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	883b      	ldrh	r3, [r7, #0]
 8001f7a:	021b      	lsls	r3, r3, #8
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	4619      	mov	r1, r3
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	430a      	orrs	r2, r1
 8001f84:	601a      	str	r2, [r3, #0]
  }
}
 8001f86:	bf00      	nop
 8001f88:	bf00      	nop
 8001f8a:	3714      	adds	r7, #20
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bc80      	pop	{r7}
 8001f90:	4770      	bx	lr

08001f92 <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1 to 17 except 6 and 7 to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint16_t Compare1)
{
 8001f92:	b480      	push	{r7}
 8001f94:	b083      	sub	sp, #12
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	887a      	ldrh	r2, [r7, #2]
 8001fa2:	869a      	strh	r2, [r3, #52]	; 0x34
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bc80      	pop	{r7}
 8001fac:	4770      	bx	lr

08001fae <TIM_SetCompare2>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9, 12 or 15 to select the TIM peripheral.
  * @param  Compare2: specifies the Capture Compare2 register new value.
  * @retval None
  */
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint16_t Compare2)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	b083      	sub	sp, #12
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	887a      	ldrh	r2, [r7, #2]
 8001fbe:	871a      	strh	r2, [r3, #56]	; 0x38
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bc80      	pop	{r7}
 8001fc8:	4770      	bx	lr

08001fca <TIM_ClearFlag>:
  *   - TIM_FLAG_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_FLAG_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.   
  * @retval None
  */
void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{  
 8001fca:	b480      	push	{r7}
 8001fcc:	b083      	sub	sp, #12
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_CLEAR_FLAG(TIM_FLAG));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
 8001fd6:	887b      	ldrh	r3, [r7, #2]
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	b29a      	uxth	r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	821a      	strh	r2, [r3, #16]
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bc80      	pop	{r7}
 8001fe8:	4770      	bx	lr

08001fea <TIM_GetITStatus>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.  
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8001fea:	b480      	push	{r7}
 8001fec:	b085      	sub	sp, #20
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	81bb      	strh	r3, [r7, #12]
 8001ffe:	2300      	movs	r3, #0
 8002000:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	8a1b      	ldrh	r3, [r3, #16]
 8002006:	b29a      	uxth	r2, r3
 8002008:	887b      	ldrh	r3, [r7, #2]
 800200a:	4013      	ands	r3, r2
 800200c:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	899b      	ldrh	r3, [r3, #12]
 8002012:	b29a      	uxth	r2, r3
 8002014:	887b      	ldrh	r3, [r7, #2]
 8002016:	4013      	ands	r3, r2
 8002018:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 800201a:	89bb      	ldrh	r3, [r7, #12]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d005      	beq.n	800202c <TIM_GetITStatus+0x42>
 8002020:	897b      	ldrh	r3, [r7, #10]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d002      	beq.n	800202c <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8002026:	2301      	movs	r3, #1
 8002028:	73fb      	strb	r3, [r7, #15]
 800202a:	e001      	b.n	8002030 <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 800202c:	2300      	movs	r3, #0
 800202e:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002030:	7bfb      	ldrb	r3, [r7, #15]
}
 8002032:	4618      	mov	r0, r3
 8002034:	3714      	adds	r7, #20
 8002036:	46bd      	mov	sp, r7
 8002038:	bc80      	pop	{r7}
 800203a:	4770      	bx	lr

0800203c <__libc_init_array>:
 800203c:	b570      	push	{r4, r5, r6, lr}
 800203e:	2600      	movs	r6, #0
 8002040:	4d0c      	ldr	r5, [pc, #48]	; (8002074 <__libc_init_array+0x38>)
 8002042:	4c0d      	ldr	r4, [pc, #52]	; (8002078 <__libc_init_array+0x3c>)
 8002044:	1b64      	subs	r4, r4, r5
 8002046:	10a4      	asrs	r4, r4, #2
 8002048:	42a6      	cmp	r6, r4
 800204a:	d109      	bne.n	8002060 <__libc_init_array+0x24>
 800204c:	f000 f81a 	bl	8002084 <_init>
 8002050:	2600      	movs	r6, #0
 8002052:	4d0a      	ldr	r5, [pc, #40]	; (800207c <__libc_init_array+0x40>)
 8002054:	4c0a      	ldr	r4, [pc, #40]	; (8002080 <__libc_init_array+0x44>)
 8002056:	1b64      	subs	r4, r4, r5
 8002058:	10a4      	asrs	r4, r4, #2
 800205a:	42a6      	cmp	r6, r4
 800205c:	d105      	bne.n	800206a <__libc_init_array+0x2e>
 800205e:	bd70      	pop	{r4, r5, r6, pc}
 8002060:	f855 3b04 	ldr.w	r3, [r5], #4
 8002064:	4798      	blx	r3
 8002066:	3601      	adds	r6, #1
 8002068:	e7ee      	b.n	8002048 <__libc_init_array+0xc>
 800206a:	f855 3b04 	ldr.w	r3, [r5], #4
 800206e:	4798      	blx	r3
 8002070:	3601      	adds	r6, #1
 8002072:	e7f2      	b.n	800205a <__libc_init_array+0x1e>
 8002074:	0800209c 	.word	0x0800209c
 8002078:	0800209c 	.word	0x0800209c
 800207c:	0800209c 	.word	0x0800209c
 8002080:	080020a0 	.word	0x080020a0

08002084 <_init>:
 8002084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002086:	bf00      	nop
 8002088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800208a:	bc08      	pop	{r3}
 800208c:	469e      	mov	lr, r3
 800208e:	4770      	bx	lr

08002090 <_fini>:
 8002090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002092:	bf00      	nop
 8002094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002096:	bc08      	pop	{r3}
 8002098:	469e      	mov	lr, r3
 800209a:	4770      	bx	lr
