
F1_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002c8  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003f8  08000400  00010400  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003f8  080003f8  00010400  2**0
                  CONTENTS
  4 .ARM          00000000  080003f8  080003f8  00010400  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003f8  08000400  00010400  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003f8  080003f8  000103f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003fc  080003fc  000103fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010400  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000400  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000400  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010400  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000633  00000000  00000000  00010429  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000251  00000000  00000000  00010a5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000e0  00000000  00000000  00010cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000a8  00000000  00000000  00010d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000488  00000000  00000000  00010e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000014c2  00000000  00000000  000112c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004d2a4  00000000  00000000  00012782  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0005fa26  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000204  00000000  00000000  0005fa78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080003e0 	.word	0x080003e0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080003e0 	.word	0x080003e0

08000170 <NMI_Handler>:
/* Includes ------------------------------------------------------------------*/
#include "stm32f10x_it.h"



void NMI_Handler(void) {
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
}
 8000174:	bf00      	nop
 8000176:	46bd      	mov	sp, r7
 8000178:	bc80      	pop	{r7}
 800017a:	4770      	bx	lr

0800017c <HardFault_Handler>:
/**
 * @brief  This function handles Hard Fault exception.
 * @param  None
 * @retval None
 */
void HardFault_Handler(void) {
 800017c:	b480      	push	{r7}
 800017e:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Hard Fault exception occurs */
	while (1) {
 8000180:	e7fe      	b.n	8000180 <HardFault_Handler+0x4>

08000182 <MemManage_Handler>:
/**
 * @brief  This function handles Memory Manage exception.
 * @param  None
 * @retval None
 */
void MemManage_Handler(void) {
 8000182:	b480      	push	{r7}
 8000184:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Memory Manage exception occurs */
	while (1) {
 8000186:	e7fe      	b.n	8000186 <MemManage_Handler+0x4>

08000188 <BusFault_Handler>:
/**
 * @brief  This function handles Bus Fault exception.
 * @param  None
 * @retval None
 */
void BusFault_Handler(void) {
 8000188:	b480      	push	{r7}
 800018a:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Bus Fault exception occurs */
	while (1) {
 800018c:	e7fe      	b.n	800018c <BusFault_Handler+0x4>

0800018e <UsageFault_Handler>:
/**
 * @brief  This function handles Usage Fault exception.
 * @param  None
 * @retval None
 */
void UsageFault_Handler(void) {
 800018e:	b480      	push	{r7}
 8000190:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Usage Fault exception occurs */
	while (1) {
 8000192:	e7fe      	b.n	8000192 <UsageFault_Handler+0x4>

08000194 <SVC_Handler>:
/**
 * @brief  This function handles SVCall exception.
 * @param  None
 * @retval None
 */
void SVC_Handler(void) {
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
}
 8000198:	bf00      	nop
 800019a:	46bd      	mov	sp, r7
 800019c:	bc80      	pop	{r7}
 800019e:	4770      	bx	lr

080001a0 <DebugMon_Handler>:
/**
 * @brief  This function handles Debug Monitor exception.
 * @param  None
 * @retval None
 */
void DebugMon_Handler(void) {
 80001a0:	b480      	push	{r7}
 80001a2:	af00      	add	r7, sp, #0
}
 80001a4:	bf00      	nop
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bc80      	pop	{r7}
 80001aa:	4770      	bx	lr

080001ac <PendSV_Handler>:
/**
 * @brief  This function handles PendSVC exception.
 * @param  None
 * @retval None
 */
void PendSV_Handler(void) {
 80001ac:	b480      	push	{r7}
 80001ae:	af00      	add	r7, sp, #0
}
 80001b0:	bf00      	nop
 80001b2:	46bd      	mov	sp, r7
 80001b4:	bc80      	pop	{r7}
 80001b6:	4770      	bx	lr

080001b8 <SysTick_Handler>:
/**
 * @brief  This function handles SysTick Handler.
 * @param  None
 * @retval None
 */
void SysTick_Handler(void) {
 80001b8:	b480      	push	{r7}
 80001ba:	af00      	add	r7, sp, #0
}
 80001bc:	bf00      	nop
 80001be:	46bd      	mov	sp, r7
 80001c0:	bc80      	pop	{r7}
 80001c2:	4770      	bx	lr

080001c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80001c8:	4b15      	ldr	r3, [pc, #84]	; (8000220 <SystemInit+0x5c>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	4a14      	ldr	r2, [pc, #80]	; (8000220 <SystemInit+0x5c>)
 80001ce:	f043 0301 	orr.w	r3, r3, #1
 80001d2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80001d4:	4b12      	ldr	r3, [pc, #72]	; (8000220 <SystemInit+0x5c>)
 80001d6:	685a      	ldr	r2, [r3, #4]
 80001d8:	4911      	ldr	r1, [pc, #68]	; (8000220 <SystemInit+0x5c>)
 80001da:	4b12      	ldr	r3, [pc, #72]	; (8000224 <SystemInit+0x60>)
 80001dc:	4013      	ands	r3, r2
 80001de:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80001e0:	4b0f      	ldr	r3, [pc, #60]	; (8000220 <SystemInit+0x5c>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	4a0e      	ldr	r2, [pc, #56]	; (8000220 <SystemInit+0x5c>)
 80001e6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80001ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80001ee:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80001f0:	4b0b      	ldr	r3, [pc, #44]	; (8000220 <SystemInit+0x5c>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a0a      	ldr	r2, [pc, #40]	; (8000220 <SystemInit+0x5c>)
 80001f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80001fa:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80001fc:	4b08      	ldr	r3, [pc, #32]	; (8000220 <SystemInit+0x5c>)
 80001fe:	685b      	ldr	r3, [r3, #4]
 8000200:	4a07      	ldr	r2, [pc, #28]	; (8000220 <SystemInit+0x5c>)
 8000202:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000206:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000208:	4b05      	ldr	r3, [pc, #20]	; (8000220 <SystemInit+0x5c>)
 800020a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800020e:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8000210:	f000 f80c 	bl	800022c <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000214:	4b04      	ldr	r3, [pc, #16]	; (8000228 <SystemInit+0x64>)
 8000216:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800021a:	609a      	str	r2, [r3, #8]
#endif 
}
 800021c:	bf00      	nop
 800021e:	bd80      	pop	{r7, pc}
 8000220:	40021000 	.word	0x40021000
 8000224:	f8ff0000 	.word	0xf8ff0000
 8000228:	e000ed00 	.word	0xe000ed00

0800022c <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8000230:	f000 f802 	bl	8000238 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8000234:	bf00      	nop
 8000236:	bd80      	pop	{r7, pc}

08000238 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8000238:	b480      	push	{r7}
 800023a:	b083      	sub	sp, #12
 800023c:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800023e:	2300      	movs	r3, #0
 8000240:	607b      	str	r3, [r7, #4]
 8000242:	2300      	movs	r3, #0
 8000244:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000246:	4b3a      	ldr	r3, [pc, #232]	; (8000330 <SetSysClockTo72+0xf8>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	4a39      	ldr	r2, [pc, #228]	; (8000330 <SetSysClockTo72+0xf8>)
 800024c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000250:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000252:	4b37      	ldr	r3, [pc, #220]	; (8000330 <SetSysClockTo72+0xf8>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800025a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	3301      	adds	r3, #1
 8000260:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000262:	683b      	ldr	r3, [r7, #0]
 8000264:	2b00      	cmp	r3, #0
 8000266:	d103      	bne.n	8000270 <SetSysClockTo72+0x38>
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800026e:	d1f0      	bne.n	8000252 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000270:	4b2f      	ldr	r3, [pc, #188]	; (8000330 <SetSysClockTo72+0xf8>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000278:	2b00      	cmp	r3, #0
 800027a:	d002      	beq.n	8000282 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 800027c:	2301      	movs	r3, #1
 800027e:	603b      	str	r3, [r7, #0]
 8000280:	e001      	b.n	8000286 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000282:	2300      	movs	r3, #0
 8000284:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8000286:	683b      	ldr	r3, [r7, #0]
 8000288:	2b01      	cmp	r3, #1
 800028a:	d14b      	bne.n	8000324 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 800028c:	4b29      	ldr	r3, [pc, #164]	; (8000334 <SetSysClockTo72+0xfc>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a28      	ldr	r2, [pc, #160]	; (8000334 <SetSysClockTo72+0xfc>)
 8000292:	f043 0310 	orr.w	r3, r3, #16
 8000296:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8000298:	4b26      	ldr	r3, [pc, #152]	; (8000334 <SetSysClockTo72+0xfc>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	4a25      	ldr	r2, [pc, #148]	; (8000334 <SetSysClockTo72+0xfc>)
 800029e:	f023 0303 	bic.w	r3, r3, #3
 80002a2:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 80002a4:	4b23      	ldr	r3, [pc, #140]	; (8000334 <SetSysClockTo72+0xfc>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4a22      	ldr	r2, [pc, #136]	; (8000334 <SetSysClockTo72+0xfc>)
 80002aa:	f043 0302 	orr.w	r3, r3, #2
 80002ae:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80002b0:	4b1f      	ldr	r3, [pc, #124]	; (8000330 <SetSysClockTo72+0xf8>)
 80002b2:	4a1f      	ldr	r2, [pc, #124]	; (8000330 <SetSysClockTo72+0xf8>)
 80002b4:	685b      	ldr	r3, [r3, #4]
 80002b6:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80002b8:	4b1d      	ldr	r3, [pc, #116]	; (8000330 <SetSysClockTo72+0xf8>)
 80002ba:	4a1d      	ldr	r2, [pc, #116]	; (8000330 <SetSysClockTo72+0xf8>)
 80002bc:	685b      	ldr	r3, [r3, #4]
 80002be:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80002c0:	4b1b      	ldr	r3, [pc, #108]	; (8000330 <SetSysClockTo72+0xf8>)
 80002c2:	685b      	ldr	r3, [r3, #4]
 80002c4:	4a1a      	ldr	r2, [pc, #104]	; (8000330 <SetSysClockTo72+0xf8>)
 80002c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002ca:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 80002cc:	4b18      	ldr	r3, [pc, #96]	; (8000330 <SetSysClockTo72+0xf8>)
 80002ce:	685b      	ldr	r3, [r3, #4]
 80002d0:	4a17      	ldr	r2, [pc, #92]	; (8000330 <SetSysClockTo72+0xf8>)
 80002d2:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80002d6:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 80002d8:	4b15      	ldr	r3, [pc, #84]	; (8000330 <SetSysClockTo72+0xf8>)
 80002da:	685b      	ldr	r3, [r3, #4]
 80002dc:	4a14      	ldr	r2, [pc, #80]	; (8000330 <SetSysClockTo72+0xf8>)
 80002de:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 80002e2:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80002e4:	4b12      	ldr	r3, [pc, #72]	; (8000330 <SetSysClockTo72+0xf8>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4a11      	ldr	r2, [pc, #68]	; (8000330 <SetSysClockTo72+0xf8>)
 80002ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002ee:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80002f0:	bf00      	nop
 80002f2:	4b0f      	ldr	r3, [pc, #60]	; (8000330 <SetSysClockTo72+0xf8>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d0f9      	beq.n	80002f2 <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80002fe:	4b0c      	ldr	r3, [pc, #48]	; (8000330 <SetSysClockTo72+0xf8>)
 8000300:	685b      	ldr	r3, [r3, #4]
 8000302:	4a0b      	ldr	r2, [pc, #44]	; (8000330 <SetSysClockTo72+0xf8>)
 8000304:	f023 0303 	bic.w	r3, r3, #3
 8000308:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 800030a:	4b09      	ldr	r3, [pc, #36]	; (8000330 <SetSysClockTo72+0xf8>)
 800030c:	685b      	ldr	r3, [r3, #4]
 800030e:	4a08      	ldr	r2, [pc, #32]	; (8000330 <SetSysClockTo72+0xf8>)
 8000310:	f043 0302 	orr.w	r3, r3, #2
 8000314:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8000316:	bf00      	nop
 8000318:	4b05      	ldr	r3, [pc, #20]	; (8000330 <SetSysClockTo72+0xf8>)
 800031a:	685b      	ldr	r3, [r3, #4]
 800031c:	f003 030c 	and.w	r3, r3, #12
 8000320:	2b08      	cmp	r3, #8
 8000322:	d1f9      	bne.n	8000318 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8000324:	bf00      	nop
 8000326:	370c      	adds	r7, #12
 8000328:	46bd      	mov	sp, r7
 800032a:	bc80      	pop	{r7}
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	40021000 	.word	0x40021000
 8000334:	40022000 	.word	0x40022000

08000338 <Reset_Handler>:
*/

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:  ldr   r0, =_estack
 8000338:	480d      	ldr	r0, [pc, #52]	; (8000370 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800033a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800033c:	f7ff ff42 	bl	80001c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000340:	480c      	ldr	r0, [pc, #48]	; (8000374 <LoopForever+0x6>)
  ldr r1, =_edata
 8000342:	490d      	ldr	r1, [pc, #52]	; (8000378 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000344:	4a0d      	ldr	r2, [pc, #52]	; (800037c <LoopForever+0xe>)
  movs r3, #0
 8000346:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000348:	e002      	b.n	8000350 <LoopCopyDataInit>

0800034a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800034a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800034c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800034e:	3304      	adds	r3, #4

08000350 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000350:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000352:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000354:	d3f9      	bcc.n	800034a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000356:	4a0a      	ldr	r2, [pc, #40]	; (8000380 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000358:	4c0a      	ldr	r4, [pc, #40]	; (8000384 <LoopForever+0x16>)
  movs r3, #0
 800035a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800035c:	e001      	b.n	8000362 <LoopFillZerobss>

0800035e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800035e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000360:	3204      	adds	r2, #4

08000362 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000362:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000364:	d3fb      	bcc.n	800035e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000366:	f000 f817 	bl	8000398 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800036a:	f000 f80e 	bl	800038a <main>

0800036e <LoopForever>:

LoopForever:
    b LoopForever
 800036e:	e7fe      	b.n	800036e <LoopForever>
Reset_Handler:  ldr   r0, =_estack
 8000370:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000374:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000378:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800037c:	08000400 	.word	0x08000400
  ldr r2, =_sbss
 8000380:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000384:	2000001c 	.word	0x2000001c

08000388 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000388:	e7fe      	b.n	8000388 <ADC1_2_IRQHandler>

0800038a <main>:
#include "stm32f10x.h"

int main() {
 800038a:	b480      	push	{r7}
 800038c:	af00      	add	r7, sp, #0
 800038e:	2300      	movs	r3, #0

}
 8000390:	4618      	mov	r0, r3
 8000392:	46bd      	mov	sp, r7
 8000394:	bc80      	pop	{r7}
 8000396:	4770      	bx	lr

08000398 <__libc_init_array>:
 8000398:	b570      	push	{r4, r5, r6, lr}
 800039a:	2600      	movs	r6, #0
 800039c:	4d0c      	ldr	r5, [pc, #48]	; (80003d0 <__libc_init_array+0x38>)
 800039e:	4c0d      	ldr	r4, [pc, #52]	; (80003d4 <__libc_init_array+0x3c>)
 80003a0:	1b64      	subs	r4, r4, r5
 80003a2:	10a4      	asrs	r4, r4, #2
 80003a4:	42a6      	cmp	r6, r4
 80003a6:	d109      	bne.n	80003bc <__libc_init_array+0x24>
 80003a8:	f000 f81a 	bl	80003e0 <_init>
 80003ac:	2600      	movs	r6, #0
 80003ae:	4d0a      	ldr	r5, [pc, #40]	; (80003d8 <__libc_init_array+0x40>)
 80003b0:	4c0a      	ldr	r4, [pc, #40]	; (80003dc <__libc_init_array+0x44>)
 80003b2:	1b64      	subs	r4, r4, r5
 80003b4:	10a4      	asrs	r4, r4, #2
 80003b6:	42a6      	cmp	r6, r4
 80003b8:	d105      	bne.n	80003c6 <__libc_init_array+0x2e>
 80003ba:	bd70      	pop	{r4, r5, r6, pc}
 80003bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80003c0:	4798      	blx	r3
 80003c2:	3601      	adds	r6, #1
 80003c4:	e7ee      	b.n	80003a4 <__libc_init_array+0xc>
 80003c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80003ca:	4798      	blx	r3
 80003cc:	3601      	adds	r6, #1
 80003ce:	e7f2      	b.n	80003b6 <__libc_init_array+0x1e>
 80003d0:	080003f8 	.word	0x080003f8
 80003d4:	080003f8 	.word	0x080003f8
 80003d8:	080003f8 	.word	0x080003f8
 80003dc:	080003fc 	.word	0x080003fc

080003e0 <_init>:
 80003e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003e2:	bf00      	nop
 80003e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003e6:	bc08      	pop	{r3}
 80003e8:	469e      	mov	lr, r3
 80003ea:	4770      	bx	lr

080003ec <_fini>:
 80003ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ee:	bf00      	nop
 80003f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003f2:	bc08      	pop	{r3}
 80003f4:	469e      	mov	lr, r3
 80003f6:	4770      	bx	lr
