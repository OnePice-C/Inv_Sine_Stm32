
F0_CheckFunsionIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000160  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000220  08000220  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000220  08000220  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000220  08000220  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000220  08000220  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000220  08000220  00010220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000224  08000224  00010224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000228  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  0800022c  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  0800022c  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000012be  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000005dc  00000000  00000000  000212ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001a0  00000000  00000000  000218c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000158  00000000  00000000  00021a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000dbfc  00000000  00000000  00021bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001f42  00000000  00000000  0002f7bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005577a  00000000  00000000  000316fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00086e78  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000460  00000000  00000000  00086ec8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000208 	.word	0x08000208

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08000208 	.word	0x08000208

08000108 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000108:	b580      	push	{r7, lr}
 800010a:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */


  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800010c:	e7fe      	b.n	800010c <main+0x4>

0800010e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800010e:	b580      	push	{r7, lr}
 8000110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000112:	e7fe      	b.n	8000112 <NMI_Handler+0x4>

08000114 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000114:	b580      	push	{r7, lr}
 8000116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000118:	e7fe      	b.n	8000118 <HardFault_Handler+0x4>

0800011a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800011a:	b580      	push	{r7, lr}
 800011c:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800011e:	46c0      	nop			; (mov r8, r8)
 8000120:	46bd      	mov	sp, r7
 8000122:	bd80      	pop	{r7, pc}

08000124 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000124:	b580      	push	{r7, lr}
 8000126:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000128:	46c0      	nop			; (mov r8, r8)
 800012a:	46bd      	mov	sp, r7
 800012c:	bd80      	pop	{r7, pc}

0800012e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800012e:	b580      	push	{r7, lr}
 8000130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000132:	f000 f833 	bl	800019c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000136:	46c0      	nop			; (mov r8, r8)
 8000138:	46bd      	mov	sp, r7
 800013a:	bd80      	pop	{r7, pc}

0800013c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800013c:	b580      	push	{r7, lr}
 800013e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000140:	46c0      	nop			; (mov r8, r8)
 8000142:	46bd      	mov	sp, r7
 8000144:	bd80      	pop	{r7, pc}
	...

08000148 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000148:	480d      	ldr	r0, [pc, #52]	; (8000180 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800014a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800014c:	480d      	ldr	r0, [pc, #52]	; (8000184 <LoopForever+0x6>)
  ldr r1, =_edata
 800014e:	490e      	ldr	r1, [pc, #56]	; (8000188 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000150:	4a0e      	ldr	r2, [pc, #56]	; (800018c <LoopForever+0xe>)
  movs r3, #0
 8000152:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000154:	e002      	b.n	800015c <LoopCopyDataInit>

08000156 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000156:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000158:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800015a:	3304      	adds	r3, #4

0800015c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800015c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800015e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000160:	d3f9      	bcc.n	8000156 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000162:	4a0b      	ldr	r2, [pc, #44]	; (8000190 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000164:	4c0b      	ldr	r4, [pc, #44]	; (8000194 <LoopForever+0x16>)
  movs r3, #0
 8000166:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000168:	e001      	b.n	800016e <LoopFillZerobss>

0800016a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800016a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800016c:	3204      	adds	r2, #4

0800016e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800016e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000170:	d3fb      	bcc.n	800016a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000172:	f7ff ffe3 	bl	800013c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000176:	f000 f823 	bl	80001c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800017a:	f7ff ffc5 	bl	8000108 <main>

0800017e <LoopForever>:

LoopForever:
    b LoopForever
 800017e:	e7fe      	b.n	800017e <LoopForever>
  ldr   r0, =_estack
 8000180:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000184:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000188:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800018c:	08000228 	.word	0x08000228
  ldr r2, =_sbss
 8000190:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000194:	20000024 	.word	0x20000024

08000198 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000198:	e7fe      	b.n	8000198 <ADC1_IRQHandler>
	...

0800019c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800019c:	b580      	push	{r7, lr}
 800019e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001a0:	4b05      	ldr	r3, [pc, #20]	; (80001b8 <HAL_IncTick+0x1c>)
 80001a2:	781b      	ldrb	r3, [r3, #0]
 80001a4:	001a      	movs	r2, r3
 80001a6:	4b05      	ldr	r3, [pc, #20]	; (80001bc <HAL_IncTick+0x20>)
 80001a8:	681b      	ldr	r3, [r3, #0]
 80001aa:	18d2      	adds	r2, r2, r3
 80001ac:	4b03      	ldr	r3, [pc, #12]	; (80001bc <HAL_IncTick+0x20>)
 80001ae:	601a      	str	r2, [r3, #0]
}
 80001b0:	46c0      	nop			; (mov r8, r8)
 80001b2:	46bd      	mov	sp, r7
 80001b4:	bd80      	pop	{r7, pc}
 80001b6:	46c0      	nop			; (mov r8, r8)
 80001b8:	20000000 	.word	0x20000000
 80001bc:	20000020 	.word	0x20000020

080001c0 <__libc_init_array>:
 80001c0:	b570      	push	{r4, r5, r6, lr}
 80001c2:	2600      	movs	r6, #0
 80001c4:	4d0c      	ldr	r5, [pc, #48]	; (80001f8 <__libc_init_array+0x38>)
 80001c6:	4c0d      	ldr	r4, [pc, #52]	; (80001fc <__libc_init_array+0x3c>)
 80001c8:	1b64      	subs	r4, r4, r5
 80001ca:	10a4      	asrs	r4, r4, #2
 80001cc:	42a6      	cmp	r6, r4
 80001ce:	d109      	bne.n	80001e4 <__libc_init_array+0x24>
 80001d0:	2600      	movs	r6, #0
 80001d2:	f000 f819 	bl	8000208 <_init>
 80001d6:	4d0a      	ldr	r5, [pc, #40]	; (8000200 <__libc_init_array+0x40>)
 80001d8:	4c0a      	ldr	r4, [pc, #40]	; (8000204 <__libc_init_array+0x44>)
 80001da:	1b64      	subs	r4, r4, r5
 80001dc:	10a4      	asrs	r4, r4, #2
 80001de:	42a6      	cmp	r6, r4
 80001e0:	d105      	bne.n	80001ee <__libc_init_array+0x2e>
 80001e2:	bd70      	pop	{r4, r5, r6, pc}
 80001e4:	00b3      	lsls	r3, r6, #2
 80001e6:	58eb      	ldr	r3, [r5, r3]
 80001e8:	4798      	blx	r3
 80001ea:	3601      	adds	r6, #1
 80001ec:	e7ee      	b.n	80001cc <__libc_init_array+0xc>
 80001ee:	00b3      	lsls	r3, r6, #2
 80001f0:	58eb      	ldr	r3, [r5, r3]
 80001f2:	4798      	blx	r3
 80001f4:	3601      	adds	r6, #1
 80001f6:	e7f2      	b.n	80001de <__libc_init_array+0x1e>
 80001f8:	08000220 	.word	0x08000220
 80001fc:	08000220 	.word	0x08000220
 8000200:	08000220 	.word	0x08000220
 8000204:	08000224 	.word	0x08000224

08000208 <_init>:
 8000208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800020a:	46c0      	nop			; (mov r8, r8)
 800020c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800020e:	bc08      	pop	{r3}
 8000210:	469e      	mov	lr, r3
 8000212:	4770      	bx	lr

08000214 <_fini>:
 8000214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000216:	46c0      	nop			; (mov r8, r8)
 8000218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800021a:	bc08      	pop	{r3}
 800021c:	469e      	mov	lr, r3
 800021e:	4770      	bx	lr
